index.addDoc({
    id: 0,
    title: "Cover – Samples",
    content: "<img src='images/web/cover.jpg' sizes='auto' srcset='images/web/cover-320.jpg 320w, images/web/cover-640.jpg 640w, images/web/cover-1024.jpg 1024w, images/web/cover-2048.jpg 2048w' class='cover' alt='Samples' />"
});
index.addDoc({
    id: 1,
    title: "Title page – Samples",
    content: "Samples Sample content for Electric Book print, epub and web output Arthur Attwell <img src='../assets/images/web/publisher-logo.jpg' sizes='auto' srcset='../assets/images/web/publisher-logo-320.jpg 320w, ../assets/images/web/publisher-logo-640.jpg 640w, ../assets/images/web/publisher-logo-1024.jpg 1024w, ../assets/images/web/publisher-logo-2048.jpg 2048w' class='title-page-logo' alt='' />"
});
index.addDoc({
    id: 2,
    title: "Copyright – Samples",
    content: "Copyright Samples © Arthur Attwell ISBN: 978-1-928313-13-7 ISBN (Digital download): 9780000000000 This work is licensed under a Creative Commons Attribution 4.0 International License. This means you are free to share (copy and redistribute the material in any medium or format) and adapt it (remix, transform, and build upon the material) for any purpose, even commercially, as long as you give appropriate credit, with a link to your source, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use."
});
index.addDoc({
    id: 3,
    title: "Contents – Samples",
    content: "Contents Frontmatter Half title page Previous publications Title page Copyright Contents Dedication Epigraph Frontispiece Other frontmatter Text Plain text Headings Quotes Blockquotes Pullquotes Quote sources Lists Simple lists Chapter tables of contents Bibliographies Definitions and glossaries Tables Boxes Notes Dividers Poetry Questions and quizzes Images Plain images Figures Code and mathematics Code Mathematics Interactivity Links and buttons Video Audio iFrames Slides Indexes Traditional index Dynamic index"
});
index.addDoc({
    id: 4,
    title: "Text – Samples",
    content: "Text"
});
index.addDoc({
    id: 5,
    title: "Plain text – Samples",
    content: "Plain text Most books comprise pages and pages of running text. A good design makes them lovely to look at and easy to read. The heart of a design is how it handles both plain text and special forms like letters. There is a letter towards the end of this chapter. The text for this chapter is taken from Sir Arthur Conan Doyle’s Adventures of Sherlock Holmes. A Scandal in Bohemia I. To Sherlock Holmes she is always THE woman. I have seldom heard him mention her under any other name. In his eyes she eclipses and predominates the whole of her sex. It was not that he felt any emotion akin to love for Irene Adler. All emotions, and that one particularly, were abhorrent to his cold, precise but admirably balanced mind. He was, I take it, the most perfect reasoning and observing machine that the world has seen, but as a lover he would have placed himself in a false position. He never spoke of the softer passions, save with a gibe and a sneer. They were admirable things for the observer–excellent for drawing the veil from men’s motives and actions. But for the trained reasoner to admit such intrusions into his own delicate and finely adjusted temperament was to introduce a distracting factor which might throw a doubt upon all his mental results. Grit in a sensitive instrument, or a crack in one of his own high-power lenses, would not be more disturbing than a strong emotion in a nature such as his. And yet there was but one woman to him, and that woman was the late Irene Adler, of dubious and questionable memory. I had seen little of Holmes lately. My marriage had drifted us away from each other. My own complete happiness, and the home-centred interests which rise up around the man who first finds himself master of his own establishment, were sufficient to absorb all my attention, while Holmes, who loathed every form of society with his whole Bohemian soul, remained in our lodgings in Baker Street, buried among his old books, and alternating from week to week between cocaine and ambition, the drowsiness of the drug, and the fierce energy of his own keen nature. He was still, as ever, deeply attracted by the study of crime, and occupied his immense faculties and extraordinary powers of observation in following out those clues, and clearing up those mysteries which had been abandoned as hopeless by the official police. From time to time I heard some vague account of his doings: of his summons to Odessa in the case of the Trepoff murder, of his clearing up of the singular tragedy of the Atkinson brothers at Trincomalee, and finally of the mission which he had accomplished so delicately and successfully for the reigning family of Holland. Beyond these signs of his activity, however, which I merely shared with all the readers of the daily press, I knew little of my former friend and companion. One night–it was on the twentieth of March, 1888–I was returning from a journey to a patient (for I had now returned to civil practice), when my way led me through Baker Street. As I passed the well-remembered door, which must always be associated in my mind with my wooing, and with the dark incidents of the Study in Scarlet, I was seized with a keen desire to see Holmes again, and to know how he was employing his extraordinary powers. His rooms were brilliantly lit, and, even as I looked up, I saw his tall, spare figure pass twice in a dark silhouette against the blind. He was pacing the room swiftly, eagerly, with his head sunk upon his chest and his hands clasped behind him. To me, who knew his every mood and habit, his attitude and manner told their own story. He was at work again. He had risen out of his drug-created dreams and was hot upon the scent of some new problem. I rang the bell and was shown up to the chamber which had formerly been in part my own. His manner was not effusive. It seldom was; but he was glad, I think, to see me. With hardly a word spoken, but with a kindly eye, he waved me to an armchair, threw across his case of cigars, and indicated a spirit case and a gasogene in the corner. Then he stood before the fire and looked me over in his singular introspective fashion. “Wedlock suits you,” he remarked. “I think, Watson, that you have put on seven and a half pounds since I saw you.” “Seven!” I answered. “Indeed, I should have thought a little more. Just a trifle more, I fancy, Watson. And in practice again, I observe. You did not tell me that you intended to go into harness.” “Then, how do you know?” “I see it, I deduce it. How do I know that you have been getting yourself very wet lately, and that you have a most clumsy and careless servant girl?” “My dear Holmes,” said I, “this is too much. You would certainly have been burned, had you lived a few centuries ago. It is true that I had a country walk on Thursday and came home in a dreadful mess, but as I have changed my clothes I can’t imagine how you deduce it. As to Mary Jane, she is incorrigible, and my wife has given her notice, but there, again, I fail to see how you work it out.” He chuckled to himself and rubbed his long, nervous hands together. “It is simplicity itself,” said he; “my eyes tell me that on the inside of your left shoe, just where the firelight strikes it, the leather is scored by six almost parallel cuts. Obviously they have been caused by someone who has very carelessly scraped round the edges of the sole in order to remove crusted mud from it. Hence, you see, my double deduction that you had been out in vile weather, and that you had a particularly malignant boot-slitting specimen of the London slavey. As to your practice, if a gentleman walks into my rooms smelling of iodoform, with a black mark of nitrate of silver upon his right forefinger, and a bulge on the right side of his top-hat to show where he has secreted his stethoscope, I must be dull, indeed, if I do not pronounce him to be an active member of the medical profession.” I could not help laughing at the ease with which he explained his process of deduction. “When I hear you give your reasons,” I remarked, “the thing always appears to me to be so ridiculously simple that I could easily do it myself, though at each successive instance of your reasoning I am baffled until you explain your process. And yet I believe that my eyes are as good as yours.” “Quite so,” he answered, lighting a cigarette, and throwing himself down into an armchair. “You see, but you do not observe. The distinction is clear. For example, you have frequently seen the steps which lead up from the hall to this room.” “Frequently.” “How often?” “Well, some hundreds of times.” “Then how many are there?” “How many? I don’t know.” “Quite so! You have not observed. And yet you have seen. That is just my point. Now, I know that there are seventeen steps, because I have both seen and observed. By-the-way, since you are interested in these little problems, and since you are good enough to chronicle one or two of my trifling experiences, you may be interested in this.” He threw over a sheet of thick, pink-tinted note-paper which had been lying open upon the table. “It came by the last post,” said he. “Read it aloud.” The note was undated, and without either signature or address. “There will call upon you to-night, at a quarter to eight o’clock,” it said, “a gentleman who desires to consult you upon a matter of the very deepest moment. Your recent services to one of the royal houses of Europe have shown that you are one who may safely be trusted with matters which are of an importance which can hardly be exaggerated. This account of you we have from all quarters received. Be in your chamber then at that hour, and do not take it amiss if your visitor wear a mask.” “This is indeed a mystery,” I remarked. “What do you imagine that it means?” “I have no data yet. It is a capital mistake to theorize before one has data. Insensibly one begins to twist facts to suit theories, instead of theories to suit facts. But the note itself. What do you deduce from it?” I carefully examined the writing, and the paper upon which it was written. “The man who wrote it was presumably well to do,” I remarked, endeavouring to imitate my companion’s processes. “Such paper could not be bought under half a crown a packet. It is peculiarly strong and stiff.” “Peculiar–that is the very word,” said Holmes. “It is not an English paper at all. Hold it up to the light.” I did so, and saw a large “E” with a small “g,” a “P,” and a large “G” with a small “t” woven into the texture of the paper. “What do you make of that?” asked Holmes. “The name of the maker, no doubt; or his monogram, rather.” “Not at all. The ‘G’ with the small ‘t’ stands for ‘Gesellschaft,’ which is the German for ‘Company.’ It is a customary contraction like our ‘Co.’ ‘P,’ of course, stands for ‘Papier.’ Now for the ‘Eg.’ Let us glance at our Continental Gazetteer.” He took down a heavy brown volume from his shelves. “Eglow, Eglonitz–here we are, Egria. It is in a German-speaking country–in Bohemia, not far from Carlsbad. ‘Remarkable as being the scene of the death of Wallenstein, and for its numerous glass-factories and paper-mills.’ Ha, ha, my boy, what do you make of that?” His eyes sparkled, and he sent up a great blue triumphant cloud from his cigarette. “The paper was made in Bohemia,” I said. “Precisely. And the man who wrote the note is a German. Do you note the peculiar construction of the sentence–‘This account of you we have from all quarters received.’ A Frenchman or Russian could not have written that. It is the German who is so uncourteous to his verbs. It only remains, therefore, to discover what is wanted by this German who writes upon Bohemian paper and prefers wearing a mask to showing his face. And here he comes, if I am not mistaken, to resolve all our doubts.” As he spoke there was the sharp sound of horses’ hoofs and grating wheels against the curb, followed by a sharp pull at the bell. Holmes whistled. “A pair, by the sound,” said he. “Yes,” he continued, glancing out of the window. “A nice little brougham and a pair of beauties. A hundred and fifty guineas apiece. There’s money in this case, Watson, if there is nothing else.” “I think that I had better go, Holmes.” “Not a bit, Doctor. Stay where you are. I am lost without my Boswell. And this promises to be interesting. It would be a pity to miss it.” “But your client–” “Never mind him. I may want your help, and so may he. Here he comes. Sit down in that armchair, Doctor, and give us your best attention.” A slow and heavy step, which had been heard upon the stairs and in the passage, paused immediately outside the door. Then there was a loud and authoritative tap. “Come in!” said Holmes. A man entered who could hardly have been less than six feet six inches in height, with the chest and limbs of a Hercules. His dress was rich with a richness which would, in England, be looked upon as akin to bad taste. Heavy bands of astrakhan were slashed across the sleeves and fronts of his double-breasted coat, while the deep blue cloak which was thrown over his shoulders was lined with flame-coloured silk and secured at the neck with a brooch which consisted of a single flaming beryl. Boots which extended halfway up his calves, and which were trimmed at the tops with rich brown fur, completed the impression of barbaric opulence which was suggested by his whole appearance. He carried a broad-brimmed hat in his hand, while he wore across the upper part of his face, extending down past the cheekbones, a black vizard mask, which he had apparently adjusted that very moment, for his hand was still raised to it as he entered. From the lower part of the face he appeared to be a man of strong character, with a thick, hanging lip, and a long, straight chin suggestive of resolution pushed to the length of obstinacy. “You had my note?” he asked with a deep harsh voice and a strongly marked German accent. “I told you that I would call.” He looked from one to the other of us, as if uncertain which to address. “Pray take a seat,” said Holmes. “This is my friend and colleague, Dr. Watson, who is occasionally good enough to help me in my cases. Whom have I the honour to address?” “You may address me as the Count Von Kramm, a Bohemian nobleman. I understand that this gentleman, your friend, is a man of honour and discretion, whom I may trust with a matter of the most extreme importance. If not, I should much prefer to communicate with you alone.” I rose to go, but Holmes caught me by the wrist and pushed me back into my chair. “It is both, or none,” said he. “You may say before this gentleman anything which you may say to me.” The Count shrugged his broad shoulders. “Then I must begin,” said he, “by binding you both to absolute secrecy for two years; at the end of that time the matter will be of no importance. At present it is not too much to say that it is of such weight it may have an influence upon European history.” “I promise,” said Holmes. “And I.” “You will excuse this mask,” continued our strange visitor. “The august person who employs me wishes his agent to be unknown to you, and I may confess at once that the title by which I have just called myself is not exactly my own.” “I was aware of it,” said Holmes dryly. “The circumstances are of great delicacy, and every precaution has to be taken to quench what might grow to be an immense scandal and seriously compromise one of the reigning families of Europe. To speak plainly, the matter implicates the great House of Ormstein, hereditary kings of Bohemia.” “I was also aware of that,” murmured Holmes, settling himself down in his armchair and closing his eyes. Our visitor glanced with some apparent surprise at the languid, lounging figure of the man who had been no doubt depicted to him as the most incisive reasoner and most energetic agent in Europe. Holmes slowly reopened his eyes and looked impatiently at his gigantic client. “If your Majesty would condescend to state your case,” he remarked, “I should be better able to advise you.” The man sprang from his chair and paced up and down the room in uncontrollable agitation. Then, with a gesture of desperation, he tore the mask from his face and hurled it upon the ground. “You are right,” he cried; “I am the King. Why should I attempt to conceal it?” “Why, indeed?” murmured Holmes. “Your Majesty had not spoken before I was aware that I was addressing Wilhelm Gottsreich Sigismond von Ormstein, Grand Duke of Cassel-Felstein, and hereditary King of Bohemia.” “But you can understand,” said our strange visitor, sitting down once more and passing his hand over his high white forehead, “you can understand that I am not accustomed to doing such business in my own person. Yet the matter was so delicate that I could not confide it to an agent without putting myself in his power. I have come incognito from Prague for the purpose of consulting you.” “Then, pray consult,” said Holmes, shutting his eyes once more. “The facts are briefly these: Some five years ago, during a lengthy visit to Warsaw, I made the acquaintance of the well-known adventuress, Irene Adler. The name is no doubt familiar to you.” “Kindly look her up in my index, Doctor,” murmured Holmes without opening his eyes. For many years he had adopted a system of docketing all paragraphs concerning men and things, so that it was difficult to name a subject or a person on which he could not at once furnish information. In this case I found her biography sandwiched in between that of a Hebrew rabbi and that of a staff-commander who had written a monograph upon the deep-sea fishes. “Let me see!” said Holmes. “Hum! Born in New Jersey in the year 1858. Contralto–hum! La Scala, hum! Prima donna Imperial Opera of Warsaw–yes! Retired from operatic stage–ha! Living in London–quite so! Your Majesty, as I understand, became entangled with this young person, wrote her some compromising letters, and is now desirous of getting those letters back.” “Precisely so. But how–” “Was there a secret marriage?” “None.” “No legal papers or certificates?” “None.” “Then I fail to follow your Majesty. If this young person should produce her letters for blackmailing or other purposes, how is she to prove their authenticity?” “There is the writing.” “Pooh, pooh! Forgery.” “My private note-paper.” “Stolen.” “My own seal.” “Imitated.” “My photograph.” “Bought.” “We were both in the photograph.” “Oh, dear! That is very bad! Your Majesty has indeed committed an indiscretion.” “I was mad–insane.” “You have compromised yourself seriously.” “I was only Crown Prince then. I was young. I am but thirty now.” “It must be recovered.” “We have tried and failed.” “Your Majesty must pay. It must be bought.” “She will not sell.” “Stolen, then.” “Five attempts have been made. Twice burglars in my pay ransacked her house. Once we diverted her luggage when she travelled. Twice she has been waylaid. There has been no result.” “No sign of it?” “Absolutely none.” Holmes laughed. “It is quite a pretty little problem,” said he. “But a very serious one to me,” returned the King reproachfully. “Very, indeed. And what does she propose to do with the photograph?” “To ruin me.” “But how?” “I am about to be married.” “So I have heard.” “To Clotilde Lothman von Saxe-Meningen, second daughter of the King of Scandinavia. You may know the strict principles of her family. She is herself the very soul of delicacy. A shadow of a doubt as to my conduct would bring the matter to an end.” “And Irene Adler?” “Threatens to send them the photograph. And she will do it. I know that she will do it. You do not know her, but she has a soul of steel. She has the face of the most beautiful of women, and the mind of the most resolute of men. Rather than I should marry another woman, there are no lengths to which she would not go–none.” “You are sure that she has not sent it yet?” “I am sure.” “And why?” “Because she has said that she would send it on the day when the betrothal was publicly proclaimed. That will be next Monday.” “Oh, then we have three days yet,” said Holmes with a yawn. “That is very fortunate, as I have one or two matters of importance to look into just at present. Your Majesty will, of course, stay in London for the present?” “Certainly. You will find me at the Langham under the name of the Count Von Kramm.” “Then I shall drop you a line to let you know how we progress.” “Pray do so. I shall be all anxiety.” “Then, as to money?” “You have carte blanche.” “Absolutely?” “I tell you that I would give one of the provinces of my kingdom to have that photograph.” “And for present expenses?” The King took a heavy chamois leather bag from under his cloak and laid it on the table. “There are three hundred pounds in gold and seven hundred in notes,” he said. Holmes scribbled a receipt upon a sheet of his note-book and handed it to him. “And Mademoiselle’s address?” he asked. “Is Briony Lodge, Serpentine Avenue, St. John’s Wood.” Holmes took a note of it. “One other question,” said he. “Was the photograph a cabinet?” “It was.” “Then, good-night, your Majesty, and I trust that we shall soon have some good news for you. And good-night, Watson,” he added, as the wheels of the royal brougham rolled down the street. “If you will be good enough to call to-morrow afternoon at three o’clock I should like to chat this little matter over with you.” II. At three o’clock precisely I was at Baker Street, but Holmes had not yet returned. The landlady informed me that he had left the house shortly after eight o’clock in the morning. I sat down beside the fire, however, with the intention of awaiting him, however long he might be. I was already deeply interested in his inquiry, for, though it was surrounded by none of the grim and strange features which were associated with the two crimes which I have already recorded, still, the nature of the case and the exalted station of his client gave it a character of its own. Indeed, apart from the nature of the investigation which my friend had on hand, there was something in his masterly grasp of a situation, and his keen, incisive reasoning, which made it a pleasure to me to study his system of work, and to follow the quick, subtle methods by which he disentangled the most inextricable mysteries. So accustomed was I to his invariable success that the very possibility of his failing had ceased to enter into my head. It was close upon four before the door opened, and a drunken-looking groom, ill-kempt and side-whiskered, with an inflamed face and disreputable clothes, walked into the room. Accustomed as I was to my friend’s amazing powers in the use of disguises, I had to look three times before I was certain that it was indeed he. With a nod he vanished into the bedroom, whence he emerged in five minutes tweed-suited and respectable, as of old. Putting his hands into his pockets, he stretched out his legs in front of the fire and laughed heartily for some minutes. “Well, really!” he cried, and then he choked and laughed again until he was obliged to lie back, limp and helpless, in the chair. “What is it?” “It’s quite too funny. I am sure you could never guess how I employed my morning, or what I ended by doing.” “I can’t imagine. I suppose that you have been watching the habits, and perhaps the house, of Miss Irene Adler.” “Quite so; but the sequel was rather unusual. I will tell you, however. I left the house a little after eight o’clock this morning in the character of a groom out of work. There is a wonderful sympathy and freemasonry among horsey men. Be one of them, and you will know all that there is to know. I soon found Briony Lodge. It is a bijou villa, with a garden at the back, but built out in front right up to the road, two stories. Chubb lock to the door. Large sitting-room on the right side, well furnished, with long windows almost to the floor, and those preposterous English window fasteners which a child could open. Behind there was nothing remarkable, save that the passage window could be reached from the top of the coach-house. I walked round it and examined it closely from every point of view, but without noting anything else of interest. “I then lounged down the street and found, as I expected, that there was a mews in a lane which runs down by one wall of the garden. I lent the ostlers a hand in rubbing down their horses, and received in exchange twopence, a glass of half and half, two fills of shag tobacco, and as much information as I could desire about Miss Adler, to say nothing of half a dozen other people in the neighbourhood in whom I was not in the least interested, but whose biographies I was compelled to listen to.” “And what of Irene Adler?” I asked. “Oh, she has turned all the men’s heads down in that part. She is the daintiest thing under a bonnet on this planet. So say the Serpentine-mews, to a man. She lives quietly, sings at concerts, drives out at five every day, and returns at seven sharp for dinner. Seldom goes out at other times, except when she sings. Has only one male visitor, but a good deal of him. He is dark, handsome, and dashing, never calls less than once a day, and often twice. He is a Mr. Godfrey Norton, of the Inner Temple. See the advantages of a cabman as a confidant. They had driven him home a dozen times from Serpentine-mews, and knew all about him. When I had listened to all they had to tell, I began to walk up and down near Briony Lodge once more, and to think over my plan of campaign. “This Godfrey Norton was evidently an important factor in the matter. He was a lawyer. That sounded ominous. What was the relation between them, and what the object of his repeated visits? Was she his client, his friend, or his mistress? If the former, she had probably transferred the photograph to his keeping. If the latter, it was less likely. On the issue of this question depended whether I should continue my work at Briony Lodge, or turn my attention to the gentleman’s chambers in the Temple. It was a delicate point, and it widened the field of my inquiry. I fear that I bore you with these details, but I have to let you see my little difficulties, if you are to understand the situation.” “I am following you closely,” I answered. “I was still balancing the matter in my mind when a hansom cab drove up to Briony Lodge, and a gentleman sprang out. He was a remarkably handsome man, dark, aquiline, and moustached–evidently the man of whom I had heard. He appeared to be in a great hurry, shouted to the cabman to wait, and brushed past the maid who opened the door with the air of a man who was thoroughly at home. “He was in the house about half an hour, and I could catch glimpses of him in the windows of the sitting-room, pacing up and down, talking excitedly, and waving his arms. Of her I could see nothing. Presently he emerged, looking even more flurried than before. As he stepped up to the cab, he pulled a gold watch from his pocket and looked at it earnestly, ‘Drive like the devil,’ he shouted, ‘first to Gross & Hankey’s in Regent Street, and then to the Church of St. Monica in the Edgeware Road. Half a guinea if you do it in twenty minutes!’ “Away they went, and I was just wondering whether I should not do well to follow them when up the lane came a neat little landau, the coachman with his coat only half-buttoned, and his tie under his ear, while all the tags of his harness were sticking out of the buckles. It hadn’t pulled up before she shot out of the hall door and into it. I only caught a glimpse of her at the moment, but she was a lovely woman, with a face that a man might die for. “‘The Church of St. Monica, John,’ she cried, ‘and half a sovereign if you reach it in twenty minutes.’ “This was quite too good to lose, Watson. I was just balancing whether I should run for it, or whether I should perch behind her landau when a cab came through the street. The driver looked twice at such a shabby fare, but I jumped in before he could object. ‘The Church of St. Monica,’ said I, ‘and half a sovereign if you reach it in twenty minutes.’ It was twenty-five minutes to twelve, and of course it was clear enough what was in the wind. “My cabby drove fast. I don’t think I ever drove faster, but the others were there before us. The cab and the landau with their steaming horses were in front of the door when I arrived. I paid the man and hurried into the church. There was not a soul there save the two whom I had followed and a surpliced clergyman, who seemed to be expostulating with them. They were all three standing in a knot in front of the altar. I lounged up the side aisle like any other idler who has dropped into a church. Suddenly, to my surprise, the three at the altar faced round to me, and Godfrey Norton came running as hard as he could towards me. “‘Thank God,’ he cried. ‘You’ll do. Come! Come!’ “‘What then?’ I asked. “‘Come, man, come, only three minutes, or it won’t be legal.’ “I was half-dragged up to the altar, and before I knew where I was I found myself mumbling responses which were whispered in my ear, and vouching for things of which I knew nothing, and generally assisting in the secure tying up of Irene Adler, spinster, to Godfrey Norton, bachelor. It was all done in an instant, and there was the gentleman thanking me on the one side and the lady on the other, while the clergyman beamed on me in front. It was the most preposterous position in which I ever found myself in my life, and it was the thought of it that started me laughing just now. It seems that there had been some informality about their license, that the clergyman absolutely refused to marry them without a witness of some sort, and that my lucky appearance saved the bridegroom from having to sally out into the streets in search of a best man. The bride gave me a sovereign, and I mean to wear it on my watch-chain in memory of the occasion.” “This is a very unexpected turn of affairs,” said I; “and what then?” “Well, I found my plans very seriously menaced. It looked as if the pair might take an immediate departure, and so necessitate very prompt and energetic measures on my part. At the church door, however, they separated, he driving back to the Temple, and she to her own house. ‘I shall drive out in the park at five as usual,’ she said as she left him. I heard no more. They drove away in different directions, and I went off to make my own arrangements.” “Which are?” “Some cold beef and a glass of beer,” he answered, ringing the bell. “I have been too busy to think of food, and I am likely to be busier still this evening. By the way, Doctor, I shall want your co-operation.” “I shall be delighted.” “You don’t mind breaking the law?” “Not in the least.” “Nor running a chance of arrest?” “Not in a good cause.” “Oh, the cause is excellent!” “Then I am your man.” “I was sure that I might rely on you.” “But what is it you wish?” “When Mrs. Turner has brought in the tray I will make it clear to you. Now,” he said as he turned hungrily on the simple fare that our landlady had provided, “I must discuss it while I eat, for I have not much time. It is nearly five now. In two hours we must be on the scene of action. Miss Irene, or Madame, rather, returns from her drive at seven. We must be at Briony Lodge to meet her.” “And what then?” “You must leave that to me. I have already arranged what is to occur. There is only one point on which I must insist. You must not interfere, come what may. You understand?” “I am to be neutral?” “To do nothing whatever. There will probably be some small unpleasantness. Do not join in it. It will end in my being conveyed into the house. Four or five minutes afterwards the sitting-room window will open. You are to station yourself close to that open window.” “Yes.” “You are to watch me, for I will be visible to you.” “Yes.” “And when I raise my hand–so–you will throw into the room what I give you to throw, and will, at the same time, raise the cry of fire. You quite follow me?” “Entirely.” “It is nothing very formidable,” he said, taking a long cigar-shaped roll from his pocket. “It is an ordinary plumber’s smoke-rocket, fitted with a cap at either end to make it self-lighting. Your task is confined to that. When you raise your cry of fire, it will be taken up by quite a number of people. You may then walk to the end of the street, and I will rejoin you in ten minutes. I hope that I have made myself clear?” “I am to remain neutral, to get near the window, to watch you, and at the signal to throw in this object, then to raise the cry of fire, and to wait you at the corner of the street.” “Precisely.” “Then you may entirely rely on me.” “That is excellent. I think, perhaps, it is almost time that I prepare for the new role I have to play.” He disappeared into his bedroom and returned in a few minutes in the character of an amiable and simple-minded Nonconformist clergyman. His broad black hat, his baggy trousers, his white tie, his sympathetic smile, and general look of peering and benevolent curiosity were such as Mr. John Hare alone could have equalled. It was not merely that Holmes changed his costume. His expression, his manner, his very soul seemed to vary with every fresh part that he assumed. The stage lost a fine actor, even as science lost an acute reasoner, when he became a specialist in crime. It was a quarter past six when we left Baker Street, and it still wanted ten minutes to the hour when we found ourselves in Serpentine Avenue. It was already dusk, and the lamps were just being lighted as we paced up and down in front of Briony Lodge, waiting for the coming of its occupant. The house was just such as I had pictured it from Sherlock Holmes’ succinct description, but the locality appeared to be less private than I expected. On the contrary, for a small street in a quiet neighbourhood, it was remarkably animated. There was a group of shabbily dressed men smoking and laughing in a corner, a scissors-grinder with his wheel, two guardsmen who were flirting with a nurse-girl, and several well-dressed young men who were lounging up and down with cigars in their mouths. “You see,” remarked Holmes, as we paced to and fro in front of the house, “this marriage rather simplifies matters. The photograph becomes a double-edged weapon now. The chances are that she would be as averse to its being seen by Mr. Godfrey Norton, as our client is to its coming to the eyes of his princess. Now the question is, Where are we to find the photograph?” “Where, indeed?” “It is most unlikely that she carries it about with her. It is cabinet size. Too large for easy concealment about a woman’s dress. She knows that the King is capable of having her waylaid and searched. Two attempts of the sort have already been made. We may take it, then, that she does not carry it about with her.” “Where, then?” “Her banker or her lawyer. There is that double possibility. But I am inclined to think neither. Women are naturally secretive, and they like to do their own secreting. Why should she hand it over to anyone else? She could trust her own guardianship, but she could not tell what indirect or political influence might be brought to bear upon a business man. Besides, remember that she had resolved to use it within a few days. It must be where she can lay her hands upon it. It must be in her own house.” “But it has twice been burgled.” “Pshaw! They did not know how to look.” “But how will you look?” “I will not look.” “What then?” “I will get her to show me.” “But she will refuse.” “She will not be able to. But I hear the rumble of wheels. It is her carriage. Now carry out my orders to the letter.” As he spoke the gleam of the side-lights of a carriage came round the curve of the avenue. It was a smart little landau which rattled up to the door of Briony Lodge. As it pulled up, one of the loafing men at the corner dashed forward to open the door in the hope of earning a copper, but was elbowed away by another loafer, who had rushed up with the same intention. A fierce quarrel broke out, which was increased by the two guardsmen, who took sides with one of the loungers, and by the scissors-grinder, who was equally hot upon the other side. A blow was struck, and in an instant the lady, who had stepped from her carriage, was the centre of a little knot of flushed and struggling men, who struck savagely at each other with their fists and sticks. Holmes dashed into the crowd to protect the lady; but just as he reached her he gave a cry and dropped to the ground, with the blood running freely down his face. At his fall the guardsmen took to their heels in one direction and the loungers in the other, while a number of better-dressed people, who had watched the scuffle without taking part in it, crowded in to help the lady and to attend to the injured man. Irene Adler, as I will still call her, had hurried up the steps; but she stood at the top with her superb figure outlined against the lights of the hall, looking back into the street. “Is the poor gentleman much hurt?” she asked. “He is dead,” cried several voices. “No, no, there’s life in him!” shouted another. “But he’ll be gone before you can get him to hospital.” “He’s a brave fellow,” said a woman. “They would have had the lady’s purse and watch if it hadn’t been for him. They were a gang, and a rough one, too. Ah, he’s breathing now.” “He can’t lie in the street. May we bring him in, marm?” “Surely. Bring him into the sitting-room. There is a comfortable sofa. This way, please!” Slowly and solemnly he was borne into Briony Lodge and laid out in the principal room, while I still observed the proceedings from my post by the window. The lamps had been lit, but the blinds had not been drawn, so that I could see Holmes as he lay upon the couch. I do not know whether he was seized with compunction at that moment for the part he was playing, but I know that I never felt more heartily ashamed of myself in my life than when I saw the beautiful creature against whom I was conspiring, or the grace and kindliness with which she waited upon the injured man. And yet it would be the blackest treachery to Holmes to draw back now from the part which he had intrusted to me. I hardened my heart, and took the smoke-rocket from under my ulster. After all, I thought, we are not injuring her. We are but preventing her from injuring another. Holmes had sat up upon the couch, and I saw him motion like a man who is in need of air. A maid rushed across and threw open the window. At the same instant I saw him raise his hand and at the signal I tossed my rocket into the room with a cry of “Fire!” The word was no sooner out of my mouth than the whole crowd of spectators, well dressed and ill–gentlemen, ostlers, and servant-maids–joined in a general shriek of “Fire!” Thick clouds of smoke curled through the room and out at the open window. I caught a glimpse of rushing figures, and a moment later the voice of Holmes from within assuring them that it was a false alarm. Slipping through the shouting crowd I made my way to the corner of the street, and in ten minutes was rejoiced to find my friend’s arm in mine, and to get away from the scene of uproar. He walked swiftly and in silence for some few minutes until we had turned down one of the quiet streets which lead towards the Edgeware Road. “You did it very nicely, Doctor,” he remarked. “Nothing could have been better. It is all right.” “You have the photograph?” “I know where it is.” “And how did you find out?” “She showed me, as I told you she would.” “I am still in the dark.” “I do not wish to make a mystery,” said he, laughing. “The matter was perfectly simple. You, of course, saw that everyone in the street was an accomplice. They were all engaged for the evening.” “I guessed as much.” “Then, when the row broke out, I had a little moist red paint in the palm of my hand. I rushed forward, fell down, clapped my hand to my face, and became a piteous spectacle. It is an old trick.” “That also I could fathom.” “Then they carried me in. She was bound to have me in. What else could she do? And into her sitting-room, which was the very room which I suspected. It lay between that and her bedroom, and I was determined to see which. They laid me on a couch, I motioned for air, they were compelled to open the window, and you had your chance.” “How did that help you?” “It was all-important. When a woman thinks that her house is on fire, her instinct is at once to rush to the thing which she values most. It is a perfectly overpowering impulse, and I have more than once taken advantage of it. In the case of the Darlington substitution scandal it was of use to me, and also in the Arnsworth Castle business. A married woman grabs at her baby; an unmarried one reaches for her jewel-box. Now it was clear to me that our lady of to-day had nothing in the house more precious to her than what we are in quest of. She would rush to secure it. The alarm of fire was admirably done. The smoke and shouting were enough to shake nerves of steel. She responded beautifully. The photograph is in a recess behind a sliding panel just above the right bell-pull. She was there in an instant, and I caught a glimpse of it as she half-drew it out. When I cried out that it was a false alarm, she replaced it, glanced at the rocket, rushed from the room, and I have not seen her since. I rose, and, making my excuses, escaped from the house. I hesitated whether to attempt to secure the photograph at once; but the coachman had come in, and as he was watching me narrowly it seemed safer to wait. A little over-precipitance may ruin all.” “And now?” I asked. “Our quest is practically finished. I shall call with the King to-morrow, and with you, if you care to come with us. We will be shown into the sitting-room to wait for the lady, but it is probable that when she comes she may find neither us nor the photograph. It might be a satisfaction to his Majesty to regain it with his own hands.” “And when will you call?” “At eight in the morning. She will not be up, so that we shall have a clear field. Besides, we must be prompt, for this marriage may mean a complete change in her life and habits. I must wire to the King without delay.” We had reached Baker Street and had stopped at the door. He was searching his pockets for the key when someone passing said: “Good-night, Mister Sherlock Holmes.” There were several people on the pavement at the time, but the greeting appeared to come from a slim youth in an ulster who had hurried by. “I’ve heard that voice before,” said Holmes, staring down the dimly lit street. “Now, I wonder who the deuce that could have been.” III. I slept at Baker Street that night, and we were engaged upon our toast and coffee in the morning when the King of Bohemia rushed into the room. “You have really got it!” he cried, grasping Sherlock Holmes by either shoulder and looking eagerly into his face. “Not yet.” “But you have hopes?” “I have hopes.” “Then, come. I am all impatience to be gone.” “We must have a cab.” “No, my brougham is waiting.” “Then that will simplify matters.” We descended and started off once more for Briony Lodge. “Irene Adler is married,” remarked Holmes. “Married! When?” “Yesterday.” “But to whom?” “To an English lawyer named Norton.” “But she could not love him.” “I am in hopes that she does.” “And why in hopes?” “Because it would spare your Majesty all fear of future annoyance. If the lady loves her husband, she does not love your Majesty. If she does not love your Majesty, there is no reason why she should interfere with your Majesty’s plan.” “It is true. And yet–Well! I wish she had been of my own station! What a queen she would have made!” He relapsed into a moody silence, which was not broken until we drew up in Serpentine Avenue. The door of Briony Lodge was open, and an elderly woman stood upon the steps. She watched us with a sardonic eye as we stepped from the brougham. “Mr. Sherlock Holmes, I believe?” said she. “I am Mr. Holmes,” answered my companion, looking at her with a questioning and rather startled gaze. “Indeed! My mistress told me that you were likely to call. She left this morning with her husband by the 5:15 train from Charing Cross for the Continent.” “What!” Sherlock Holmes staggered back, white with chagrin and surprise. “Do you mean that she has left England?” “Never to return.” “And the papers?” asked the King hoarsely. “All is lost.” “We shall see.” He pushed past the servant and rushed into the drawing-room, followed by the King and myself. The furniture was scattered about in every direction, with dismantled shelves and open drawers, as if the lady had hurriedly ransacked them before her flight. Holmes rushed at the bell-pull, tore back a small sliding shutter, and, plunging in his hand, pulled out a photograph and a letter. The photograph was of Irene Adler herself in evening dress, the letter was superscribed to “Sherlock Holmes, Esq. To be left till called for.” My friend tore it open and we all three read it together. It was dated at midnight of the preceding night and ran in this way: “MY DEAR MR. SHERLOCK HOLMES,–You really did it very well. You took me in completely. Until after the alarm of fire, I had not a suspicion. But then, when I found how I had betrayed myself, I began to think. I had been warned against you months ago. I had been told that if the King employed an agent it would certainly be you. And your address had been given me. Yet, with all this, you made me reveal what you wanted to know. Even after I became suspicious, I found it hard to think evil of such a dear, kind old clergyman. But, you know, I have been trained as an actress myself. Male costume is nothing new to me. I often take advantage of the freedom which it gives. I sent John, the coachman, to watch you, ran up stairs, got into my walking-clothes, as I call them, and came down just as you departed. “Well, I followed you to your door, and so made sure that I was really an object of interest to the celebrated Mr. Sherlock Holmes. Then I, rather imprudently, wished you good-night, and started for the Temple to see my husband. “We both thought the best resource was flight, when pursued by so formidable an antagonist; so you will find the nest empty when you call to-morrow. As to the photograph, your client may rest in peace. I love and am loved by a better man than he. The King may do what he will without hindrance from one whom he has cruelly wronged. I keep it only to safeguard myself, and to preserve a weapon which will always secure me from any steps which he might take in the future. I leave a photograph which he might care to possess; and I remain, dear Mr. Sherlock Holmes, “Very truly yours, “IRENE NORTON, née ADLER.” “What a woman–oh, what a woman!” cried the King of Bohemia, when we had all three read this epistle. “Did I not tell you how quick and resolute she was? Would she not have made an admirable queen? Is it not a pity that she was not on my level?” “From what I have seen of the lady she seems indeed to be on a very different level to your Majesty,” said Holmes coldly. “I am sorry that I have not been able to bring your Majesty’s business to a more successful conclusion.” “On the contrary, my dear sir,” cried the King; “nothing could be more successful. I know that her word is inviolate. The photograph is now as safe as if it were in the fire.” “I am glad to hear your Majesty say so.” “I am immensely indebted to you. Pray tell me in what way I can reward you. This ring–” He slipped an emerald snake ring from his finger and held it out upon the palm of his hand. “Your Majesty has something which I should value even more highly,” said Holmes. “You have but to name it.” “This photograph!” The King stared at him in amazement. “Irene’s photograph!” he cried. “Certainly, if you wish it.” “I thank your Majesty. Then there is no more to be done in the matter. I have the honour to wish you a very good-morning.” He bowed, and, turning away without observing the hand which the King had stretched out to him, he set off in my company for his chambers. And that was how a great scandal threatened to affect the kingdom of Bohemia, and how the best plans of Mr. Sherlock Holmes were beaten by a woman’s wit. He used to make merry over the cleverness of women, but I have not heard him do it of late. And when he speaks of Irene Adler, or when he refers to her photograph, it is always under the honourable title of the woman."
});
index.addDoc({
    id: 6,
    title: "La tapa – Samples",
    content: "<img src='../es/images/web/cover.jpg' sizes='auto' srcset='../es/images/web/cover-320.jpg 320w, ../es/images/web/cover-640.jpg 640w, ../es/images/web/cover-1024.jpg 1024w, ../es/images/web/cover-2048.jpg 2048w' class='cover' alt='Samples' />"
});
index.addDoc({
    id: 7,
    title: "La portada – Samples",
    content: "Samples Sample content for Electric Book print, epub and web output Arthur Attwell <img src='../../assets/images/web/publisher-logo.jpg' sizes='auto' srcset='../../assets/images/web/publisher-logo-320.jpg 320w, ../../assets/images/web/publisher-logo-640.jpg 640w, ../../assets/images/web/publisher-logo-1024.jpg 1024w, ../../assets/images/web/publisher-logo-2048.jpg 2048w' class='title-page-logo' alt='' />"
});
index.addDoc({
    id: 8,
    title: "Derechos – Samples",
    content: "Copyright Samples © Arthur Attwell ISBN: 978-1-928313-13-7 ISBN (Digital download): 9780000000000 This work is licensed under a Creative Commons Attribution 4.0 International License. This means you are free to share (copy and redistribute the material in any medium or format) and adapt it (remix, transform, and build upon the material) for any purpose, even commercially, as long as you give appropriate credit, with a link to your source, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use."
});
index.addDoc({
    id: 9,
    title: "Contenidos – Samples",
    content: "Contents Frontmatter Half title page Previous publications Title page Copyright Contents Dedication Epigraph Frontispiece Other frontmatter Text Plain text Headings Quotes Blockquotes Pullquotes Quote sources Lists Simple lists Chapter tables of contents Bibliographies Definitions and glossaries Tables Boxes Notes Dividers Poetry Questions and quizzes Images Plain images Figures Code and mathematics Code Mathematics Interactivity Links and buttons Video Audio iFrames Slides Indexes Traditional index Dynamic index"
});
index.addDoc({
    id: 10,
    title: "Texte – Samples",
    content: "Texte"
});
index.addDoc({
    id: 11,
    title: "Texto sencillo – Samples",
    content: "Texto sencillo La mayoría de los libros comprenden páginas y páginas de texto continuo. Un buen diseño los hace agradables a la vista y fáciles de leer. El corazón de un diseño es cómo maneja tanto el texto sin formato como las formas especiales como las letras. Hay una carta hacia el final de este capítulo. El texto de este capítulo está tomado de Adventures of Sherlock Holmes de Sir Arthur Conan Doyle. Esto fue traducido por Google Translate. Un escándalo en Bohemia I. Para Sherlock Holmes ella es siempre LA mujer. Pocas veces le he oído mencionarla con otro nombre. A sus ojos ella eclipsa y predomina todo su sexo. No es que sintiera ninguna emoción similar al amor por Irene Adler. Todas las emociones, y esa en particular, eran abominables para su mente fría, precisa pero admirablemente equilibrada. Él era, supongo, la máquina de razonamiento y observación más perfecta que el mundo haya visto, pero como amante se habría colocado en una posición falsa. Nunca habló de las pasiones más suaves, excepto con una burla y una mueca. Eran cosas admirables para el observador, excelentes para descorrer el velo de los motivos y acciones de los hombres. Pero para el razonador entrenado admitir tales intrusiones en su propio temperamento delicado y finamente ajustado era introducir un factor de distracción que podría arrojar dudas sobre todos sus resultados mentales. Arena en un instrumento sensible, o una grieta en uno de sus propios lentes de alta potencia, no sería más perturbador que una fuerte emoción en una naturaleza como la suya. Y, sin embargo, solo había una mujer para él, y esa mujer era la difunta Irene Adler, de dudosa y cuestionable memoria. Últimamente había visto poco a Holmes. Mi matrimonio nos había alejado el uno del otro. Mi propia felicidad completa y los intereses centrados en el hogar que surgen en torno al hombre que primero se encuentra dueño de su propio establecimiento, fueron suficientes para absorber toda mi atención, mientras que Holmes, que detestaba toda forma de sociedad con toda su alma bohemia, Permaneció en nuestro alojamiento de Baker Street, sepultado entre sus viejos libros, y alternando semana tras semana entre la cocaína y la ambición, el sopor de la droga y la feroz energía de su propia naturaleza aguda. Todavía estaba, como siempre, profundamente atraído por el estudio del crimen, y ocupó sus inmensas facultades y extraordinarios poderes de observación en seguir esas pistas y aclarar aquellos misterios que habían sido abandonados como sin esperanza por la policía oficial. De vez en cuando escuché algún vago relato de sus actos: de su citación a Odessa en el caso del asesinato de Trepoff, de cómo esclareció la singular tragedia de los hermanos Atkinson en Trincomalee y, finalmente, de la misión que había cumplido. con tanta delicadeza y éxito para la familia reinante de Holanda. Sin embargo, más allá de estos signos de su actividad, que simplemente compartí con todos los lectores de la prensa diaria, sabía poco de mi antiguo amigo y compañero. Una noche, era el veinte de marzo de 1888, regresaba de un viaje a un paciente (porque ahora había regresado a la práctica civil), cuando mi camino me llevó a través de Baker Street. Cuando pasé por la bien recordada puerta, que siempre debe estar asociada en mi mente con mi cortejo y con los oscuros incidentes del Estudio en escarlata, se apoderó de mí un vivo deseo de volver a ver a Holmes y saber cómo estaba. empleando sus extraordinarios poderes. Sus habitaciones estaban brillantemente iluminadas e, incluso mientras miraba hacia arriba, vi su figura alta y delgada pasar dos veces en una silueta oscura contra la persiana. Se paseaba por la habitación con rapidez, con entusiasmo, con la cabeza hundida en el pecho y las manos entrelazadas detrás de él. Para mí, que conocía cada uno de sus estados de ánimo y hábitos, su actitud y modales contaban su propia historia. Estaba en el trabajo de nuevo. Había salido de sus sueños creados por las drogas y estaba entusiasmado con el olor de algún nuevo problema. Llamé al timbre y me condujeron a la habitación que antes había sido en parte mía. Su actitud no fue efusiva. Rara vez lo era; pero se alegró, creo, de verme. Sin apenas pronunciar palabra, pero con una mirada amable, me indicó un sillón, arrojó su caja de puros e indicó una caja de alcohol y un gasógeno en la esquina. Luego se paró frente al fuego y me miró con su singular estilo introspectivo. “El matrimonio te sienta bien”, comentó. “Creo, Watson, que ha engordado siete libras y media desde que lo vi”. “¡Siete!” Respondí. De hecho, debería haberlo pensado un poco más. Sólo un poco más, me imagino, Watson. Y en la práctica otra vez, observo. No me dijo que tenía la intención de ponerse los arneses. “Entonces, ¿cómo lo sabes?” “Lo veo, lo deduzco. ¿Cómo sé que últimamente te has estado mojando mucho y que tienes una sirvienta de lo más torpe y descuidada?” -Mi querido Holmes -dije-, esto es demasiado. Seguro que te habrías quemado si hubieras vivido hace unos siglos. Es cierto que el jueves di un paseo por el campo y volví a casa hecho un lío terrible, pero como me he cambiado de ropa, no puedo imaginar cómo lo deduces. En cuanto a Mary Jane, es incorregible, y mi esposa le ha dado aviso, pero ahí, de nuevo, no veo cómo lo resuelves. Se rió para sí mismo y se frotó las manos largas y nerviosas. “Es la simplicidad misma”, dijo él; mis ojos me dicen que en la parte interior de su zapato izquierdo, justo donde la luz del fuego lo incide, el cuero está marcado por seis cortes casi paralelos. Para quitarle el barro incrustado. De ahí mi doble deducción de que usted había estado afuera en un clima horrible y que tenía un espécimen particularmente maligno de la esclavitud londinense, que cortabotas. En cuanto a su práctica, si un caballero camina en mis habitaciones oliendo a yodoformo, con una marca negra de nitrato de plata en el dedo índice derecho y un bulto en el lado derecho de su sombrero de copa para mostrar dónde ha escondido su estetoscopio, debo ser aburrido, de hecho, si quiero no lo pronuncien como un miembro activo de la profesión médica”. No pude evitar reírme de la facilidad con la que explicaba su proceso de deducción. “Cuando te oigo dar tus razones”, le comenté, “la cosa siempre me parece tan ridículamente simple que yo mismo podría hacerlo fácilmente, aunque en cada instancia sucesiva de tu razonamiento estoy desconcertado hasta que explicas tu proceso. Y, sin embargo, creo que mis ojos son tan buenos como los tuyos”. —Así es —respondió, encendiendo un cigarrillo y dejándose caer en un sillón—. Ves, pero no observas. La distinción es clara. Por ejemplo, has visto con frecuencia los escalones que suben desde el vestíbulo hasta esta habitación. “Frecuentemente.” “¿Con qué frecuencia?” “Bueno, algunos cientos de veces.” “Entonces, ¿cuántos hay?” “¿Cuántos? No lo sé”. “¡Así es! No has observado. Y, sin embargo, has visto. Ese es exactamente mi punto. Ahora, sé que hay diecisiete pasos, porque he visto y observado. Por cierto, ya que estás interesado en estos pequeños problemas, y dado que eres lo suficientemente bueno como para relatar una o dos de mis insignificantes experiencias, puede que te interese esto”. Arrojó una hoja de papel grueso, teñido de rosa, que había estado abierta sobre la mesa. “Llegó con el último correo”, dijo. “Léelo en voz alta.” La nota no tenía fecha ni firma ni dirección. —Te visitará esta noche, a las ocho menos cuarto —dijo—, un caballero que desea consultarte sobre un asunto de suma importancia. Tus recientes servicios a una de las casas reales de “Europa ha demostrado que es alguien a quien se le puede confiar con seguridad asuntos que son de una importancia que difícilmente puede exagerarse. Este relato suyo lo hemos recibido de todas partes. Esté en su cámara entonces a esa hora, y no lo tome. mal si su visitante usa una máscara”. “Esto es realmente un misterio”, comenté. “¿Qué te imaginas que ¿significa?” “Todavía no tengo datos. Es un error capital teorizar antes de tener datos. Insensiblemente, uno comienza a torcer los hechos para adaptarlos a las teorías, en lugar de teorías para adaptarlos a los hechos. Pero la nota en sí. ¿Qué deduce de ella?” Examiné cuidadosamente la escritura y el papel en el que estaba escrito. “El hombre que lo escribió presumiblemente estaba bien”, comenté, esforzándome por imitar los procesos de mi compañero. Ese papel no se podía comprar por menos de media corona el paquete. Es peculiarmente fuerte y rígido. “Curioso, esa es la palabra misma”, dijo Holmes. No es un periódico inglés en absoluto. Sostenlo a contraluz. Lo hice y vi una “E” grande con una “g” pequeña, una “P” y una “G” grande con una “t” pequeña entretejidas en la textura del papel. “¿Qué piensas de eso?” preguntó Holmes. “El nombre del fabricante, sin duda; o su monograma, más bien”. “Para nada. La ‘G’ con la ‘t’ minúscula significa ‘Gesellschaft’, que en alemán significa ‘Compañía’. Es una contracción habitual como nuestro ‘Co.’ ‘P’, por supuesto, significa ‘Papier’. Ahora para el ‘Ej.’ Echemos un vistazo a nuestro diccionario geográfico continental”. Sacó un pesado volumen marrón de sus estantes. “Eglow, Eglonitz–aquí estamos, Egria. Está en un país de habla alemana–en Bohemia, no lejos de Carlsbad. ‘Notable por ser el escenario de la muerte de Wallenstein, y por sus numerosas fábricas de vidrio y fábricas de papel.’ Ja, ja, muchacho, ¿qué piensas de eso? Sus ojos brillaron y envió una gran nube azul triunfante de su cigarrillo. “El papel fue hecho en Bohemia”, le dije. “Precisamente. Y el hombre que escribió la nota es un alemán. ¿Observa la peculiar construcción de la oración: ‘Este relato suyo lo hemos recibido de todas partes’”. Un francés o un ruso no podrían haber escrito eso. Es el alemán el que es tan descortés con sus verbos. Solo queda, por lo tanto, descubrir qué quiere este alemán que escribe en papel bohemio y prefiere llevar una máscara a mostrar la cara. Y aquí viene, si no me equivoco, para resolver todas nuestras dudas”. Mientras hablaba, se oyó el sonido agudo de los cascos de los caballos y el chirrido de las ruedas contra el bordillo, seguido de un fuerte golpe en la campana. Holmes silbó. “Un par, por el sonido”, dijo. “Sí”, continuó, mirando por la ventana. Una bonita berlina pequeña y un par de bellezas. Ciento cincuenta guineas cada una. Hay dinero en este caso, Watson, si no hay nada más. “Creo que será mejor que me vaya, Holmes”. “Ni un poco, doctor. Quédese donde está. Estoy perdido sin mi Boswell. Y esto promete ser interesante. Sería una pena perdérselo”. “Pero su cliente–” “No le haga caso. Puedo necesitar su ayuda, y él también. Aquí viene. Siéntese en ese sillón, doctor, y bríndenos su mejor atención”. Un paso lento y pesado, que se había oído en las escaleras y en el pasillo, se detuvo inmediatamente frente a la puerta. Luego hubo un golpe fuerte y autoritario. “¡Adelante!” dijo Holmes. Entró un hombre que apenas podía medir menos de seis pies y seis pulgadas de altura, con el pecho y las extremidades de un Hércules. Su vestido era rico con una ostentación que, en Inglaterra, se consideraría de mal gusto. Pesadas tiras de astracán estaban acuchilladas a lo largo de las mangas y la parte delantera de su abrigo cruzado, mientras que la capa azul oscuro que le echaban sobre los hombros estaba forrada con seda color fuego y asegurada en el cuello con un broche que consistía en un único broche en llamas. berilo. Las botas que le llegaban hasta la mitad de las pantorrillas y que estaban adornadas en la parte superior con un rico pelaje marrón, completaban la impresión de opulencia bárbara que sugería toda su apariencia. Llevaba un sombrero de ala ancha en la mano, mientras que en la parte superior de la cara, que se extendía hasta más allá de los pómulos, llevaba una máscara de vizard negra, que aparentemente se había ajustado en ese mismo momento, ya que todavía tenía la mano levantada. como él entró. Por la parte inferior de la cara parecía un hombre de carácter fuerte, con un labio grueso y caído, y un mentón largo y recto que sugería una resolución llevada al extremo de la obstinación. “¿Tenías mi nota?” preguntó con una voz profunda y áspera y un marcado acento alemán. “Te dije que te llamaría”. Miró de uno a otro de nosotros, como si no supiera a quién dirigirse. “Por favor, tome asiento”, dijo Holmes. “Este es mi amigo y colega, el Dr. Watson, quien ocasionalmente es lo suficientemente bueno para ayudarme en mis casos. ¿A quién tengo el honor de dirigirme?” “Puede dirigirse a mí como el Conde Von Kramm, un noble bohemio. Entiendo que este caballero, su amigo, es un hombre de honor y discreción, a quien puedo confiar un asunto de la más extrema importancia. Si no, debería Prefiero comunicarme contigo a solas. Me levanté para irme, pero Holmes me agarró por la muñeca y me empujó hacia atrás en mi silla. “Es ambas cosas, o ninguna”, dijo. “Puedes decir ante este caballero cualquier cosa que me digas a mí”. El conde encogió sus anchos hombros. “Entonces debo comenzar”, dijo, “obligándolos a ambos a un secreto absoluto durante dos años; al final de ese tiempo, el asunto no tendrá importancia. Por el momento, no está de más decir que es de tanta importancia”. peso puede tener una influencia sobre la historia europea”. “Lo prometo”, dijo Holmes. “Y yo.” “Disculpen esta máscara”, continuó nuestro extraño visitante. “La augusta persona que me emplea desea que su agente sea desconocido para usted, y puedo confesar de inmediato que el título con el que acabo de llamarme no es exactamente el mío”. “Yo era consciente de ello”, dijo Holmes secamente. “Las circunstancias son muy delicadas y se deben tomar todas las precauciones para apagar lo que podría convertirse en un escándalo inmenso y comprometer seriamente a una de las familias reinantes de Europa. Hablando claro, el asunto involucra a la gran Casa de Ormstein, hereditaria reyes de Bohemia”. “Yo también era consciente de eso”, murmuró Holmes, acomodándose en su sillón y cerrando los ojos. Nuestro visitante miró con aparente sorpresa la figura lánguida y holgazana del hombre que sin duda se le había presentado como el razonador más incisivo y el agente más enérgico de Europa. Holmes volvió a abrir lentamente los ojos y miró con impaciencia a su gigantesco cliente. “Si Su Majestad se dignara exponer su caso”, comentó, “podría aconsejarle mejor”. El hombre saltó de su silla y caminó de un lado a otro de la habitación con una agitación incontrolable. Luego, con un gesto de desesperación, se arrancó la máscara de la cara y la arrojó al suelo. “Tienes razón”, exclamó; “Soy el Rey. ¿Por qué debería intentar ocultarlo?” “¿Por qué de hecho?” murmuró Holmes. “Su majestad no había hablado antes de que supiera que me estaba dirigiendo a Wilhelm Gottsreich Sigismond von Ormstein, gran duque de Cassel-Felstein y rey ​​hereditario de Bohemia”. “Pero usted puede comprender”, dijo nuestro extraño visitante, sentándose una vez más y pasándose la mano por su frente alta y blanca, “puede comprender que no estoy acostumbrado a hacer tales negocios en mi propia persona. Sin embargo, el asunto era tan delicado que no podía confiarlo a un agente sin ponerme en su poder. He venido de incógnito desde Praga con el fin de consultarle. “Entonces, consulte por favor”, dijo Holmes, cerrando los ojos una vez más. “Los hechos son brevemente estos: Hace unos cinco años, durante una larga visita a Varsovia, conocí a la conocida aventurera, Irene Adler. El nombre sin duda le resultará familiar”. —Por favor, búsquela en mi índice, doctor —murmuró Holmes sin abrir los ojos. Durante muchos años había adoptado un sistema de archivar todos los párrafos relacionados con hombres y cosas, de modo que era difícil nombrar un tema o una persona sobre la que no pudiera proporcionar información de inmediato. En este caso encontré su biografía intercalada entre la de un rabino hebreo y la de un comandante de estado mayor que había escrito una monografía sobre los peces de aguas profundas. “¡Déjeme ver!” dijo Holmes. “¡Hum! Nací en Nueva Jersey en el año 1858. Contralto, ¡hum! La Scala, hum! , según tengo entendido, se enredó con esta joven, le escribió algunas cartas comprometedoras y ahora está deseoso de recuperar esas cartas”. “Precisamente así. Pero cómo–” “¿Hubo un matrimonio secreto?” “Ninguna.” “¿Sin documentos legales o certificados?” “Ninguna.” “Entonces no sigo a Su Majestad. Si esta joven debe mostrar sus cartas para chantajear u otros propósitos, ¿cómo va a probar su autenticidad?” “Ahí está la escritura”. “¡Pooh, pooh! Falsificación”. “Mi papel de notas privado”. “Robado.” “Mi propio sello”. “Imitado”. “Mi fotografía”. “Comprado.” “Ambos estábamos en la fotografía”. “¡Oh, querido! ¡Eso es muy malo! Su Majestad ciertamente ha cometido una indiscreción”. Estaba loco… loco. “Te has comprometido seriamente”. “Solo era el príncipe heredero entonces. Era joven. Solo tengo treinta ahora”. “Hay que recuperarlo”. “Lo hemos intentado y hemos fallado”. “Su Majestad debe pagar. Debe ser comprado”. “Ella no venderá”. “Robado, entonces.” “Se han hecho cinco intentos. Dos veces, ladrones a mi sueldo saquearon su casa. Una vez desviamos su equipaje cuando viajaba. Dos veces la asaltaron. No hubo resultado”. “¿No hay rastro de ello?” “Absolutamente ninguno”. Holmes se rió. “Es un problema bastante pequeño”, dijo. -Pero uno muy serio para mí -replicó el rey con reproche-. “Mucho, de hecho. ¿Y qué se propone hacer con la fotografía?” “Para arruinarme”. “¿Pero cómo?” “Estoy a punto de casarme”. “Eso he oído”. “A Clotilde Lothman von Saxe-Meningen, segunda hija del rey de Escandinavia. Puede que conozcas los estrictos principios de su familia. Ella misma es el alma misma de la delicadeza. Una sombra de duda sobre mi conducta llevaría el asunto a un final.” “¿E Irene Adler?” “Amenaza con enviarles la fotografía. Y lo hará. Sé que lo hará. No la conoces, pero tiene un alma de acero. Tiene el rostro de la más bella de las mujeres, y la mente del más resuelto de los hombres. En lugar de casarme con otra mujer, no hay extremos a los que ella no iría, ninguno”. “¿Estás seguro de que ella no lo ha enviado todavía?” “Estoy seguro.” “¿Y por qué?” “Porque ella ha dicho que lo enviaría el día en que se proclamen públicamente los esponsales. Eso será el próximo lunes”. “Oh, entonces todavía tenemos tres días”, dijo Holmes con un bostezo. “Eso es muy afortunado, ya que tengo uno o dos asuntos de importancia que investigar en este momento. Su Majestad, por supuesto, ¿se quedará en Londres por el momento?” “Ciertamente. Me encontrarán en el Langham bajo el nombre del Conde Von Kramm”. “Entonces le enviaré una línea para informarle cómo progresamos”. Por favor, hazlo. Seré todo ansiedad. “Entonces, ¿en cuanto al dinero?” “Tienes carta blanca”. “¿Absolutamente?” Te digo que daría una de las provincias de mi reino por tener esa fotografía. “¿Y para los gastos presentes?” El rey sacó una pesada bolsa de cuero de gamuza de debajo de su capa y la colocó sobre la mesa. “Hay trescientas libras en oro y setecientas en billetes”, dijo. Holmes escribió un recibo en una hoja de su cuaderno y se lo entregó. —¿Y la dirección de mademoiselle? preguntó. “Es Briony Lodge, Serpentine Avenue, St. John’s Wood”. Holmes tomó nota de ello. “Otra pregunta”, dijo. “¿Era la fotografía un gabinete?” “Fue.” “Entonces, buenas noches, Su Majestad, y confío en que pronto tendremos buenas noticias para usted. Y buenas noches, Watson”, agregó, mientras las ruedas de la berlina real rodaban por la calle. Si tiene la amabilidad de llamar mañana por la tarde a las tres, me gustaría hablar con usted de este pequeño asunto. II. A las tres en punto yo estaba en Baker Street, pero Holmes aún no había regresado. La casera me informó que había salido de la casa poco después de las ocho de la mañana. Me senté junto al fuego, sin embargo, con la intención de esperarlo, por mucho tiempo que fuera. Ya estaba profundamente interesado en su investigación, porque, aunque no estaba rodeada por ninguno de los rasgos sombríos y extraños que estaban asociados con los dos crímenes que ya he registrado, aún así, la naturaleza del caso y la posición exaltada de su cliente le dio un carácter propio. De hecho, aparte de la naturaleza de la investigación que mi amigo tenía entre manos, había algo en su dominio magistral de una situación y su razonamiento agudo e incisivo que hacía que fuera un placer para mí estudiar su sistema de trabajo y sigue los métodos rápidos y sutiles por los cuales desenredó los misterios más inextricables. Tan acostumbrado estaba yo a su éxito invariable que la posibilidad misma de su fracaso había dejado de entrar en mi cabeza. Eran cerca de las cuatro cuando se abrió la puerta y entró en la habitación un mozo de cuadra con aspecto de borracho, desaliñado y patilludo, con el rostro inflamado y ropa de mala reputación. Acostumbrado como estaba a los asombrosos poderes de mi amigo en el uso de disfraces, tuve que mirar tres veces antes de estar seguro de que era él. Asintiendo, desapareció en el dormitorio, de donde salió en cinco minutos vestido con traje de tweed y respetable, como antaño. Metiendo las manos en los bolsillos, estiró las piernas frente al fuego y se rió a carcajadas durante unos minutos. “¡Bien realmente!” —gritó, y luego se atragantó y volvió a reír hasta que se vio obligado a recostarse, fláccido e indefenso, en la silla. “¿Qué es?” “Es demasiado divertido. Estoy seguro de que nunca podrías adivinar cómo empleé mi mañana, o qué terminé haciendo”. —No puedo imaginarlo. Supongo que ha estado observando los hábitos, y tal vez la casa, de la señorita Irene Adler. “Así es, pero la secuela fue bastante inusual. Sin embargo, te lo diré. Salí de la casa poco después de las ocho de la mañana con el carácter de un mozo de cuadra sin trabajo. Hay una maravillosa simpatía y francmasonería entre los caballos”. hombres. Sé uno de ellos, y sabrás todo lo que hay que saber. Pronto encontré Briony Lodge. Es una villa bijou, con un jardín en la parte trasera, pero construida en el frente hasta la carretera, de dos pisos. Chubb cerrojo a la puerta. Gran salón en el lado derecho, bien amueblado, con ventanas largas casi hasta el suelo, y esos ridículos cierres ingleses de ventana que un niño podría abrir. Detrás no había nada notable, excepto que la ventana del pasillo se podía llegar desde lo alto de la cochera, la rodeé y la examiné de cerca desde todos los puntos de vista, pero sin notar nada más de interés. “Luego holgazaneé por la calle y descubrí, como esperaba, que había un establo en un callejón que discurría junto a una pared del jardín. Eché una mano a los mozos de cuadra para cebar sus caballos y recibí a cambio dos peniques, un vaso de mitad y mitad, dos copas de tabaco de mascar y toda la información que pudiera desear sobre la señorita Adler, por no hablar de media docena de otras personas del vecindario que no me interesaban en lo más mínimo, pero cuyas biografías Me vi obligado a escuchar”. “¿Y qué hay de Irene Adler?” Yo pregunté. “Oh, ella ha bajado la cabeza de todos los hombres en esa parte. Ella es la cosa más delicada debajo de un sombrero en este planeta. Eso dice Serpentine-maullidos, a un hombre. Vive tranquilamente, canta en conciertos, conduce a las cinco todos los días, y regresa a las siete en punto para la cena. Rara vez sale a otras horas, excepto cuando ella canta. Solo tiene un visitante masculino, pero mucho de él. Es moreno, guapo y apuesto, nunca llama menos de una vez. un día, y a menudo dos veces. Es el señor Godfrey Norton, del Inner Temple. Vea las ventajas de un cochero como confidente. Lo habían llevado a casa una docena de veces desde Serpentine-mews, y sabían todo sobre él. Había escuchado todo lo que tenían que decir, comencé a caminar de un lado a otro cerca de Briony Lodge una vez más y a pensar en mi plan de campaña. “Evidentemente, este Godfrey Norton era un factor importante en el asunto. Era abogado. Eso sonaba siniestro. ¿Cuál era la relación entre ellos y cuál era el objeto de sus repetidas visitas? ¿Era ella su cliente, su amiga o su amante? Si era lo primero, probablemente ella había transferido la fotografía a su cuidado. Si era lo último, era menos probable. El resultado de esta pregunta dependía de si debía continuar mi trabajo en Briony Lodge o centrar mi atención en las habitaciones de los caballeros en el Temple. Era un punto delicado, y amplió el campo de mi investigación. Me temo que te aburrí con estos detalles, pero tengo que dejarte ver mis pequeñas dificultades, si quieres entender la situación. “Te sigo de cerca”, respondí. “Todavía estaba sopesando el asunto en mi mente cuando un cabriolé se acercó a Briony Lodge, y un caballero saltó de él. Era un hombre notablemente guapo, moreno, aguileño y con bigote, evidentemente el hombre del que había oído hablar. Parecía tener mucha prisa, le gritó al cochero que esperara y pasó rozando a la criada que abrió la puerta con el aire de un hombre que está completamente en casa. “Estuvo en la casa alrededor de media hora, y pude vislumbrarlo en las ventanas de la sala de estar, paseándose de un lado a otro, hablando con entusiasmo y agitando los brazos. De ella no pude ver nada. Enseguida salió , luciendo aún más agitado que antes. Mientras se acercaba al taxi, sacó un reloj de oro de su bolsillo y lo miró con seriedad, ‘Conduce como el diablo’, gritó, ‘primero a Gross & Hankey’s en Regent Street, y luego a la iglesia de Santa Mónica en Edgeware Road ¡Media guinea si lo haces en veinte minutos! Se fueron, y me preguntaba si no haría bien en seguirlos cuando por el camino llegó un pequeño y pulcro landó, el cochero con la chaqueta abotonada a medias y la corbata debajo de la oreja, mientras todas las etiquetas de su arnés sobresalían de las hebillas. No se había levantado antes de que ella saliera disparada por la puerta del pasillo y entrara en él. Solo pude verla brevemente en ese momento, pero era una mujer encantadora, con una cara que un hombre podría morir por. “’La iglesia de Santa Mónica, John’, exclamó, ‘y medio soberano si llegas en veinte minutos’. “Esto era demasiado bueno para perderlo, Watson. Estaba sopesando si debería correr por él o si debería sentarme detrás de su landó cuando un taxi pasó por la calle. El conductor miró dos veces a una tarifa tan mala, pero yo intervino antes de que pudiera objetar. —La iglesia de Santa Mónica —dije— y medio soberano si llegas en veinte minutos. Faltaban veinticinco minutos para las doce y, por supuesto, estaba bastante claro lo que había en el viento. “Mi taxi manejaba rápido. No creo que yo haya manejado nunca más rápido, pero los otros estaban allí antes que nosotros. El taxi y el landó con sus caballos humeantes estaban frente a la puerta cuando llegué. Le pagué al hombre y me apresuré a entrar”. la iglesia. No había nadie allí excepto los dos a los que había seguido y un clérigo con sobrepelliz, que parecía estar discutiendo con ellos. Estaban los tres de pie en un nudo frente al altar. Yo holgazaneé por el pasillo lateral como cualquier otro holgazán que ha caído en una iglesia.De repente, para mi sorpresa, los tres en el altar se volvieron hacia mí, y Godfrey Norton vino corriendo tan rápido como pudo hacia mí. “‘Gracias a Dios’, exclamó. ‘Lo harás. ¡Ven! ¡Ven!’ ”‘¿Entonces que?’ Yo pregunté. “’Vamos, hombre, vamos, sólo tres minutos, o no será legal’. “Fui medio arrastrado hasta el altar, y antes de que supiera dónde estaba, me encontré murmurando respuestas que me susurraban al oído, respondiendo por cosas de las que no sabía nada y, en general, ayudando a atar de forma segura a Irene. Adler, solterona, a Godfrey Norton, soltero. Todo se hizo en un instante, y allí estaba el caballero agradeciéndome por un lado y la dama por el otro, mientras el clérigo me sonreía al frente. Fue de lo más absurdo. en la posición en la que me encontré en mi vida, y fue pensar en eso lo que me hizo reír hace un momento. Parece que había habido alguna informalidad sobre su licencia, que el clérigo se negó rotundamente a casarlos sin un testigo de algún y que mi afortunada apariencia salvó al novio de tener que salir a la calle en busca de un padrino. La novia me dio un soberano, y pienso llevarlo en la cadena de mi reloj en recuerdo de la ocasión. “Este es un giro muy inesperado de las cosas”, dije yo; “y qué ¿entonces?” “Bueno, encontré mis planes muy seriamente amenazados. Parecía que la pareja podría emprender una partida inmediata, por lo que necesitaban medidas muy rápidas y enérgicas de mi parte. En la puerta de la iglesia, sin embargo, se separaron, él condujo de regreso a la Temple, y ella a su propia casa. “Saldré al parque a las cinco, como de costumbre”, dijo mientras lo dejaba. No escuché más. Se alejaron en diferentes direcciones, y yo me fui a hacer mi propia preparativos.” “¿Cuáles son?” “Un poco de carne fría y un vaso de cerveza”, respondió, tocando el timbre. He estado demasiado ocupado para pensar en la comida, y es probable que esta noche esté aún más ocupado. Por cierto, doctor, necesito su cooperación. Estaré encantado. “¿No te importa infringir la ley?” “De ninguna manera.” —¿Ni corres el riesgo de que te arresten? “No por una buena causa”. “¡Oh, la causa es excelente!” “Entonces soy tu hombre”. Estaba seguro de que podía confiar en ti. “¿Pero qué es lo que deseas?” “Cuando la Sra. Turner haya traído la bandeja, se lo dejaré claro. Ahora”, dijo mientras se volvía hambriento hacia la comida sencilla que nuestra casera le había proporcionado, “debo discutirlo mientras como, porque no lo he hecho”. mucho tiempo. Son casi las cinco ahora. En dos horas debemos estar en la escena de la acción. La señorita Irene, o Madame, más bien, regresa de su viaje a las siete. Debemos estar en Briony Lodge para encontrarnos con ella. “¿Y luego que?” “Debes dejarme eso a mí. Ya he arreglado lo que va a ocurrir. Solo hay un punto en el que debo insistir. No debes interferir, pase lo que pase. ¿Entiendes?” “¿Debo ser neutral?” “No hacer nada en absoluto. Probablemente habrá algún pequeño disgusto. No te unas a él. Terminará cuando me lleven a la casa. Cuatro o cinco minutos después se abrirá la ventana de la sala de estar. Debes apostarte cerca a esa ventana abierta”. “Sí.” “Debes vigilarme, porque seré visible para ti”. “Sí.” Y cuando yo levante mi mano, entonces, arrojarás a la habitación lo que te dé para arrojar y, al mismo tiempo, lanzarás el grito de fuego. ¿Me sigues por completo? “Enteramente.” “No es nada formidable”, dijo, sacando un rollo largo en forma de cigarro de su bolsillo. “Es un cohete de humo de fontanero común, equipado con una tapa en cada extremo para que se encienda solo. Su tarea se limita a eso. Cuando lance su grito de fuego, será tomado por un buen número de personas . Entonces puede caminar hasta el final de la calle, y me reuniré con usted en diez minutos. Espero haberme dejado claro”. “Debo permanecer neutral, acercarme a la ventana, observarte y, a la señal, arrojar este objeto, luego dar el grito de fuego y esperarte en la esquina de la calle”. “Precisamente.” “Entonces puedes confiar completamente en mí”. “Eso es excelente. Creo que, tal vez, es casi el momento de prepararme para el nuevo papel que tengo que desempeñar”. Desapareció en su dormitorio y regresó a los pocos minutos con el carácter de un clérigo inconformista amable y sencillo. Su ancho sombrero negro, sus pantalones anchos, su corbata blanca, su sonrisa comprensiva y su mirada general de curiosidad benevolente y escrutadora eran algo que solo el Sr. John Hare podría haber igualado. No fue simplemente que Holmes cambió su traje. Su expresión, sus modales, su misma alma parecían variar con cada nueva parte que asumía. El teatro perdió a un buen actor, así como la ciencia perdió a un agudo razonador, cuando se convirtió en un especialista en crimen. Eran las seis y cuarto cuando salimos de Baker Street, y todavía faltaban diez minutos para la hora cuando nos encontramos en Serpentine Avenue. Ya estaba anocheciendo, y las lámparas estaban siendo encendidas mientras caminábamos de un lado a otro frente a Briony Lodge, esperando la llegada de su ocupante. La casa era tal como me la había imaginado a partir de la sucinta descripción de Sherlock Holmes, pero el lugar parecía menos privado de lo que esperaba. Por el contrario, para ser una calle pequeña en un barrio tranquilo, estaba notablemente animada. Había un grupo de hombres mal vestidos fumando y riendo en un rincón, un molinillo de tijera con su rueda, dos guardias que coqueteaban con una niñera y varios jóvenes bien vestidos que holgazaneaban arriba y abajo con cigarros en sus bocas —Verá —observó Holmes, mientras caminábamos de un lado a otro frente a la casa—, este matrimonio simplifica bastante las cosas. La fotografía se convierte ahora en un arma de doble filo. por el Sr. Godfrey Norton, como es nuestro cliente a su llegada a los ojos de su princesa. Ahora la pregunta es, ¿Dónde vamos a encontrar la fotografía? “¿Dónde, de hecho?” “Es muy poco probable que lo lleve con ella. Es del tamaño de un armario. Demasiado grande para ocultarlo fácilmente en el vestido de una mujer. Sabe que el Rey es capaz de hacer que la asalten y la registren. Podemos considerar, entonces, que no lo lleva consigo. “¿Donde entonces?” “Su banquero o su abogado. Existe esa doble posibilidad. Pero me inclino a pensar que ninguna de las dos. Las mujeres son reservadas por naturaleza y les gusta hacer sus propios secretos. ¿Por qué debería entregárselos a alguien más? Podía confiar en sus propios tutela, pero no podía decir qué influencia indirecta o política podría ejercerse sobre un hombre de negocios. Además, recuerde que había decidido usarla dentro de unos días. Debe ser donde pueda poner sus manos sobre ella. debe estar en su propia casa”. “Pero ha sido robado dos veces”. “¡Pshaw! No sabían cómo mirar”. “¿Pero cómo te verás?” “No miraré”. “¿Entonces que?” “Haré que ella me muestre”. “Pero ella se negará”. “Ella no podrá. Pero escucho el retumbar de las ruedas. Es su carruaje. Ahora cumple mis órdenes al pie de la letra”. Mientras hablaba, el resplandor de las luces laterales de un carruaje apareció en la curva de la avenida. Era un pequeño y elegante landó el que traqueteaba hasta la puerta de Briony Lodge. Cuando se detuvo, uno de los holgazanes de la esquina se apresuró a abrir la puerta con la esperanza de ganar un centavo, pero otro holgazán lo apartó a codazos, que había subido corriendo con la misma intención. Estalló una feroz pelea, que fue aumentada por los dos guardias, que se pusieron del lado de uno de los ociosos, y por el afilador de tijeras, que estaba igualmente caliente del otro lado. Se dio un golpe, y en un instante la dama, que había bajado de su carruaje, era el centro de un pequeño grupo de hombres sonrojados y luchando, que se golpeaban salvajemente con los puños y palos. Holmes se precipitó entre la multitud para proteger a la dama; pero justo cuando la alcanzó, dio un grito y cayó al suelo, con la sangre corriendo libremente por su rostro. A su caída, los guardias echaron a correr en una dirección y los ociosos en la otra, mientras un número de personas mejor vestidas, que habían presenciado la refriega sin tomar parte en ella, se agolparon para ayudar a la dama y para atender a los demás. Hombre herido. Irene Adler, como todavía la llamaré, se había apresurado a subir los escalones; pero ella estaba de pie en la parte superior con su soberbia figura recortada contra las luces del salón, mirando hacia la calle. ¿Está muy herido el pobre caballero? ella preguntó. “Está muerto”, gritaron varias voces. “¡No, no, hay vida en él!” gritó otro. Pero se habrá ido antes de que puedas llevarlo al hospital. “Es un tipo valiente”, dijo una mujer. “Se habrían quedado con el bolso y el reloj de la dama si no hubiera sido por él. Eran una pandilla, y también ruda. Ah, ahora está respirando”. No puede estar tirado en la calle. ¿Podemos traerlo, marm? “Por supuesto. Llévenlo a la sala de estar. Hay un sofá cómodo. ¡Por aquí, por favor!” Lenta y solemnemente lo llevaron a Briony Lodge y lo acostaron en la sala principal, mientras yo seguía observando los procedimientos desde mi puesto junto a la ventana. Las lámparas estaban encendidas, pero las persianas no estaban corridas, de modo que pude ver a Holmes mientras yacía en el sofá. No sé si en ese momento se apoderó de él el escrúpulo por el papel que estaba representando, pero sé que nunca en mi vida me sentí más profundamente avergonzado de mí mismo que cuando vi a la hermosa criatura contra la que estaba conspirando, o al gracia y amabilidad con que atendió al hombre herido. Y, sin embargo, sería la más negra traición por parte de Holmes retirarse ahora del papel que me ha confiado a mí. Endurecí mi corazón y saqué el cohete de humo de debajo de mi abrigo. Después de todo, pensé, no la estamos lastimando. Sólo estamos impidiendo que ella hiera a otro. Holmes se había sentado en el sofá y lo vi moverse como un hombre que necesita aire. Una criada se apresuró y abrió la ventana. En el mismo instante lo vi levantar la mano ya la señal lancé mi cohete al interior de la habitación con un grito de “¡Fuego!” Tan pronto como la palabra salió de mi boca, toda la multitud de espectadores, bien vestidos y mal vestidos, caballeros, palafreneros y criadas, se unieron en un grito general de “¡Fuego!” Gruesas nubes de humo se arremolinaron a través de la habitación y salieron por la ventana abierta. Alcancé a ver figuras corriendo, y un momento después la voz de Holmes desde adentro asegurándoles que era una falsa alarma. Deslizándome entre la multitud que gritaba, me dirigí a la esquina de la calle, y en diez minutos me regocijé al encontrar el brazo de mi amigo en el mío y alejarme de la escena del alboroto. Caminó rápido y en silencio durante unos minutos hasta que doblamos por una de las tranquilas calles que conducen a Edgeware Road. “Lo hizo muy bien, doctor”, comentó. “Nada podría haber sido mejor. Está bien”. “¿Tienes la fotografía?” “Yo sé donde está.” “¿Y cómo te enteraste?” “Ella me mostró, como te dije que haría”. “Todavía estoy en la oscuridad”. “No quiero hacer un misterio”, dijo él, riendo. “El asunto era perfectamente simple. Usted, por supuesto, vio que todos en la calle eran cómplices. Todos estaban comprometidos para la noche”. “Lo supuse”. “Luego, cuando estalló la pelea, tenía un poco de pintura roja húmeda en la palma de mi mano. Corrí hacia adelante, me caí, me llevé la mano a la cara y me convertí en un espectáculo lamentable. Es un viejo truco”. “Eso también pude comprenderlo”. “Luego me llevaron adentro. Estaba obligada a tenerme adentro. ¿Qué más podía hacer? Y a su sala de estar, que era la misma habitación que yo sospechaba. Estaba entre eso y su dormitorio, y estaba decidido a mira cuál. Me acostaron en un sofá, hice señas para que tomara aire, se vieron obligados a abrir la ventana y tuviste tu oportunidad. “¿Cómo te ayudó eso?” “Era de suma importancia. Cuando una mujer piensa que su casa se está incendiando, su instinto es de inmediato correr hacia lo que más valora. Es un impulso perfectamente abrumador, y más de una vez lo he aprovechado. . En el caso del escándalo de la sustitución de Darlington me resultó útil, y también en el asunto del castillo de Arnsworth. Una mujer casada agarra a su bebé, una soltera alcanza su joyero. Ahora estaba claro para mí que nuestro La dama de hoy no tenía nada en la casa más precioso para ella que lo que estamos buscando. Se apresuraría a asegurarlo. La alarma de incendio estuvo admirablemente hecha. El humo y los gritos fueron suficientes para sacudir los nervios de acero. Ella respondió maravillosamente. La fotografía está en un hueco detrás de un panel deslizante, justo encima del tirador de campana derecho. Ella estuvo allí en un instante, y pude verla mientras la sacaba a medias. Cuando grité que era una falsa alarma, la reemplazó, miró el cohete, salió corriendo de la habitación y no la he visto pecar Ce. Me levanté y, excusándome, escapé de la casa. Dudé si intentar asegurar la fotografía de inmediato; pero el cochero había entrado y, como me observaba de cerca, me pareció más seguro esperar. Un poco de exceso de precipitación puede arruinarlo todo”. “¿Y ahora?” Yo pregunté. “Nuestra búsqueda está prácticamente terminada. Pasaré mañana con el rey y contigo, si quieres venir con nosotros. Nos harán pasar a la sala de estar para esperar a la dama, pero es probable que cuando cuando venga puede que no nos encuentre ni a nosotros ni a la fotografía. Quizá sea una satisfacción para Su Majestad recuperarla con sus propias manos. “¿Y cuándo llamarás?” “A las ocho de la mañana. Ella no se levantará, así que tendremos un campo despejado. Además, debemos ser puntuales, porque este matrimonio puede significar un cambio completo en su vida y hábitos. Debo telegrafiar al Rey sin demora.” Habíamos llegado a Baker Street y nos detuvimos en la puerta. Estaba buscando la llave en sus bolsillos cuando alguien que pasaba dijo: Buenas noches, señor Sherlock Holmes. Había varias personas en la acera en ese momento, pero el saludo parecía provenir de un joven delgado con un ulster que había pasado corriendo. “He escuchado esa voz antes”, dijo Holmes, mirando hacia la calle tenuemente iluminada. “Ahora, me pregunto quién diablos podría haber sido”. III. Dormí en Baker Street esa noche, y estábamos ocupados con nuestro café y tostadas por la mañana cuando el rey de Bohemia entró corriendo en la habitación. “¡Realmente lo tienes!” —gritó, agarrando a Sherlock Holmes por cualquiera de los hombros y mirándolo ansiosamente a la cara—. “Aún no.” “¿Pero tienes esperanzas?” “Tengo esperanzas”. “Entonces, ven. Estoy impaciente por irme”. “Necesitamos un taxi”. “No, mi berlina está esperando”. “Entonces eso simplificará las cosas”. Descendimos y partimos una vez más hacia Briony Lodge. “Irene Adler está casada”, comentó Holmes. “¡Casado! ¿Cuándo?” “Ayer.” “¿Pero a quién?” “A un abogado inglés llamado Norton”. Pero ella no podía amarlo. “Tengo la esperanza de que lo haga”. “¿Y por qué con esperanzas?” “Porque le ahorraría a Su Majestad todo temor de futuras molestias. Si la dama ama a su esposo, no ama a Su Majestad. Si no ama a Su Majestad, no hay razón por la que deba interferir con el plan de Su Majestad”. “Es cierto. Y sin embargo… ¡Bueno! ¡Ojalá hubiera sido de mi propia posición! ¡Qué reina habría sido!” Volvió a sumirse en un taciturno silencio, que no se rompió hasta que nos detuvimos en Serpentine Avenue. La puerta de Briony Lodge estaba abierta y una anciana estaba de pie en los escalones. Nos miró con ojos sardónicos mientras salíamos de la berlina. “Sr. Sherlock Holmes, ¿creo?” dijo ella. -Soy el señor Holmes -respondió mi acompañante, mirándola con una mirada inquisitiva y algo sobresaltada. “¡Ciertamente! Mi ama me dijo que era probable que llamaras. Se fue esta mañana con su esposo en el tren de las 5:15 desde Charing Cross hacia el continente”. “¡Qué!” Sherlock Holmes retrocedió tambaleándose, blanco de disgusto y sorpresa. “¿Quieres decir que se ha ido de Inglaterra?” “Nunca volver”. “¿Y los papeles?” preguntó el Rey con voz ronca. “Todo está perdido.” “Veremos.” Empujó al sirviente y entró corriendo en el salón, seguido por el rey y por mí. Los muebles estaban esparcidos por todas partes, con estantes desmantelados y cajones abiertos, como si la señora los hubiera saqueado apresuradamente antes de su vuelo. Holmes se apresuró a accionar el timbre, abrió una pequeña persiana corredera y, metiendo la mano, sacó una fotografía y una carta. La fotografía era de la propia Irene Adler en traje de noche, la carta estaba escrita como “Sherlock Holmes, Esq. Se dejará hasta que se llame”. Mi amigo lo abrió y los tres lo leímos juntos. Estaba fechado a la medianoche de la noche anterior y decía así: “MI QUERIDO SEÑOR SHERLOCK HOLMES: Realmente lo hizo muy bien. Me atrapó por completo. Hasta después de la alarma de incendio, no tenía ninguna sospecha. Pero luego, cuando descubrí cómo me había traicionado a mí mismo, me “Empecé a pensar. Me habían advertido contra usted hace meses. Me habían dicho que si el Rey contrataba a un agente, sin duda sería usted. Y me habían dado su dirección. Sin embargo, con todo esto, me hizo revelar lo que quería saber. Incluso después de que comencé a sospechar, me resultaba difícil pensar mal de un anciano clérigo tan querido y amable. Pero, ya sabes, he sido entrenada como actriz El vestuario masculino no es nada nuevo para mí. A menudo aprovecho la libertad que me da. Envié a John, el cochero, a vigilarte, subí corriendo las escaleras, me puse mi ropa de paseo, como yo la llamo, y vine. abajo justo cuando partiste. “Bueno, te seguí hasta tu puerta, y así me aseguré de que yo era realmente un objeto de interés para el célebre Sr. Sherlock Holmes. Luego, con bastante imprudencia, te deseé buenas noches y me dirigí al Templo para verte”. mi esposo. “Ambos pensamos que el mejor recurso era huir, cuando nos persigue un antagonista tan temible; así que encontrarás el nido vacío cuando llames mañana. En cuanto a la fotografía, tu cliente puede descansar en paz. Amo y soy amado por un hombre mejor que él. El rey puede hacer lo que quiera sin impedimento de alguien a quien ha agraviado cruelmente. Lo guardo solo para protegerme y para preservar un arma que siempre me protegerá de cualquier paso que pueda dar en el futuro. Dejo una fotografía que tal vez quiera poseer, y quedo, querido Sr. Sherlock Holmes, “Muy atentamente, “IRENE NORTON, de soltera ADLER”. ¡Qué mujer, oh, qué mujer! exclamó el rey de Bohemia, cuando los tres hubimos leído esta epístola. “¿No te dije lo rápida y resuelta que era? ¿No habría sido una reina admirable? ¿No es una pena que no estuviera a mi nivel?” —Por lo que he visto de la dama, parece estar en un nivel muy diferente al de Su Majestad —dijo Holmes con frialdad—. “Lamento no haber podido llevar el negocio de Su Majestad a una conclusión más exitosa”. “Al contrario, mi querido señor”, exclamó el Rey; “Nada podría tener más éxito. Sé que su palabra es inviolable. La fotografía ahora está tan segura como si estuviera en el fuego”. “Me alegra escuchar a Su Majestad decir eso”. Estoy inmensamente en deuda contigo. Por favor, dime de qué manera puedo recompensarte. Este anillo… —Se quitó un anillo de serpiente esmeralda de su dedo y lo sostuvo sobre la palma de su mano—. “Su Majestad tiene algo que debería valorar aún más”, dijo Holmes. “No tienes más que nombrarlo”. “¡Esta fotografía!” El Rey lo miró asombrado. “¡La fotografía de Irene!” gritó. “Ciertamente, si lo deseas”. “Le agradezco a Su Majestad. Entonces no hay más que hacer al respecto. Tengo el honor de desearle muy buenos días”. Hizo una reverencia y, dándose la vuelta sin observar la mano que el rey le había tendido, se dirigió en mi compañía a sus aposentos. Y así fue como un gran escándalo amenazó con afectar al reino de Bohemia, y como los mejores planes del señor Sherlock Holmes fueron derrotados por el ingenio de una mujer. Solía divertirse con la inteligencia de las mujeres, pero últimamente no lo he oído hacerlo. Y cuando habla de Irene Adler, o cuando se refiere a su fotografía, es siempre bajo el honroso título de la mujer."
});
index.addDoc({
    id: 12,
    title: "About the EBW – The Electric Book template",
    content: "Introduction Alternative tools At Electric Book Works, we’d been producing books with InDesign for years. InDesign is awesome, but it makes publishing simultaneously to print and digital formats a real pain. No matter how we set things up, we always ended up with separate master files: one for print, one for the ebook, and one for the website. And keeping those in sync over time was almost impossible. We needed a way to instantly create PDF (for high-end, professional book publishing), epub and website editions of a book from a single master source. We needed great version control and cloud backup. We wanted to be able to edit from anywhere, in a way that is easy for non-technical people to learn. And we didn’t want to be locked into proprietary tools, whose price or availability could change at any time. We needed to use open-source technologies to ensure our content was future-proof. And we didn’t want to develop code that others had already developed as open-source. We spent several years piecing together a solution, bit by bit. Eventually, we settled on a workflow that is simple and powerful: We store a book’s master files in plain text, formatted as markdown. We turn that plain text into clean HTML instantly (using Jekyll). We apply stylesheets to that HTML to generate beautiful web versions, ebooks and print PDFs instantly. Everything is stored securely with state-of-the-art version-control (using GitHub). Markdown is so simple that non-technical people can learn how to create and edit it in under an hour. They can even work directly on the master files online (on GitHub.com, Prose or our Electric Book Manager. Jekyll is great at generating clean HTML in flexible ways, and has a big, active development community. It also includes kramdown and Sass, which are critical to creating flexible book designs quickly. PrinceXML is the only software we use that isn’t open. While it’s proprietary, it’s an excellent implementation of the open standards for CSS Paged Media. In future, we hope to support other PDF renderers, too, such as: Antenna House, a proprietary, mature system PagedJS, an open Javascript-based approach for rendering pages with CSS Paged Media in the browser WeasyPrint, an open-source PDF engine in active development Vivliostyle, which is partly open-source PDFReactor, a proprietary PDF engine DocRaptor, a cloud-service implementation of PrinceXML. Alternative tools There are several digital-first book-publishing systems around. Some are also based on markdown, like ours. Not all produce print, ebook and web editions. For example: Quire Gitbook IO LeanPub (which uses Markua) PubPub MagicBook Bookdown Phil Schatz’s viewer. PressBooks is another superb, affordable service. It’s built on Wordpress, and takes a different approach technically. The Coko Foundation provides Editoria built with their new PubSweet framework. If you’re a large organisation, especially in scholarly publishing, or have in-house developers, it’s worth checking out."
});
index.addDoc({
    id: 13,
    title: "Technical overview – The Electric Book template",
    content: "Technical overview How it works Structure Files and folders to ignore To set up the workflow, you need some technical confidence. Once it’s set up, non-technical editorial team members with a couple of hours training (taught or self-taught) can add and edit books in it. The technical team members who run the workflow should be familiar with: HTML and CSS: the fundamental building blocks of almost all digital content. Markdown: a simple, plain-text shortcut for creating HTML. (The original Markdown syntax reference is the easiest intro to basic markdown. We use a more advanced markdown variant called kramdown. It lets us use attributes like classes, has a stricter syntax, and allows adding of IDs to elements. Sass: a syntax for writing complex CSS more efficiently. Git: software for tracking a team’s changes and syncing them with a remote server. We like to use GitHub. How it works The template is set up as a Jekyll project, with lots of predefined defaults. When you run npm run electric-book commands, Jekyll builds those snippets and your content into HTML pages. See ‘Structure’ below for detail on the template’s structure, and Jekyll’s docs on structure. In short: Content: Each book in your project has its own folder. You store your markdown content in a book’s folder, and images in its images/_source folder. Design: You define designs for your project in _sass/theme, and book-specific design features in a book’s styles folder. Metadata: You store project settings in _data/settings.yml, project info in _data/project.yml, and book metadata in _data/works. Structure A project folder (which you should track as a repository with Git) can contain one or more related books. Its folders and files follow the standard Jekyll structure. We store each book’s content in its own subfolder. In the template, the first book folder is simply called book. Here is an explanation of folders and files in the template. _app: template files for app output. You shouldn’t ever have to change these. _configs: a folder of configuration settings for different outputs. You’ll rarely have to change these, though you might occasionally need to customise outputs here. _data: a folder of data to use in your books (including project metadata). This folder includes important folders files, including: works: your books’ metadata in YAML files, locales.yml: phrases used in your publications, settings.yml: settings for your project. _docs: this documentation on how to use the template. _epub: template files for epub output. You shouldn’t ever have to change these, except to add font files to _epub/assets/fonts if you’re embedding fonts in epubs. _includes: HTML templates that Jekyll uses to build your books. You will rarely change anything here. You may need to add new templates here for custom book features. _layouts: templates that Jekyll uses to structure pages. You shouldn’t ever have to change these. _output: the folder where our output scripts will save your PDFs and epubs. _sass: a folder that stores the default styles for your books. You should only edit the files in _sass/theme. _site: where Jekyll and our output scripts will generate the web and app versions of your books. _tools: utilities required for output. For instance, colour profiles for PDFs and image conversions. You shouldn’t have to change these. You might add your own colour profiles to _tools/profiles for specialised projects. assets: a folder of Javascript, font files and images that your whole project might use. Here, the template includes: styles: a folder that contains project-wide stylesheets, mainly for use on project home pages. images: a folder that contains: cover.jpg: a front-cover image used as the default for the project as a whole. publisher-logo.jpg: a logo (which you’ll replace with your own) for the project and website as a whole. fonts: a place to store fonts that any book in a project might use. The template includes several open-licensed fonts here already. (You may also choose to store fonts in _epub/assets/fonts for epub output.) js: Javascript used in the template. Advanced users might add their own scripts here and manage which scripts are included on pages in bundle.js. See the ‘Using Javascript’ section for more detail. book: a folder for a book’s content, stored in markdown files. You might add more similarly structured folders for further books in your project. You’d duplicate and rename this folder for each book you add to your project. The book folder and its subfolders also contain some important files and folders: index.md: a landing page for the book. You can leave this file as is. If you create a new book, you should copy this file as is into the same place in the new book’s folder. package.opf: on epub output, Jekyll fills out this file and it’s built into the epub. If you create a new book, you should copy this file as is into the same place in the new book’s folder. Do not edit it. toc.ncx: a navigation file for backwards-compatibility in older ereaders. You only need this file in a book if that backwards-compatibility is important to you. Do not edit it. images: this is where you store images for a book. See the ‘Adding image files’ section for more detail. styles: contains the stylesheets for designing your book’s various outputs. See the ‘Design’ section for more detail. index.md: a landing page for your book. Jekyll will build this to contain the book’s cover image, and clicking it will open the book’s start page, which you define in the book’s YAML file in _data/works. samples: a sample book for demo and testing purposes. You can safely delete it (if you do, you can also remove _data/works/samples). _config.yml: a file for setting configuration options for Jekyll, which will compile your book for output. _prose.yml: configuration settings for using prose.io for online book editing (generally, you won’t have to edit this file) and for excluding files from view in the Electric Book Manager. gulpfile.js: this file controls many of the processes that optimise images and HTML for various book outputs. Most users should never edit this file. Advanced users may choose to adjust or extend it. index.md: the home page of your project when served as a website. search.md: the search page of your project when served as a website. README.md: the starting place for your collaborators. Edit the template’s text to suit your project. It should tell them how to use the project. Files and folders to ignore You should keep the following files and folders, but you can largely ignore them. .sass-cache: after your first output, Jekyll creates this folder to make styles build faster next time. You can ignore it. If you delete it, that’s fine, Jekyll will just rebuild it. .gitignore: tells Git what not to track. You shouldn’t need to edit it. Advanced users may want to adjust it. .jekyll-metadata is created by Jekyll. You can ignore it. If you delete it, Jekyll will build it again. CHANGELOG.md: the list of things we’ve changed in the template. You can ignore this unless you’re curious. It can be useful to compare to newer version of the template, if you want to see what your older version doesn’t have. Gemfile and Gemfile.lock: determines which versions of Ruby gems your project uses. You’ll rarely have to chance this unless you know exactly why you’re changing it. LICENSE: the license terms under which this template is created. node_modules: once you install Gulp and its dependencies for a project, you’ll also see this folder in your project. You can ignore this. If you delete it, you’ll need to run the output script’s ‘Install dependencies’ step again. It will not be tracked by Git. package.json and package-lock.json: determines which Node modules your projects needs for things like image processing and building apps. Most users can ignore this file. Advanced users may need to edit it to use new Node modules."
});
index.addDoc({
    id: 14,
    title: "Using Javascript – The Electric Book template",
    content: "Using Javascript Limiting scripts by book or format Scripts in epub Manipulating SVGs Unless there’s a good reason to put them elsewhere, scripts should live in assets/js, and be included in bundle.js, and not added separately. This is especially important in epubs. (More on scripts in epubs below. If you must add scripts that are not included in bundle.js, add them to your <head> elements by adding <script> tags to _includes/head-elements. And to add them just before the </body> tag, add <script> tags to _includes/end-elements. For web outputs, you can also link to remote scripts this way, without the need to save the actual scripts in the js folder. Keep in mind that anything you add to head-elements will be added to all books in the project folder, and to all their formats. Limiting scripts by book or format To limit a script to a given book or format, wrap the script tag in Liquid control flow tags. For instance: {% include metadata %} {% if book-directory == 'grapes-of-wrath' %} <script src='{{ site.baseurl }}/assets/js/grapes-of-wrath.js'></script> {% endif %} (The include metadata tag fetches all kinds of information about the page, including which book-directory it’s in.) To limit a script to a given output format, use site.output: {% if site.output == 'print-pdf' %} <script src='{{ site.baseurl }}/assets/js/print-headers.js'></script> {% endif %} Scripts in epub All scripts to be used in your epub should be included in assets/js/bundle.js, and not added to pages as separate files. This is because you must not have any scripts in your epub that you aren’t using, or it won’t validate; and we only support including bundle.js in epub output. If you don’t want any Javsacript at all in your epub, you can disable it in _data/settings.yml by setting epub > javascript > enabled to false.You should then also exclude assets/js/bundle.js in the exclude list in _configs/_config.epub.yml, so that it doesn’t build at all. Manipulating SVGs To script SVG manipulation during gulp preprocessing, see ‘SVG processing’ in the Images section."
});
index.addDoc({
    id: 15,
    title: "Web monetization – The Electric Book template",
    content: "Web monetization Web monetization allows content creators to be compensated for their work, without tracking user data or including advertisements on their sites, using the Interledger protocol for funds transfer. Once you have set up an ILP-enabled wallet, you can activate web monetization on your ebook by pasting your ILP pointer in the “ilp-pointer” field in _data/settings.yml, and changing the “enabled” field to “true”."
});
index.addDoc({
    id: 16,
    title: "Packaging the project – The Electric Book template",
    content: "Packaging the project You may need to package your project without its Git history and non-version-controlled (.gitignored) files. For instance, we might include an electric-book.zip package, containing the Electric Book template, in a release. This zip file contains the entire template without its Git history, so that it’s the blank slate you need to start a new project. To create a package, from the command line run this: npm run electric-book -- package A zip file of your project will be saved to the _output folder."
});
index.addDoc({
    id: 17,
    title: "Content tags (classes) – The Electric Book template",
    content: "Content tags (classes) Formatting Reserved classes The edition suffix Deprecated classes Our template includes styling for a range of classes by default. You can apply these to elements in markdown. Formatting Use these classes in your markdown to create specific formatting effects. Feature Workflow class Block or inline Explanation Supports edition suffix Bibliography list .bibliography Block Styles a list as a bibliography, for instance at the end of an academic book. To apply this class, place {:.bibliography} directly under the list you would like to target. No Box .box Block Puts the element in a box, to set it off from the rest of the text. To apply this class, place {:.box} directly under the block of text you would like to target. No Chapter number .chapter-number Block Used for a chapter number before a chapter heading. (See the tip at Bold in the chapter on Markdown for another way to handle chapter numbers.) To apply this class, place {:.chapter-number} under the chapter number. No Dedication .dedication Block A dedication, for instance at the start of a book or chapter. To apply this class, place {:.dedication} directly under the block of text that you’d like to target. No Dialogue .dialogue Block Dialogue, as in a play script. Apply to a definition list, where dt is the name, and dd the speech. No Epigraph source .epigraph-source Block The person to whom the epigraph is attributed. To apply this class, place {:.epigraph-source} dircetly under the source of the epigraph. No Epigraph .epigraph Block An epigraph at the start of a book or chapter. To apply this class, place {:.epigraph} under the epigraph you’d like to target. No Figure .figure Block A figure is an image with a caption. Add {:.figure} immediately below a blockquote containing an image and a separate paragraph of text to make it behave as a figure. Read about other options for adding figures in our workflow guide. No Figure: fixed position .fixed Block Add to the .figure tag, e.g. {:.figure .fixed}. For figures that must keep their position in the text flow, and must not float to the top of the page. No Figure height .height-1 to .height-50 Block Sets the height of an element to a multiple of the default line height. Use in figures, on line after image, add it to the figure tag like this {:.figure .height-12} for an image whose height should be 12 lines. Yes First paragraph .first Block For any paragraph that starts a new set of paragraphs, which should be flush left and with a gap above it. Add {:.first} immediately below this first paragraph. No Float to top .float-top Block Floats the element to the top of its page. Useful for boxes. Applies to print output only. Apply {:.float-top} under the element which you’d like to float to the top. Or add it to an existing class like {:.box .float-top}. Yes Float to bottom .float-bottom Block Floats the element to the bottom of its page. Useful for boxes. Applies to print output only. Apply {:.float-bottom} under the element which you’d like to float to the top. Or add it to an existing class like {:.box .float-bottom}. Yes Footnote .sidenote .bottom Block or inline When you add .bottom to .sidenote, the note appears at the foot of the page in print output. It remains on the side on screens. (Also see the chapter ‘Footnotes, endnotes and sidenotes’.) No Fractions .fractions Block or inline If your font supports it, converts characters like 1/2 into fraction characters. Add {:.fractions} to a span (e.g. italics, bold or link) or to a block element (e.g. list, paragraph) by adding it to the line immediately below it. No Frontmatter references .frontmatter-reference Inline Tag links in the Table of Contents whose page numbers must match your frontmatter reference style set in its .sass variables (e.g. print.scss). You apply this class differently depending on how your Table of Contents is generated. In the current Electric Book template, the TOC is built from the book’s metadata in _data/works. In the toc: section, add class: 'frontmatter-reference' below the label you need to target. No Glossary .glossary Block Add {:.glossary} below the last entry in a series of definition lists to format the entire list of definitions as a glossary. No Hide from print .non-printing Block or inline Hides the element from print output. Useful for things like clickable buttons, which are only intended for screens, not paper. Apply {:.non-printing} below or next to the element. No Image height .image-height-1 to image-height-50 Block or inline Sets the height of images inside an element, in lines Yes Image with caption .image-with-caption Block Used for paragraphs that start with an inline image, and turns the text in the paragraph into a caption. Makes simple images with captions quick and easy. Apply {:.image-with-caption} directly after the paragraph that contains an inline image. No Keep together .keep-together Block or inline Prevents an element from breaking across pages. (E.g. you want to keep a short list on the same page.) Apply {:.keep-together} to the end of the entire element. You can also apply it to a span (e.g. a phrase, like <span class='keep-together'>24/7</span>) to prevent it breaking over a line. Yes Keep with next .keep-with-next Block Prevents a page break between this element and the next one. Apply {:.keep-with-next} below the first element, to make sure it stays with the following element. No Letter .letter Block Formats a blockquote as a letter, by spacing the paragraphs in it. Add > to the beginning of each line of the letter, to create a blockquote, then apply {:.letter} directly below the entire blockquote. No Logo image .logo Block Used for making images small, especially for small logos in text like on acknowledgements pages. Add {:.logo} immediately below the markdown image tag. No Page break after .page-break-after Block Creates a page break after the element. Place {:.page-break-after} directly below the element preceding your desired page break. No Page break after, end of book .page-break-after-right Block When applied to the very last element in the book, ensures a blank verso for an even-numbered page extent. Apply {:.page-break-after-right} to the last element. No Page break before .page-break-before Block Starts its element on a new page. Apply {:.page-break-before} after the element that should come after the page break. No Page break: allow .allow-break Block Allows an element to break over a page where the default styles would normally prevent that (for example a three-bullet list might not break over a page). Apply the class to the parent element, for example place {:.allow-break} directly below the entire list. No Page numbering restart .page-1 Block Restarts page numbering from 1. Can be added to the first block element on a page by using {:.page-1} after the first element, or to the YAML header, in addition to the main style, e.g. style: halftitle-page page-1 or style: chapter page-1. Recommended for any document that starts a book interior (e.g. title page), to retain correct pagination when creating a screen PDF that has a front cover page. No Poetry .verse Block Designing poetry is tricky and important. Read about how to manage this in our workflow guide. No Pull quote .pullquote Block Displays a paragraph as a pull quote. Apply {:.pullquote} directly below the block of text. No Redact content .redact Block or inline Redacts text and images in PDF outputs No Shift element down .shift-down, .shift-down-n Block Shifts an element down in the document on output, where n is the number of sibling elements to shift it down by. No Shift element up .shift-up, .shift-up-n Block Shifts an element up in the document on output, where n is the number of sibling elements to shift it up by. No Show URL .show-url, .pdf-show-url, .epub-show-url Inline Apply to a link to show the URL in parentheses after the linked text in epub and PDF, PDF only, or epub only. For epub, this applies only to some e-ink ereaders. No Show page number .show-page-number Inline Apply to a link to show the page number in parentheses after the linked text in PDF. No Show roman page number .show-page-number-lower-roman Inline Apply to a link to show a roman-numeral page number in parentheses after the linked text in PDF. No Sidenote .sidenote Block or inline A sidenote appears in a sidebar to the right of the text. Apply {:.sidenote} below the block of text. No Small caps (lowercase only) .smallcaps Block or inline Works if your font supports proper small-caps glyphs. Only affects the lowercase letters. Apply {:.smallcaps} to the span inline (e.g. use * like italics) or directly below the block of text. This class avoids making * and ** spans bold or italic. So add .italics or .bold if you also need to italicise the small caps or make them bold. No Small caps throughout .allsmallcaps Block or inline If your font supports proper small-caps glyphs, this makes all characters small caps, including capital letters. Apply {:.allsmallcaps} directly after a span element inline or directly below a block of text. Add .italics or .bold if you needed to italicise or make bold. No Source after a quotation .source Block Add this to the source (e.g. name and/or title) for a preceding quotation. Apply {:.source} below the block of source text. No Start on right .start-on-right, .start-on-recto Block Creates a page break to start a new right-hand page. Apply to page frontmatter to start a chapter on the right, e.g. style: chapter start-on-right. No Table caption .table-caption Block Add {:.table-caption} in the line immediately after a table caption. Table captions must always appear above tables, not after them. No Title page: author .title-page-author Block The book’s author(s) on the title page. No Title page: logo .title-page-logo Block A logo, as an image, on the title page. Apply {:.title-page-logo} below the markdown image tag. No Title page: subtitle .title-page-subtitle Block The book’s subtitle on the title page. Apply {:.title-page-subtitle} directly below the subtitle. No Title page: title .title-page-title Block The book’s title on the title page. Apply {:.title-page-title} directly below the title. No Tracking: tighten .tighten-1 to .tighten-50 Block or inline Each increment tightens the space between letters by 0.001em (1/1000 of a em). E.g. add {:.tighten-5} directly below a paragraph to reduce its letter-spacing by 5/1000em. Affects print output only. Yes Tracking: loosen .loosen-1 to .loosen-50 Block or inline Each increment loosens the space between letters by 0.001em (1/1000 of a em). E.g. add {:.loosen-5} directly below a paragraph to increase its letter-spacing by 5/1000em. Affects print output only. Yes Valediction .valediction Block Used for the sign-off at the end of a letter, preface or foreword. Add {:.valediction} directly below the sign-off line. No Visually hide .visuallyhidden Block or inline Used to hide elements from view, but not from screen readers. No Width .width-1 to .width-100 Block Applied to .verse (only for PDF output) and to figures to set their width as a percentage No Reserved classes You may also need to create your own classes for other uses. If you do, avoid using the same already-supported class names above. You should also avoid using the following ones, which are reserved for specific structural elements. Class name Reserved for index The home page of a collection, used for the style value in file YAML headers cover A front cover, which will appear in ebook editions, used for the style value in file YAML headers halftitle-page A book’s halftitle page, used for the style value in file YAML headers previous-publications-page A book’s list of the author’s previous publications, used for the style value in file YAML headers title-page A book’s title page, used for the style value in file YAML headers copyright-page copyright or imprint page, used for the style value in file YAML headers contents-page A book’s table of contents, used for the style value in file YAML headers dedication-page A dedication page, used for the style value in file YAML headers epigraph-page An epigraph page, used for the style value in file YAML headers frontispiece-page A frontispiece page, used for the style value in file YAML headers frontmatter For other prelim pages not accounted for otherwise, used for the style value in file YAML headers chapter A book’s default chapter page (and the global default), used for the style value in file YAML headers The edition suffix If you want to produce more than one print edition of a book from the same source file, you can’t use the same classes that affect text-flow – like .tighten-1, for instance – in both editions, because the text will flow differently in each edition. Our workflow has a way to manage that. In the print CSS file, you can specify an edition suffix. For instance, if you’re producing a schools edition of a book, you might make your suffix -schools-edn. That suffix will be appended to the end of certain class names for that stylesheet. The default .tighten-1 class will become .tighten-1-schools-edn in your final print CSS. (It’s a good idea to start a suffix with a hyphen and use all lowercase letters, to keep your output CSS neat. Never use spaces.) Only some classes are affected – see the table above for which ones. The most important are the classes used for tightening and loosening letter-spacing, which are mostly used to control widows and orphans in print layout. In your markdown, then, you’d use {:.tighten-1-schools-edn} instead of {:.tighten-1}, and that class will then only have an effect on your schools edition. If you had another edition, say a large-print edition with a -large-print suffix, you’d use a {:.tighten-1-large-print} tag in the markdown. These would match the classes automatically generated in each edition’s CSS. Of course, one element can carry both classes. For instance, you might end up with a paragraph tagged with {:.tighten-1-schools-edn .tighten-1-large-print}. That paragraph would then be tightened in both print layouts. Deprecated classes Early versions of the EBW used the following classes, which are no longer supported: shrink tighten, tight, x-tight, xx-tight, xxx-tight loosen, loose, x-loose"
});
index.addDoc({
    id: 18,
    title: "Figures – The Electric Book template",
    content: "Figures The figure include Rotating figures Figure width Figure height Simple markdown figures A figure is the combination of an image and a caption. Sometimes a figure can include things like tables or video instead of images, and the captions can be accompanied by things like titles and sources. The figure include Figures are best created with the figure include. The figure include is a dedicated piece of code in our template that creates figures with many options. To include a figure this way, start with this simple tag: {% include figure %} Then, inside that tag after the word figure, you add extra info, depending what you need it to include. In the tag for each figure, we can define the following information: one or more images html (e.g. for complex tables with merged cells) markdown (e.g. for simple tables) a reference (e.g. ‘Figure 1.2’, which will appear in front of the caption) a link (clicking the image opens this link; without it, by default clicking the image opens the image file) a caption (appears below the image) a title (can be used to title descriptive text) alt text (a description of the image, e.g. for screen readers) a source (appears below the figure) the height of the image in lines a class (for styling the layout of a given figure). The template uses that information differently depending on the output format. For instance, on the web and in the epub, the alt text is the text that screen-readers will read aloud to visually impaired users who can’t see an image; and we don’t need to display it in print. A caption and alt text are similar, but not the same. A caption usually provides information about the figure, while alt text describes its appearance for someone who can’t see the image. We define these things in the tag using ‘parameters’. For instance, we set the image parameter by writing image='mydog.jpg'. Below is a figure include with each parameter set. You can copy this and set the value in each parameter. Nothing is mandatory, so you only need to include the parameters that your figure needs defined. Here is a full example: {% include figure images='mydog.jpg, yourdog.jpg' html='<table></table>' markdown='A *bad* example.' reference='Figure 1.2a' link='https://example.com' caption='This is the figure caption.' title='My Example Figure' alt-text='This should describe what the images look like.' source='Electric Book Works, 2017' image-height='10' class='featured' %} Note the double quotes. If the text you’re adding to a parameter contains quotes, you’d use single quotes in the text – or vice versa. Do not mix single and double quotes, or the software won’t know where the parameter ends. If you must use, say, double quotes inside the quotes around a parameter, use the actual unicode glyphs for curly quotes, “ and ”. For instance, all of these are okay: caption='Blake's illustration for 'The Tyger'.' caption='Blake's illustration for 'The Tyger'.' caption='Blake's illustration for “The Tyger”.' Rotating figures If you need to rotate a large figure on the page, add the rotate class. E.g. {% include figure html='<table>...</table>' reference='Figure 1.1' caption='A really huge table.' class='rotate' %} Rotation only affects PDF output. Figure width If you need to make a figure narrower than the full text area, add a width-x class, where x is the width you want in percent. E.g. width-50 will create a half-width image. Figure height On the web, sometimes portrait-orientation images are too tall to fit in one screen. We need to limit their height so that the user doesn’t need to scroll to see the whole image. However, some figures’ images do need to be taller than the viewport to be readable (e.g. a large poster with small text). So we need to be able to override the default max height. In the template, the default max height of a figure image is 80% of the viewport height (the 80% leaves space for at least some of the caption). To override this default, and allow a figure’s images to be taller than 80% of the viewport height in web outputs, add a web-max-height-none class to the figure. E.g. <div class='figure web-max-height-none'> <div class='figure-body'> <div class='figure-images contains-1'> <a href='/images/web/figure-01.jpg'> <noscript> <img src='/images/web/figure-01.jpg' srcset='/images/web/figure-01-320.jpg 320w, /images/web/figure-01-640.jpg 640w, /images/web/figure-01-1024.jpg 1024w, /images/web/figure-01.jpg 1280w' sizes='(min-width: 600px) 1300px, 100vw' alt=' ' /> </noscript> <img data-src='/images/web/figure-01.jpg' data-srcset='/images/web/figure-01-320.jpg 320w, /images/web/figure-01-640.jpg 640w, /images/web/figure-01-1024.jpg 1024w, /images/web/figure-01.jpg 1280w' sizes='(min-width: 600px) 1300px, 100vw' alt=' ' class='' /> </a> </div> </div><!--.figure-body--> </div> Note that this is only implemented for web and app outputs. Simple markdown figures If you don’t want to use the figure include, you can also create simple markdown figures that include an image followed by a caption. We put these together in a <blockquote> element with a .figure class. We can then control placement by styling the <blockquote>. The reason we use a blockquote is that it lets us keep images and their captions together. (A <figure> element would be better HTML, but it won’t validate in EPUB2, and can’t be created with kramdown.) Here’s an example of markdown for a figure: > ![Line drawing of a book](../images/web/book.jpg) > > This is not a book. {:.figure} Every line (except the {:.figure} class tag at the end) starts with a > and a space. These wrap the figure (image and caption) in a blockquote element. The first line is the image reference. As noted above, it consists of: an exclamation mark telling markdown that we’re placing an image the image’s description (aka the alt attribute in HTML) in square brackets the path to the image file. The third line is the figure caption, followed by the kramdown tag {:.figure}, which lets our stylesheets format the blockquote as a figure. (For instance, preventing a page break between the image and the caption in print.) If your image has no caption, just skip the empty line and caption line: > ![Figure 2-A: The Ballard scoring method](../images/web/fig-2-A.svg) {:.figure} If it’s important to you that the image isn’t in a blockquote, and there is no caption, you can use: ![Figure 2-A: The Ballard scoring method](../images/web/fig-2-A.svg) {:.figure}"
});
index.addDoc({
    id: 19,
    title: "Hyphenation – The Electric Book template",
    content: "Hyphenation There are various techniques for managing hyphenation in PDF output. You can change the basic hyphenation settings (variables) in your book’s print-pdf.scss or screen-pdf.scss files. Our default stylesheets can ask Prince to hyphenate paragraphs and lists (p, ul, ol, dl), with a few exceptions (such as text on the title and contents pages). Prince includes a range of hyphenation dictionaries for major languages by default, which do a good job. However, you might need to add dictionaries or lists of specific words that Prince doesn’t support. You can find .dic files online for various languages and specialities, or you can compile your own. A .dic file is a plain-text file with one word or word-fragment on each line. Each one is called a pattern. If the pattern starts with a ., it will apply to, or match, any word that starts with that pattern. E.g. .foo will match the words ‘food’ and ‘foobar’ but not ‘fastfood’. If the pattern ends with a ., it will apply to any word that ends with that pattern. E.g. port. will match ‘port’ and ‘sport’ but not ‘portico’. Thus, if the pattern starts and ends with a ., it will apply to only that pattern exactly. E.g. .port. will only ever match ‘port’. To show where a word or word-fragment can hyphenate, you add digits (1 to 9) to the pattern. The digits have special meanings: Insert odd digits (1, 3, 5, 7, 9) where the word may hyphenate. Insert even digits (2, 4, 6, 8) where the word should not hyphenate. The higher the number, the more important the rule. That is, a 1 says ‘hyphenate here if you must’, but a 9 says ‘this is the best place to hyphenate’. A 2 says ‘don’t hyphenate here if you can help it’, but an 8 says ‘Do not, not, not hyphenate here.’ For user discussion, see the Prince forums here: If you need to hack Prince’s built-in hyphenation dictionaries more deeply, see this forum post. Use a custom dictionary To use a custom dictionary, save the dictionary file to your styles folder, and insert its filename in your book’s print-pdf.scss and/or screen-pdf.scss files as the value of the $hyphenation-dictionary variable. For example: $hyphenation-dictionary: 'hyphenation.dic'; In hyphenation.dic, you can add patterns as described above. If your hyphenation.doc starts with three-hyphen YAML frontmatter, Jekyll will process it, and you can use Liquid tags for extra power. For example, you can include other hyphenation pattern files saved alongside hyphenation.dic: --- # This YAML frontmatter makes Jekyll process this file. # So you can use Liquid tags to include files such as # other hyphenation dictionaries, e.g. # `{% include_relative hyph-en-gb.pat %}` # or to use hyphenation in certain cases, e.g. variants. --- {% include_relative hyph-en-gb.pat %} Or you can use custom hyphenation only in specific variants of your book: {% if variant == 'fantabulous' %} .fan3tab5ulous. {% endif %} Also see the guidance on styles in translations."
});
index.addDoc({
    id: 20,
    title: "Images – The Electric Book template",
    content: "Images Adding images in markdown Responsive images Images in translations Image size Images over a double-page-spread Adding images in markdown You can use standard markdown to embed images: ![A description of the image](../{{ site.image-set }}/filename.svg) Let’s break that down: the exclamation mark and square and round brackets make up the basic markdown image syntax: ![Description](filename). The description is especially important for screen-readers used by the visually impaired. ../ means ‘go up, out of the text folder’ {{ site.image-set }}/ means ‘go into the folder containing our preferred set of images’ (as defined in _config.yml). The default image-set folder is images. finally, the image file name. Responsive images To add an image, you can use standard kramdown syntax, as described above, but then you’ll be missing a key feature of this template: your user’s browser won’t fetch the size of image best suited to their device. Instead, to get responsive images, use this image tag: {% include image file='foobar.jpg' %} where foobar.jpg is the original filename of the image. If necessary, you can add class, id and/or alt attributes to the image, too: {% include image file='foobar.jpg' class='example' alt='An example image.' id='anyuniqueid' %} (You can also use src='foobar.jpg' instead of file='foobar.jpg', if you’re used to standard HTML img syntax, which uses src.) Images in translations If you are creating a translation in a subdirectory of text, and your images are in the parent book folder, you need to change the path to the images slightly. You have three options: From version 0.10 of the template, you can use {{ images }} metadata tag, which will always create the correct path to your images. At the top of your markdown file, add {% include metadata %}`, so that you can use metadata variables in that file. In older versions of the template: use the {{ path-to-book-directory }} metadata tag. At the top of your markdown file, add {% include metadata %}, so that you can use metadata variables in that file. Then instead of any ../s, you use the tag: {{ path-to-book-directory }}{{ site.image-set }}/filename.jpg. Even if you’re not in a translation folder, it’s good practice to always use the {{ path-to-book-directory }} tag for maximum portability, if you don’t mind having the {% include metadata %} tag at the top of your files. Ultimately this image include will look like this: ![A description of the image]({{ path-to-book-directory }}{{ site.image-set }}/filename.jpg) In very old versions of the template: add another ../ for each directory level. So if your translation text is in book/fr, anf your images are in the book folder, you need to come up two levels before going into book/images. So your path is ../../{{ site.image-set }}/filename.jpg. Ultimately, your image include will be ![A description of the image](../../{{ site.image-set }}/filename.jpg). Image size In PDF output, you can use a class to specify the exact height of the image in lines. This is important if you’re maintaining a baseline grid on your pages. For instance, {:.height-15} will limit the image to a height of fifteen lines. <noscript> <img src='/images/web/foobar.jpg' sizes='auto' srcset='/images/web/foobar-320.jpg 320w, /images/web/foobar-640.jpg 640w, /images/web/foobar-1024.jpg 1024w, /images/web/foobar-2048.jpg 2048w' class='height-15' alt='' /></noscript><img data-src='/images/web/foobar.jpg' sizes='auto' data-srcset='/images/web/foobar-320.jpg 320w, /images/web/foobar-640.jpg 640w, /images/web/foobar-1024.jpg 1024w, /images/web/foobar-2048.jpg 2048w' class='height-15' alt='' /> CSS tip: If you’re having trouble with SVGs having space around them, in your CSS make sure you set the height of the img element. SVGs are inline elements by default, and will add white space around them. Images over a double-page-spread There is no easy way to put images over a double-page spread, but there is a way to hack it. Of course, images across a DPS are not an ebook or web issue (if an ereader or browser shows ‘pages’ as a DPS, we have no control over it anyway). They are only a print issue. The problem is that PrinceXML does not provide a mechanism for placing images (or any element) across a spread. In short, what we do is: Place the image twice, each in a div (as HTML) or blockquote (possible with markdown) element. Using PrinceXML’s next modifier for floats, we float the div or blockquote elements on the first and second pages of the DPS respectively. Inside each div or blockquote, we position the image so that, on the left, only the left half of the image shows; and on the right, only the right half of the image shows. This all depends on placing your image reference in a way that the first blockquote–image falls on a left-hand page. Here’s a step-by-step guide using example code: The image itself must be in the right aspect ratio. This method cannot (yet) resize or crop your image for you with CSS. In this example here, the image must be 270×120 (landscape), including an allowance for 5mm bleed. In the markdown text file, place the image twice, each inside a blockquote, and tag the first instance {:.dps-left} and the second {:.dps-right}. > ![1](images/lion.tif) {:.dps-left} > ![1](images/lion.tif) {:.dps-right} Hide the second instance of the image in any web, app or epub CSS: /* Hide second instance of images intended for DPS in print */ .dps-right { display: none; } In print CSS, use this. Follow the comments to modify sizes to suit your page size and layout: /* DPS images */ blockquote.dps-left { float: top; margin: -20mm 0 10mm -5mm; /* Here you're aiming to start the image in the page bleed top left */ width: 135mm; /* Page width plus one side's bleed, e.g. 130mm wide plus 5mm bleed */ height: 120mm; /* Exact height of the image */ text-align: left; } blockquote.dps-right { float: top next; margin: -20mm 0 10mm -5mm; /* Here you're aiming to place the image in the page bleed top right */ width: 135mm; /* Page width plus one side's bleed, e.g. 130mm wide plus 5mm bleed */ height: 120mm; /* Exact height of the image */ text-align: right; } blockquote.dps-left p img { width: 270mm; /* This must be exactly double the width above */ max-height: 120mm; /* This must be the same as the height above */ position: absolute; left: -5mm; } blockquote.dps-right p img { width: 270mm; /* Ditto */ max-height: 120mm; /* Ditto */ position: absolute; right: -5mm; } That’s all based on these page settings. Yours may differ, affecting your margins, heights and widths accordingly: @page { size: 130mm 200mm; margin-top: 15mm; margin-bottom: 20mm; margin-outside: 0; margin-inside: 0; prince-bleed: 5mm; prince-trim: 5mm; } We’ve done very little testing with this so far, so your results may vary. There is another example here."
});
index.addDoc({
    id: 21,
    title: "Indexes – The Electric Book template",
    content: "Indexes Introduction Creating the index How to tag indexed concepts Nested entries Indexing concept ranges Creating the index list Generating the index database Technical explanation The legacy, manual method How to tag indexed phrases How to create the index list Introduction A book’s index – the long list of terms and page numbers at the back – is an important part of much non-fiction. Good indexes are created by professional indexers, who compile the list of entries. They do not only list words: rather, they create a taxonomy of concepts; a map of ideas in the book. For instance, a good indexer will include an entry for ‘democracy’ if it’s discussed even if the word ‘democracy’ is never used. This is why good indexes cannot be generated by computers. A good index is a work of literature in itself. Traditionally, the indexer works from the book’s final layout, and notes page numbers for each concept manually. But in our workflow, where we reflow content into different formats, page numbers are never really fixed. And in epub, web and app formats they don’t exist at all. So, while you might carefully manage a print PDF’s pagination to allow for manual page numbers in the index, you couldn’t reuse that index in another format. In the past, therefore, indexes have only been available to readers in PDF-based formats. Epub, web and app readers have had to rely on search, which is a poor substitute when you’re looking for concepts rather than exact phrases. In modern publishing, we need each page number to be a link to a particular point in the book. In PDF, the page numbers that appear in the index are then generated automatically. And in reflowable formats (epub, web, app) those links shouldn’t even appear as page numbers, since ‘pages’ don’t exist there. Rather, each link is simply numbered in sequence. There are a several advantages to this approach: You can index early in the production process, rather than waiting for page layout to be finalised. The index can be useful during the writing process. This is especially useful for multi-author teams on large books, where contributors need to look up where concepts have already been addressed. When you make updates or corrections that cause text to shift, you don’t need to check all the page numbers in the index. The index’s wonderful taxonomy of concepts is now available to readers in all formats. When you translate a book into another language, you can translate the index at the same time, and have it work immediately. Note: in book and web production, the word ‘index’ has several meanings, in addition to meaning a back-of-the-book reference index. When talking about website code, the index page is the starting page: the home page or the main page in a directory. So never give your book index the file name index (index.md or index.html). We recommend using a file name like reference-index for a book’s index. An index can also be a kind of database: a structured list of items for a computer to parse. For instance, this software uses Javascript indexes like this for search and for processing book-index targets and links. In these docs, we will try to use ‘book index’ or ‘reference index’ for the back-of-the-book index. And sometimes we will call the programming index a ‘database’, even though it’s not a database in the conventional programming sense. To create a dynamic index you have to complete these steps: In the text, add tags containing each index entry. These are targets for the book’s index to link to. Create a list of book-index entries. This is the list at the back of the book, to which we’ll automatically attach page numbers. Run the output-script task that builds a ‘database’ from your tags. Creating the index How to tag indexed concepts We use HTML comments to note where indexed concepts or phrases appear in the text. The HTML comment must start with index:. An HTML comment between block elements (e.g. between paragraphs, lists, or blockquotes) can contain any number of index entries that appear in the element that follows the comment. E.g.: <!--index: Holmes, Sherlock Adler, Irene --> To Sherlock Holmes she is always THE woman. I have seldom heard him mention her under any other name. In the final index, the link in web, app and epub formats, and the page number in PDF, will point to the start of that following element. In the above example, the links will point to the beginning of the paragraph starting ‘To Sherlock…’. This way of adding index entries in text keeps your markdown neat. The trade-off is that it’s possible that, in PDF, the index could refer (i.e. link) to the page number on which the paragraph starts, while the concept you intended to index actually appears later in the paragraph on the following page. Generally speaking, this trade-off will be worth it. Then, if you absolutely must have the page number exactly right, then you can add your HTML comment inline, like this: To <!--index: Holmes, Sherlock --> Sherlock Holmes <!--index: Adler, Irene --> she is always THE woman. I have seldom heard him mention her under any other name. If the entry in the actual index contains italics, do not add any italic markup to your index: comments. For example, if your index contains an italic entry for the ship HMS Queen Elizabeth, your index entry would still just be: <!-- index: HMS Queen Elizabeth --> Nested entries Complex indexes will often group, or nest, concepts. For example, the index for our Holmes story might list ‘marriage’ as a main entry, and then ‘unhappy’ and ‘secret’ as subentries beneath it. You create a subentry by including its parent entry, then double backslash , then the subentry term. E.g. <!--index: marriage  unhappy --> A few very big indexes might include sub-subentries. For instance: <!--index: occupations  clergy  Nonconformist --> Indexing concept ranges Concepts listed in an index are sometimes discussed in a book over long passages, rather than in one word-specific location. For instance, in a book on French literature, several pages might be dedicated to discussing the work of Albert Camus. The index might list ‘Camus, Albert 25–28’. When you tag concepts in the book’s text, and you want to reference a range like this, you need to note where the range begins and ends. Do this by adding a hyphen at the end or start of your tag’s entry. You’d tag the start of the Camus section like this: <!--index: Camus, Albert- --> And you’d tag the end of the discussion like this: <!--index: -Camus, Albert --> To end a range for a nested entry, the hyphen goes at the start of the entire line, not the subentry term: <!--index: -cases  Scandal in Bohemia --> It’s important to always close your ranges! And remember that a tag between block elements (paragraphs, blockquotes, etc.) targets the element following the tag. So you’d place your range-closing tag immediately before the last paragraph about Camus. Creating the index list Then in the markdown file for the index itself, you create a list of entries, using exactly the phrases you used when tagging concepts in HTML comments. You do not need to add any links or page references. The list must have a {:.reference-index} class tag. E.g.: - Adler, Irene - Holmes, Sherlock {:.reference-index} Don’t confuse the syntax of this list with that used for your tags. You do not include the hyphens used for concept-range tags. And you must include subentries as nested list items, not using double backslashes. For instance, an index with the nested entries and page ranges might look like this: - Camus, Albert - existentialists - Camus, Albert {:.reference-index} Generating the index database Before the page numbers and links will work in your book, you need to generate the index’s ‘database’ file. Use the output script and choose the ‘refresh indexes’ option for each output format you’re publishing. The script will generate an ‘index database’ as a Javascript file. This is necessary for the system to populate your index list with links when you output your book. For instance, for print-PDF, this will create a file called book-index-print-pdf.js. In version control (e.g. Git), you should commit this generated file in the same way you do any book content. And you should re-run the ‘refresh indexes’ option each time your indexing tags have changed. When you then generate an ouput (e.g. a website or PDF), your book index will include links and/or page numbers, depending on the output format. Technical explanation To generate the dynamic ‘page’ references in a book index, we rely on a number of processing steps and scripts. These differ depending on the output format we’re working with. A person must create a list of index entries. See the ‘Dynamic indexes’ section of the Samples book for an example. We think of each entry as a term that references a concept in the book. Let’s call them ‘concept terms’. A person must note in the book’s content where each concept appears, using HTML comments that begin with index:. Where a single comment includes more than one concept term, each term should be on its own line. This is described in the guidance above. Our scripts use the concept terms in the tags to generate a ‘database’ of concept terms and their locations. This is generated by the ‘Refresh book index’ option in the output script, which builds the book HTML and then uses Node and Puppeteer (launched by render-book-index.js) to scrape the content, looking for index: comments. This generates a file for each book output, which contains a Javascript object containing all the concept terms (e.g. book-index-print-pdf.js) as a kind of concept ‘database’. This is a similar process to that used to generate a search index for web and app outputs. The ‘database’ (we’re avoiding using the word ‘index’ to avoid confusion) is then available on each page within the bundle.js script. Next, we need to turn the HTML comments into anchor targets that we can link to. And we need to add links (clickable ‘page’ references) to each concept term in the book index. This is done in two different ways, depending on the output format: For web and app output, we use client-side Javascript. The index-targets.js script finds all the index: comments on the page and creates <a> tags. And the index-lists.js script looks for .reference-index lists, and when it finds one, compares each item on the list with the concept terms in the book-index-*.js ‘database’. When a concept term matches an entry in the database, the script inserts a link to the relevant anchor-tag ID after the concept term. The script also manages concept ranges (‘from’ and ‘to’) and nested entries. For PDF and epub outputs, we can’t use client-side Javascript. PrinceXML doesn’t support some of the Javascript required for comment handling. And in epub, internal links that are dynamically generated client-side are not clickable for security reasons. So, for these output formats, we pre-process the HTML to add the targets and links. After the output script runs Jekyll to build the HTML in _site, it processes each file in the book with gulp tasks. These tasks create anchor-tag targets in the book content from index: HTML comments, and populate the .reference-index with links. These tasks are logical equivalents of the client-side scripts described above for web and app outputs. In PDF output, we use Prince functions in CSS to generate page references. These Prince functions not only create the page ranges (e.g. ‘23–25’) but also avoid adding duplicate page references. This is because, if a concept term appears twice on the same page, there will be two links pointing to that page, but we want only one instance of that page number to show in the book index. The legacy, manual method Before it was possible to generate index references from tags, we manually added anchor-targets and links to the content and index lists. This old process is documented here for legacy projects. How to tag indexed phrases To tag a phrase in the text, we make it a link, and we give that link: a target that points to the index a class (.indexed) to control what it looks like an ID (e.g. #democracy-1) to uniquely identify it. The link target should point to the index entry for that word. This way, clicking the word in the text will take you to the right place in the index. And clicking the page reference in the index will take you to the word in the text. Here’s an example of the link in the text: Late that night, [Bob](reference-index.html#bob-1){:.indexed #bob-1} realised the key was in his pocket. And then when Bob appears later in the book: Eventually, [Bob](reference-index.html#bob-2){:.indexed #bob-2} called her to confess. Note that the ID must be unique for every instance of Bob. How to create the index list Then in the index itself, you create a list of entries. After each entry, you add links to each instance of that entry you’ve tagged in the text. And you give each link the ID that you’ve pointed to in your tagged word’s link target. Tech tip: To make it easy for us to manage, we use the same ID for the tagged word and the index entry. You don’t have to us the same ID. For instance, your tagged-word’s ID might be #text-bob-1 and your index entry’s link #index-bob-1. If like us you use the same ID in both cases, remember that your index must be in a separate file from your text, since IDs must be unique within each file. Here is what your markdown for the index might look like. Here we’ve included examples of sub-entries, and the tag to use for the entire list to style it as an index: {:.reference-index}. * Alice [1](1.html#alice-1){:#alice-1} [2](3.html#alice-2){:#alice-2} * Bob [1](1.html#bob-1) [2](9.html#bob-2) * key [1](4.html#key-1) - private [1](4.html#key-private-1) - public [1](4.html#key-public-1) {:.reference-index} In this example, we’ve used numbers as the link text. On screen, these will stay numbers, e.g.: Alice 1, 2 The stylesheet will add the commas between entries (so you could globally replace with semicolons or otherwise). In print output (using PrinceXML), the stylesheet will replace those numbers with page references."
});
index.addDoc({
    id: 22,
    title: "Markdown – The Electric Book template",
    content: "Markdown How HTML works How markdown works Paragraphs Headings Italics Bold Lists Simple tables Blockquotes Hyperlinks Images Endnotes Definition lists Code Using class tags Inventing classes Block and inline elements Editing reflowable text HTML entities in epub This guide explains how to edit text for the workflow. On its own, it’s also a handy guide to markdown in general. If you get your markdown right, the workflow can zap out an almost-print-ready PDF, website or ebook from your files in a matter of minutes. That is, we go straight from edited manuscript to page proofs – no typesetting! To edit for the workflow, you need to have a rough idea how HTML works, and you need to learn markdown. If you’re new to HTML and markdown, don’t worry: it’s much easier than you think. How HTML works HTML is a computer language. It’s a way for us to mark up or tag text, so that a computer knows how to display it beautifully to humans. That is, software (most commonly a web browser) reads the HTML code and renders it as nice-looking, readable text and images. In HTML, each piece of content (e.g. a paragraph) starts and ends with a tag that a computer can recognise. Tags are always in elbow brackets, like this paragraph tag: <p>. <p> This text is tagged in HTML as a paragraph. </p> The slash ‘closes’ the tag. The <p> tag is one of about a hundred possible tags, maybe ten of which you’ll see in a book, such as tags for headings (e.g. <h1>, <h2>), bold and italic, lists, images, tables, and blockquotes. But not all paragraphs are the same: there are opening paragraphs, pull-quote paragraphs, blurb paragraphs and more. If I want to tell the computer what kind of paragraph it is, I can put it in a special class. Say, the ‘blurb’ class of paragraph. To write this in HTML, I would make the tag <p class='blurb'>. Unlike its limited set of specific tags, HTML classes are infinite, because we can make up class names as we need them. HTML is very simple and very powerful (which is why it’s the language behind almost every web page). We can mark up everything in a book using HTML tags and classes. In our workflow, we store books in HTML, with each book part (title page, contents page, chapter, etc.) in its own HTML file. Then, to create print-ready PDFs, websites and ebooks from that HTML, we combine the files with CSS stylesheets. CSS is another computer language that defines design: font sizes, indentation, colour, etc. A CSS file will say ‘make all headings bold’, for instance, or ‘indent blockquotes by 1em’. If we combine a book’s HTML with a stylesheet designed for print, we can get a print-ready PDF. If we combine the same HTML with a stylesheet for the web, we get the book as a website. This way, we only ever store the book’s content once, and use different stylesheets to generate alternative editions from that single source. Unfortunately HTML tags are very, very time consuming to type by hand. But we have a shortcut! It’s called markdown, and it’s amazing. How markdown works Markdown is just plain text, neatly structured. Plain text as in .txt files. It’s so neatly structured that software can work out, just from the structure of your text, what HTML you intended, and convert it instantly to finished HTML, tags and all. No way! Yes way. Markdown was invented by two very smart people in 2004: John Gruber and Aaron Swartz. Since their work, others have added new features to markdown. So today there are many variations of markdown. We use a variation called kramdown. As you work with markdown, you’ll get to know it really well. That can take as little as a few hours. And hopefully you’ll come to love it as much as we do. To do that, you’ll need to keep the kramdown syntax reference handy. For now, though, we’ll explain the most common, important things you’ll need to edit simple books. To quickly test any basic markdown yourself, go to https://kramdown.herokuapp.com. Type markdown in the left, and see the rendered HTML on the right. Paragraphs This is easy: a paragraph is a line of text separated from any other text by empty lines. You can even have line breaks in a paragraph, and markdown will just ignore them (or, rather, replace them with spaces). That is, markdown is looking for an empty line before it ends a paragraph. This is a paragraph. This is another paragraph. Result: This is a paragraph. This is another paragraph. Headings You can use up to six levels of heading, from level one to level six. To make a heading, just put one or more hash signs, #, and a space, before the heading. For a first-level heading, use one hash sign; for a second-level heading, use two; and so on. Like with paragraphs, separate the heading from everything else with an empty line space. ## This is a second-level heading This is a paragraph. Italics Just put * before and after the italicised words: is it really *this* easy?. It’s really this easy. Bold Just put two *s before and after the bold text: good for **shouting**. Shouting. Tip: If you use bold in a first-level heading (e.g. # **Chapter 1** Lost at Sea), our template’s typography will put that bold text onto its own line, set off from the heading. This is useful for chapter numbers that should look separate from the chapter title, but in the underlying HTML need to be part of the heading, for instance when software generates tables of contents. Lists There are two kinds of lists: bulleted and numbered. For a bulleted list, start each line with a * and a tab. For a numbered list, start each line with a number, a full stop and a tab (you can use any number, because the software will always create an HTML list that starts with 1; but it’s best to use 1 or the actual numbers you intend, just to make things neat). Markdown: 1. Apples 2. Oranges 3. Pears * Apples * Oranges * Pears Result: Apples Oranges Pears Apples Oranges Pears Simple tables You can create simple tables in markdown. You can make them really neat, or you can make them really efficient. Markdown: | Fruit | Quantity | |---------|----------| | Apples | 2 | | Oranges | 5 | | Pears | 0 | | Fruit | Quantity |---|--- | Apples | 2 | Oranges | 5 | Pears | 0 Result: Fruit Quantity Apples 2 Oranges 5 Pears 0 Fruit Quantity Apples 2 Oranges 5 Pears 0 Note the minimum three hyphens in the lines that creates the border between the table head and table body. (Kramdown doesn’t require three, but GitHub previews do, so it’s best practice.) To make more complex tables with merged or individually styled cells, you have to use actual HTML table markup. See the Tables chapter for more detail. Blockquotes Remember how old email programs put a > at the start of each line when you hit ‘Reply’? Ah, > means blockquote. Start each line with > and a space to make text a blockquote. Markdown: > This is text in a blockquote. Result: This is text in a blockquote. In our workflow we use blockquote HTML for more than just quotations, though. We also use it for figures and poetry. We’ll come back to this later. Hyperlinks If you want your final HTML to include a clickable link: surround the text you want clickable with [ and ] put the URL it should point to between ( and ) immediately afterwards. Markdown: To learn more, [click here](https://google.com). Result: To learn more, click here. Images To place an image, you include a line telling the computer where to find the image file. This looks like a hyperlink, but with a ! at the start of the line. Inside the square brackets, you include a brief description of the image (this is useful to screen readers for the visually impaired). ![A dog chasing a bus.](images/dogbus.jpg) In the parentheses above, the images/ part says that the dogbus.jpg image is in the images folder, which is alongside the markdown file. In our workflow, we always put images in the images folder like this. See the Images chapter for more detail. Endnotes Endnotes in our workflow appear at the end of a document (that is, a web page or a book chapter).1 In kramdown syntax, unfortunately, endnotes are called footnotes; so it’s easy to confuse them. In book parlance, there is a big difference between footnotes and endnotes. Close footnote put a [^1] where the footnote reference should appear (the 1 there can be any numbers or letters, and should be different for each footnote in a document); anywhere in the document (we recommend after the paragraph containing the footnote reference), put [^1]: Your footnote text here.. We’ll explain how to create notes on the side or bottom of a page (footnotes) later when we talk about classes. (By the way, endnote references are <sup> in kramdown’s HTML, not unicode numbers like ². The template includes styling for these and for <sub>, as in H2O.) See the Notes chapter for more detail. Definition lists A definition list is a list of definitions, not surprisingly. Think of a dictionary. A definition list comprises one or more entries, and each entry has a headword and a definition. Even if you’re not editing a dictionary, you might need to create a short glossary or define a word or two at some point. To create a definition entry in markdown, put the headword on its own line, and the definition on the next, after a colon and a tab. Markdown: Editor : Someone who spends more time learning new tricks than making money. Result: Editor Someone who spends more time learning new tricks than making money. To create a whole list of definition entries, just put one of these after the other, with a line space between them. Code Code can be inline, like this, or block: like this To create inline code, put back ticks around it: `. To create a block of code, put three back ticks on a line before and after the code block, like this: ``` code here ``` To get code highlighting on a code block, add the name of the language after the first line of back ticks: ``` css p { font-size: 1em; } ``` You can also use three tildes ~~~ instead of back ticks for code blocks. Using class tags We’re going to get a bit more advanced now. Get some tea. As we mentioned earlier, sometimes we have to tell our software what kind of paragraph or list or blockquote we want. These kinds of text are called classes. To give something a class, we add a kramdown tag in curly braces, with a colon, and a dot before the class name. Markdown: This paragraph should be in a box. {:.box} Result: This paragraph should be in a box. For the resulting HTML to actually appear in a box, when we turn your markdown into a finished book, we’ll have to combine it with a CSS stylesheet that includes formatting instructions for the box class. If you’re just editing in markdown, you don’t have to think about the stylesheets. Our default stylesheets include designs for box as well as several other classes. (Which we’ll list in a moment.) But if your book needs classes that aren’t already supported in the template, you’ll need to ask a CSS-savvy designer to write you some CSS rules for your new class, to add to the bottom of your theme’s master .scss files as custom CSS. Inventing classes If you invent new classes, make sure you name them for their semantic purpose, not their appearance. For instance, important-tip is a better class name than shaded-bold. Also, class names should always be lowercase and have no spaces. In addition to boxes, our default stylesheets include lots of other classes for common book features. Block and inline elements Attribute tags like classes can be applied to two kinds of element: block elements and inline elements. A block element is anything that should (in print or on screen) start and end with a line break, like a paragraph or a list. An inline element is anything that appears inside a line of running text, like bold and italic. Most of the template’s pre-designed classes are for either block or inline elements, and sometimes both. When you apply an attribute tag to a block-level element in kramdown, you put the tag on the line immediately following the element. When you apply an attribute tag to an inline element, it appears immediately at the end of a span (a span is any contiguous series of inline characters inside a block element). Spans in kramdown can be marked off with asterisks as if they are italics: mark off the text you’re tagging with asterisks (*), as you would italics, and put your tag immediately after the closing *, on the same line. E.g. *Make this small-caps.*{:.smallcaps}. The template will then apply the correct styling to the span, instead of the default italic. To see all the classes that our template supports by default, see the Supported classes section. Editing reflowable text When you’re working in markdown, you’re creating text that might reflow in an infinite number of ways on screens and onto page layouts. This changes the way you edit, because nothing is static. For instance, you can use special HTML codes to insert non-breaking spaces, discretionary (‘soft’) hyphens and non-breaking hyphens. I need to Use this Prevent ellipses falling after a line break Add a non-breaking space (&nbsp;) before ellipses. Prevent dashes falling after a line break Add a non-breaking space (&nbsp;) before the dash: the en-dash&nbsp;– as I've explained&nbsp;– is tricky. Prevent line breaks between numbers and units Use a non-breaking space: e.g. for ‘3 pm, 24 May’ type 3&nbsp;pm, 24&nbsp;May Prevent line breaks between adjectives and their units Use a non-breaking space: e.g. for ‘Grade 2’ type Grade&nbsp;2 Prevent line breaks inside big numbers Use a non-breaking space: e.g. for ‘40 000’ type 40&nbsp;000 Prevent a line break at a hyphen Use &#x2011; for a non-breaking hyphen, e.g. D&#x2011;Space for ‘D‑Space’ Allow a word to hyphenate at the end of a line Insert a discretionary (‘soft’) hyphen code: &shy;. E.g. mark&shy;down HTML entities in epub Warning! Epubs cannot use ‘named entities’ like &nbsp; and &shy; – that is, entities where the character code reads like a name. Luckily, when generating your epub’s HTML, kramdown will automatically convert these into unicode characters, and you won’t have to think about it. However, if you’ve used snippets of actual HTML in your content, such as complex tables in <table> elements, kramdown does not by default process the content inside them. And in this case, named entities like &nbsp; will remain in the epub HTML, and you’ll get serious errors when validating your epub. In these cases, you need to use the hex code for these entities, such as &#160; instead of &nbsp;. In some cases it may work to add the attribute markdown='1' to the element to make kramdown process its contents as markdown. In kramdown syntax, unfortunately, endnotes are called footnotes; so it’s easy to confuse them. In book parlance, there is a big difference between footnotes and endnotes. Back to text"
});
index.addDoc({
    id: 23,
    title: "Mathematics – The Electric Book template",
    content: "Mathematics MathJax in HTML blocks Avoid using LaTeX for content layout To enable LaTeX syntax for maths: Make sure mathjax-enabled: true is set in _config.yml. It may be off (false) to avoid loading unnecessary scripts in books without maths. For PDF output, you must have installed Node, and have run the ‘Install and update dependencies’ option in the output script. (This is because the maths must be rendered before Prince can include it in PDF output.) The LaTeX is turned into displayed maths by MathJax. Surround your LaTeX with $$ … $$ to have MathJax process it. MathJax in HTML blocks Sometimes you have to use actual HTML code in your markdown, for instance when adding an HTML table to a figure include. In that case, surround LaTeX with $$ … $$ for displayed maths (centered, with blank space above and below), and ( … ) for inline maths. Avoid using LaTeX for content layout LaTeX syntax can store two different kinds of info: mathematics, delimited in our markdown with $$ content layout, which must not be used with MathJax. MathJax can only display the mathematics, and does not understand content layout. (More detail here.)"
});
index.addDoc({
    id: 24,
    title: "Footnotes, endnotes and sidenotes – The Electric Book template",
    content: "Footnotes, endnotes and sidenotes Endnotes Footnotes Sidenotes Manual footnotes There are various options for notes. Endnotes Endnotes appear at the end of a document (a web page or book chapter). In kramdown and on the web these are often called footnotes. To create them in markdown, follow the kramdown syntax for footnotes: put a [^1] where the footnote reference should appear (the 1 there can be any numbers or letters, and should be different for each footnote in a document); anywhere in the document (we recommend after the paragraph containing the footnote reference), put [^1]: Your footnote text here.. Endnotes – notes gathered at the end of each web page or book chapter – are the default. Footnotes To create true bottom-of-page footnotes, as opposed to endnotes, use the same syntax as for endnotes above, but then add one of the following options to convert the endnotes to bottom-of-page footnotes. To convert all endnotes to footnotes for an entire project (a repo, series or collection), specify this in _data/settings.yml. E.g. for print-pdf: print-pdf: notes: footnotes To convert all endnotes to footnotes in a single markdown document (e.g. a particular chapter), specify this in the document’s YAML page frontmatter. E.g.: --- title: 'Chapter One' notes: footnotes --- To convert a a specific endnote to a bottom-of-page footnote, add a move-to-footnote class to any part of it. For example, you can apply the class to the first paragraph in a note like this: [^20]: The text of the note. {:.move-to-footnote} Technically, footnotes.js and _print-notes.scss convert endnotes completely from kramdown footnotes to PrinceXML footnotes. They may look similar by default, but they are different elements and can be styled separately. Sidenotes Sidenotes appear in a box to the side of the text. On wide screens, they float far right of the text. On narrower screens, the text wraps around them. In print, the text wraps around them, too. To create a sidenote, put a * at the start of the sidenote text and *{:.sidenote} at the end (with no spaces). (Technically, you’re creating an <em> span with a kramdown IAL.) In print, you can put sidenotes at the bottom of the page. By adding .bottom to the {:.sidenote} tag, your sidenote sits at the bottom of the page rather than on the right with text wrap, replicating a traditional footnote. So the markdown looks like this: *This is a sidenote at the bottom of the page in print.*{:.sidenote .bottom}. On screen, these are just regular sidenotes. Manual footnotes To create footnote-like sidenotes manually, you can tag a reference and footnote-like text to create the bottom-of-page-footnote effect: This is body text with a footnote at the end.[1](#fn-1){:.fnref #fnref-1} [1](#fnref-1){:#fn-1}. This is the footnote text {:.sidenote .bottom} This markdown makes 1 a link in the body text, which points to the footnote text (ID fn-1). The number 1 at the footnote text is a link to the reference (ID fnref-1). Unlike proper kramdown footnotes, these do not autonumber. You must manage the numbering or otherwise marking them manually. This means this is only suitable for books that have a few footnotes. The kramdown contributors are looking into alternative syntax that will let you place a kramdown footnote anywhere in the text."
});
index.addDoc({
    id: 25,
    title: "Poetry – The Electric Book template",
    content: "Poetry Basic poetry markdown Advanced poetry markdown Basic poetry markdown Encoding poetry can be tricky. Usually, poetry in HTML is structured by tagging each stanza as a paragraph, with line breaks after each line. You can do this by adding markdown line breaks (with double spaces or  at the end of each line) and tagging the paragraph with {:.verse}. However, this structure makes it impossible to have browsers, ereaders and PDF engines correctly indent runover lines (because there is no nth-line selector in CSS, unless you resort to a Javascript method that will bloat your code and won’t run on many ereaders). Tech note: Some text and code editors (e.g. Atom) strip out spaces at the ends of lines automatically. So use  for line breaks, not double-spaces. We prefer another approach: the poem is an unordered list (ul) and each line (including each blank line between stanzas) is a list item (li). We just hide any list markers (bullets) with list-style-type: none. This way, we can control indents on runover lines. This is a non-semantic use of HTML, since a poem is technically not a list. But it’s a healthy hack with universal browser and ereader support. Our convention is to mark each line of a stanza with a hyphen -, and tag the list with {:.verse}: - I wandered lonely as a cloud - That floats on high o'er vales and hills, - When all at once I saw a crowd, - A host, of golden daffodils; - Beside the lake, beneath the trees, - Fluttering and dancing in the breeze. {:.verse} We can also indent individual lines, where the poet wanted indents, by tagging individual list items. - Alas for man! day after day may rise, - {:.indent-3}Night may shade his thankless head, - He sees no God in the bright, morning skies - {:.indent-3}He sings no praises from his guarded bed. {:.verse} The 2 in {:.indent-2} refers to the number of em spaces to indent by. Our CSS allows for indents from 1 ({:.indent-1}) to 30 ({:.indent-30}). (Big gaps between words in a line must be created with &emsp; in the poem text.) Advanced poetry markdown But wait, there’s more! Best practice for poetry layout is that – in print – a poem should be centered on its longest line. That is not centering the lines of poetry, but placing the left-justified poem in the horizontal middle of the page. Put another way, the poem should be indented till its longest line is centered on the page. To achieve this, put the entire poem, including its title, in a blockquote, by adding > to the start of each line. Tag the whole blockquote as {:.verse}, too. Finally, decide how wide you want the poem to be as a percentage of the page. That is, if you reckon this poem’s longest line reaches across 90 per cent of the page, use .width-90. > - ### To One Who Has Been Long in City Pent > - To one who has been long in city pent, > - {:.indent-2}'Tis very sweet to look into the fair > - {:.indent-2}And open face of heaven,—to breathe a prayer > - Full in the smile of the blue firmament. > - Who is more happy, when, with heart's content, > - {:.indent-2}Fatigued he sinks into some pleasant lair > - {:.indent-2}Of wavy grass, and reads a debonair > - And gentle tale of love and languishment? > - > - Returning home at evening, with an ear > - {:.indent-2}Catching the notes of Philomel,—an eye > - Watching the sailing cloudlet's bright career, > - {:.indent-2}He mourns that day so soon has glided by: > - E'en like the passage of an angel's tear > - {:.indent-2}That falls through the clear ether silently. > {:.verse} {:.verse .width-90} In verse structured as a list like this, our CSS preserves white space. That is, if you type, say, three spaces you get three spaces. Normally, HTML collapses multiple spaces into one – which is great except when you want to deliberately use extra spaces, as some poets do. However, this doesn’t work at the start of lines, where markdown strips leading spaces. There you must use HTML space entities (like &emsp;) or our indent tags explained above. However, the whitespace: pre-wrap CSS we use for this is not currently supported on Kindle. If that’s important, it’s best to stick to using HTML space entities like &emsp;."
});
index.addDoc({
    id: 26,
    title: "Questions and quizzes – The Electric Book template",
    content: "Questions and quizzes Basic usage Multiple-choice questions Quizzes Applying classes to quizzes Quiz groups Fill-in-the-blanks Basic usage If you want to manage your questions independently of the main book text, and make your multiple-choice questions interactive and self-marking, then each question should be its own file. Questions should be separate files in the book’s folder. Include a question in your book file with the include question tag: {% include question file='question-01' %} Multiple-choice questions If your question file includes a correct value in its YAML frontmatter, it will be rendered as an interactive multiple-choice question. MCQ files must include the correct answer option(s) in their YAML frontmatter to be rendered as interactive MCQs in web and app output. They should include feedback for each answer option. Here is an example of an MCQ markdown file: --- correct: 1, 4 --- Which of the following is true? - You should not pick a fight with a Wookiee. - Picking fights with Wookiees is safe. - Wookiees love being laughed at. - Wookiees make loyal companions. {:.mcq-options} * Wookiees can tear your arm off. * Wookiees don't shy away from a fight. * Wookiees are proud and sensitive. * Wookiees have been known to stick by their friends even in the worst circumstances. {:.mcq-feedback} Your question can have more than one correct answer. Note: The list of answer options has the class .mcq-options. The list of feedback, in order to relate the the answer options, has the class .mcq-feedback. If you have a regular list, too, immediately before one of these lists, separate it with a ^, which is a kramdown end-of-block marker. It tells kramdown the two lists above and below it are not one list. Quizzes You can gather several questions into a quiz using the include quiz tag: {% include quiz questions='question-01, question-02, question-03' %} If each question file has a marks value in its YAML frontmatter, a quiz will add up those marks and show the total. Applying classes to quizzes You can apply a class to a quiz in the include quiz tag. For example, to make a quiz your ‘featured quiz’, you might use a featured-quiz class: {% include quiz questions='question-01, question-02, question-03' class='featured-quiz' %} Also, if you want all the questions inside a quiz to have a particular class, you can set that, too, like this: {% include quiz questions='question-01, question-02, question-03' question-class='my-featured-questions' %} Quiz groups You can collect quizzes into quiz-groups, for instance to create exam papers. To create a quiz-group, wrap quizzes in a <div class='quiz-group'></div>. A quiz group treats each quiz as a section, and numbers their questions consecutively across all quizzes in the quiz-group. This is useful for creating exam papers, where questions must numbered consecutively across sections (which are quiz-groups). You can create a quiz group in one of two ways: If an entire markdown file represents a quiz group (e.g. it’s a single exam paper), add quiz-group to the style: values in the file’s YAML frontmatter. For instance: --- style: quiz-group --- (Technically, the values in style become classes of your output HTML’s body element.) If only a part of a markdown file represents a quiz-group, wrap the quizzes in a div element with a quiz-group class. Also add a markdown='1' attribute so that markdown in the div is processed into HTML as usual: <div class='quiz-group' markdown='1'> ## Section 1 {% include quiz questions='question-01, question-02, question-03' %} ## Section 2 {% include quiz questions='question-04, question-05, question-06' %} </div> Fill-in-the-blanks A simple kind of question is a fill-in-the-blank or gap-fill, where users can select an answer from options in a dropdown list. You can add one anywhere with the include select tag, like this: {% include select options='apples | pears | oranges' correct='apples' %} By default, in web and app outputs, users will get feedback on whether their selections are correct or not. In PDF, you will see an underlined space to represent the blank. In epub, the options should be visible (depending on the ereader) but will not get feedback unless you add the select-list.js script to your epub scripts."
});
index.addDoc({
    id: 27,
    title: "Redaction – The Electric Book template",
    content: "Redaction You can redact text and images in PDF output, and turn that redaction on or off. For instance, this is useful for textbook publishers in South Africa, where publishers need to redact mentions of their and the authors’ names before their books are reviewed by government. To redact content in PDF: Add the redact class to any element you want to redact. Set redact: true in _data/settings.yml. The redaction turns images black and text to series of xes and a few other letters. The aim is to completely replace the original text, but as closely as possible retain text flow, which might have been manually refined. Note that this is only effective for PDF outputs. While text and images will appear redacted in web, epub and app outputs, the redaction there is done only by client-side Javascript, so it’s only a thin layer of redaction that can be easily turned off, and won’t work at all without Javascript. Should the need arise, in future we might add a preprocessor step (e.g. using gulp) to redact the HTML in the build process."
});
index.addDoc({
    id: 28,
    title: "Show-hide buttons – The Electric Book template",
    content: "Show-hide buttons Sometimes you want to hide some content until a user clicks a button. For instance, you might want to hide the answer to a question until the user clicks a ‘Show answer’ button. To hide any element, add a .show-hide class to it, For instance: The answer is 42. {:.box .show-hide} The answer is 42.Show You can set the default text on the button in _data/locales.yml at input > show and input > hide. And you can override this text for a specific button by adding a data-show-text and/or data-hide-text attribute to the element you’re hiding. For example: The answer is 42. {:.box .show-hide data-show-text='The answer to everything is...' data-hide-text='Thanks for all the fish.'} The answer is 42.The answer to everything is... This works in web and app formats by default. The show-hide class has no effect in PDF and epub outputs. To enable this behaviour in epub output, you will need to copy the assets/js/show-hide.js to your epub scripts."
});
index.addDoc({
    id: 29,
    title: "Slides – The Electric Book template",
    content: "Slides Figures in slide sets use the same syntax as regular figures, except: each slide also has a title title='' each slide has a slide-caption instead of a regular figure caption you need an extra figure with class='summary' added. This can be the first figure in a slideline. This is the figure that is included in the print edition in full, and does not appear on the web. In print, the other slides appear as the text of their title and slide-caption. In markdown, we create a slideline by grouping a sequence of figures in a div. Before the first figure add <div class='slides'> and after the last figure add </div> The template’s interactive slides were developed in partnership between The CORE Project and Electric Book Works."
});
index.addDoc({
    id: 30,
    title: "Tables – The Electric Book template",
    content: "Tables Complex tables with HTML Table captions Kramdown (and most markdown variants) can only handle very simple tables. For these you can create the Markdown layout manually. See the chapter on markdown for guidance on formatting simple tables. You can also use online tools to convert tables into a markdown format. Senseful. For instance, working from InDesign: Click and drag over some cells in the InDesign table (not the header row). Then Ctrl+A to select the whole table. Ctrl+C to copy, then paste into a blank spreadsheet. Select all the relevant cells in your spreadsheet, and copy. The table text is now on your clipboard, with the cells separated by tabs. Paste into the online Format Text as Table Input field. Click ‘Create Table’. (The default settings are usually fine. Play with them only if you need to.) Copy the Output and paste it into your markdown file. Ascii Table: Paste tab-delimited table text Select ‘GitHub Markdown’ for the output style Copy the resulting plain-text table into your markdown. Table formatting in markdown can differ between flavours of markdown. You may need to tweak it. For instance, Senseful starts some table borders with + where kramdown needs a |. In that case, manually change the starting + in any row with a |. Complex tables with HTML For complex tables – anything with merged cells, for instance – you must create an HTML table and paste that HTML (from <table> to </table>) into your markdown files. It’s easiest to use a WYSIWYG HTML editor. For instance, Dreamweaver lets us paste a table from a formatted source like Word or LibreOffice, and then clean up the HTML easily before pasting the whole <table> element into our markdown document. Table captions In markdown, add {:.table-caption} in the line immediately after a table caption paragraph. This applies the class table-caption to the paragraph, which the theme can style. For instance, the template’s default styles avoid a page break after the caption, before the table. (According to publishing best-practice, table captions must always appear above tables, not after them.)"
});
index.addDoc({
    id: 31,
    title: "Video – The Electric Book template",
    content: "Embedding video Setup Cover images Custom classes Descriptions Links Subtitles Start at a specific time Video options Legacy youtube and vimeo tags Other video services You can include any iframe in markdown to embed a video. The Electric Book template makes it especially easy to embed videos from YouTube and Vimeo: Setup Find the video’s ID. On YouTube, this is a code in the URL that looks like this: MqlyxZiDoOA. On Vimeo, it’s a string of numbers in the URL like this: 75421736. In your markdown, use the ID: {% include video id='MqlyxZiDoOA' %} YouTube is the default, so for Vimeo you also need to specify the host: {% include video id='75421736' host='vimeo' %} This will embed the video like this for YouTube: and this for Vimeo: Cover images In web output, when a user is online, the HTML will automatically fetch the video cover (aka thumbnail) image for YouTube videos. This isn’t currently possible with Vimeo. So it’s best to add an image yourself, and specify it as the cover image by adding an image parameter, like this: {% include video id='MqlyxZiDoOA' image='peppa-pig.jpg' %} Save the image file to your book’s images folders in the usual way. Custom classes You can also add a class to the video to target it with custom CSS, like this: {% include youtube id='MqlyxZiDoOA' class='kids-video' %} Descriptions You can add a description that will appear as a caption below the video like this: {% include youtube id='MqlyxZiDoOA' description='Daddy Pig's puddle-jumping world record is broken! Can he win it back?' %} Links You can specify a clickable link to a video. A link is important for screen PDFs and epubs, where users need to click to see the video in their web browser or video player. {% include youtube id='MqlyxZiDoOA' description='Daddy Pig's puddle-jumping world record is broken! Can he win it back?' link='https://www.youtube.com/watch?v=MqlyxZiDoOA' %} If you don’t include a link, one will be generated automatically. Subtitles If the video you’re embedding has subtitles, you can turn them on by adding subtitles='true' to your include tag: {% include youtube id='MqlyxZiDoOA' subtitles='true' %} By default, the language used will be the language of the book you’re editing. So, if you’re editing the French translation of a book, and the video has French subtitles, those will be shown. If you want to specify that subtitles should show in a particular language (that the video actually supports), then add language='xx', too, where xx is the language code. For instance, to specify that German subtitles should show, even on an English book page: {% include youtube id='MqlyxZiDoOA' subtitles='true' language='de' %} These subtitles and language options currently only work with YouTube videos. Start at a specific time You can set a video to start at a specific time by adding a start='' to the include tag, where you specify the number of seconds in to start. E.g. two minutes and seven seconds would be 127 seconds: {% include youtube id='MqlyxZiDoOA' start='127' %} Video options If you want to give users other options for viewing a video, or links related to the video, you can add options='', and include your options as markdown. This works in web and app outputs currently. For example, since YouTube isn’t available in some countries, you may want to provide a link to another host or a download. Remember to start markdown on a new line to avoid having indentation trigger a code block: {% include video id='z2hj_zfrG6g' options=' * [Bilibili](https://www.bilibili.com/video/BV1Wk4y127um) * [Download](https://example.com/downloads/cook.mp4)' %} You can change the phrase ‘Other video options’ in _data/locales.yml. By default, the video options do not show in PDF outputs. You can override this in your custom PDF CSS with .video .video-options { display: block; }. Legacy youtube and vimeo tags Instead of specifying a host='' you can also use the host-specific tags include youtube or include vimeo. That is, instead of {% include video host='vimeo' %} you can use {% include vimeo %} And instead of {% include video host='youtube' %} you can use {% include youtube %} Other video services If you’re embedding from any other service, instead of using our include tags: use their standard embed iframe try to select a width of around 850 px add style='max-width: 100%;' add class='non-printing' to the iframe tag to hide it from PDF output."
});
index.addDoc({
    id: 32,
    title: "Adding a favicon – The Electric Book template",
    content: "Adding a favicon To add a favicon (the icon in your browser tab in web output), add a PNG image called favicon.png to the assets/images/web folder. Or, even better, add it to the assets/images/_source folder and process the images in assets using the output script. When it asks for the book/folder you’re processing, enter assets. We recommend using a very small, simple image, 64px square."
});
index.addDoc({
    id: 33,
    title: "Adding image files – The Electric Book template",
    content: "Adding image files Store the original, master versions of your images in your book’s images/_source folder. You can then have the template generate versions optimised for each output format. These are stored in the print-pdf, screen-pdf, web, epub and app folders alongside _source. Each format-specific folder should then contain the same set of images, saved appropriately for each format. For instance, epub images might be full-colour at 96dpi and up to 800 pixels wide; while print-pdf images might be in greyscale, 300dpi and 2400 pixels wide. Images that must be available for pages outside of a book (e.g. on your project’s landing page) should be stored in assets/images/_source and converted in the same way. For converting images, see Automating image conversions."
});
index.addDoc({
    id: 34,
    title: "External media – The Electric Book template",
    content: "External media Setting external-media paths Structuring external-media files Epub and app output Translations Local media Setting a filesystem path Setting a local URL If a large number of images makes your project too big, you can store your images in a separate repo and serve them on a separate server for PDF and web output. There is a template repo for external media at github.com/electricbookworks/electric-book-media. Setting external-media paths You set the full URL for the remote-media location in _data/settings.yml. The remote-media paths must be full URLs. For example: remote-media: live: 'https://media.superpotatoes.com' development: 'https://dev.superpotatoes.com/media' To disable external media, comment out the relevant settings, e.g. to only use remote media for development, but not for a live website: remote-media: # live: '' development: 'https://dev.superpotatoes.com/media' Structuring external-media files At the remote-media domain, the paths to media should match the paths to that media in this project. For example, if a project called superpotatoes contains two books, mondial and fabula, the remote-media URL might be https://media.superpotatoes.com. And on that media server, web images would be stored in https://media.superpotatoes.com/mondial/images/web and https://media.superpotatoes.com/fabula/images/web. Images inserted by CSS (e.g. background-image files) cannot be in external media, because their paths are fixed in CSS. So do not move these to the external media location. Epub and app output External media does not work for app or epub output. For apps with enough images to warrant external media, it’s recommended that you use a separate Cordova-based repo for your app, into the www folder of which which you simply copy-paste your app-ready HTML. Translations When using remote-media, translations must have their own image files in their translation subdirectories (e.g. https://superpotatoes.com/mondial/fr/images/web). That is, unlike local images they cannot inherit their parent language’s images in the absence of their own images folder. Local media Remote media works well for web output, but it means you have to be online, and can make PDF output very slow, because Prince has to fetch every image over the Internet. For faster PDF output you can tell the system to use images on your local machine instead by setting a local-media path, in addition to remote-media. When a local-media path is set, PDF outputs will use that path to images, so that Prince does not have to fetch every image over the Internet. The local-media path can be set in two ways: As a path on your computer’s filesystem, relative to the _site folder. As a URL served locally, by a webserver running on your machine. Setting a filesystem path A relative filesystem path might look like this: local-media: development: '../../superpotatoes-media' Note: Setting a live local-media path has no effect. Local, external media is only useful for development anyway. The development build is the default build type. A live build only applies to web builds. We set build: live in _config.live.yml, which is generally only used for building live websites. We recommend that you store your local copy of the external-media directory alongside the main project repo directory, to make the filesystem path to the local images simple. To use external media from a directory alongside the main project repo, then, you would write the path to go up two levels (../../) and into the external media directory, as shown above. Setting a local URL Web output cannot use a relative filesystem path, because a webserver cannot see outside of its own root directory on your filesystem. So you can use a webserver running on your own machine for offline development, e.g. local-media: development: 'http://localhost:5000' If you use the electric-book-media template for your external media repo, the OS-specific run- scripts there will launch a local server running at that address. You can run it at the same time as your local Jekyll instance of your book project."
});
index.addDoc({
    id: 35,
    title: "Automating image conversions – The Electric Book template",
    content: "Automating image conversions Using the output script Using gulp directly Image settings Color spaces Turning off image modification Advanced: shorthand with YAML anchors and aliases You can automate the conversion of images to various outputs. Then you only need to put high-res versions of your images in images/_source and run the automatic conversion to populate the images for all output formats. This will automatically optimise, convert and save your images to the output folders, including specifying the correct colour profiles and creating multiple image sizes for web output. Note: To do this on your computer, you need to have GraphicsMagick and Node installed, and to have run npm install in the project root to install the node_modules. Using the output script Run the output script with the relevant options, e.g. npm run electric-book -- images for images in the default book folder. npm run electric-book -- images --book samples will process images in the samples book folder. The options --folder and --dir are aliases for --book. So this is exactly the same as the above command: npm run electric-book -- images --dir samples And this: npm run electric-book -- images --dir assets will process images in the assets folder, which is for images that must be available to pages outside of books, such as your project’s landing page. Using gulp directly Instead of using the output script, you can also use gulp directly from the command line. By default, gulp will convert the images in your book/images/_source folder. To convert the images in a different book folder’s images/_source, say for my-potato-book: gulp --book my-potato-book Note: You can also use --folder instead of --book. They have the same effect. ‘Folder’ can be easier to remember when processing images in assets/images. If you’re processing image files in a translation subdirectory, specify the language by its code. E.g.: gulp --language fr You can also combine these: gulp --book my-potato-book --language fr Image settings This automatic image processing will apply the same size and colour profiles to all the images for a given output format. For example, all print-PDF images will get a CMYK colour space by default, and remain a large size for high-quality printing. Screen-PDF images will get an RGB colour profile, and have their image size reduced. You might want to change the color space of specific images in, say, print-PDF output. Or you might want to exclude an image from any optimisation or modification; for example, you might have a hand-coded SVG that should not be changed at all by our default optimisation settings. You can apply these settings in _data/images.yml. Color spaces For example, to make one image grayscale in print-PDF: samples: - file: 'fradkin-1.jpg' print-pdf: colorspace: 'gray' To change a setting for all images in a format, you can use ‘all’ instead of the image filename: book: - file: 'all' print-pdf: colorspace: 'gray' Note that this does not change SVGs. SVGs are processed differently from bitmap-based images like JPGs. If you want to make SVGs grayscale, you may need to use an SVG filter (here’s an example) or use print-PDF-specific CSS. Turning off image modification To avoid modifying an image at all for a given format, you give that format a modify: no value, like this: samples: - file: 'fradkin-1.jpg' print-pdf: modify: no Now the output in print-PDF will be the same as the image in the _source folder, with none of the default print-PDF modifications. You can also use all to set an option for all formats. samples: - file: 'fradkin-1.jpg' all: modify: no Here is a shorter way to set modify: no for all formats: samples: - file: 'fradkin-1.jpg' modify: no Note that SVGs are treated differently to bitmap-based images like JPGs. We use the same SVG for all output formats. So, if modify: no is set for any format for an SVG file, it will not be modified for any output formats. E.g. here naples.svg will not be modified for any output format, not just for print-pdf, even though that’s what the setting looks like: samples: - file: 'naples.svg' print-pdf: modify: no Advanced: shorthand with YAML anchors and aliases Sometimes, you need to apply different settings per output format, and repeat those settings for many images. For instance, perhaps fifty of your images should be optimised for print-pdf and web output, but not for screen PDF, epub or app. YAML’s anchor/alias syntax gives us a concise way to define settings once and reuse them for many images. You define the settings once as an ‘anchor’, and then refer to that anchor over and over again. If you’re familiar with Javascript or Sass, think of the anchor as a function or mixin that you are invoking for each image. First, above your image settings in images.yml, define your anchor, e.g.: no-modifications: &no-modifications print-pdf: modify: yes screen-pdf: modify: no web: modify: yes epub: modify: no app: modify: no Note the &, which signals an anchor. Then, for each image, you insert the anchor with an alias like this: samples: - file: 'fradkin-1.jpg' <<: *no-modifications - file: 'fradkin-2.jpg' <<: *no-modifications And so on. This ‘merges’ the no-modifications anchor into each image’s settings. You can create your own anchors and give them any name instead of no-modifications, which is just a useful label in this case."
});
index.addDoc({
    id: 36,
    title: "Preparing images – The Electric Book template",
    content: "Preparing images Illustrator vs Inkscape Resolution Image styles Cover images We recommend consistently using JPG (saving large versions in the _source images folder and using automated image conversion to create versions in print-pdf, screen-pdf, web, app and epub) or SVG. We recommend JPG over GIF or PNG. One reason is that transparency (which JPG does not support) seems like a good idea until your end-user switches their e-reader to ‘night mode’, and your black line-art disappears into the background. More importantly, if you’re creating a print edition, PNG cannot work with CMYK color spaces. For some books we use SVG so that they scale beautifully but also remain small in file-size for web use. Note that if you’re deliberately going to create EPUB2, that standard does not support SVG and you may need to use EPUB3. Ensure that raster images, or raster/bitmap elements in SVG, are high-res enough for printing (e.g. 300dpi at full size). Illustrator vs Inkscape Different SVG editors treat image size differently. For instance, a 2-inch-wide image in Illustrator will appear 1.6 inches wide in Prince and Inkscape. Why? Because when creating the SVG’s XML, Illustrator includes its dimensions in pixels, and assumes a 72dpi resolution, where Prince and Inkscape follow the W3C SVG spec and assume 90dpi. As a result, images coming out of Illustrator always appear 80% of their intended size. So, if you’re creating images in Illustrator, set your image sizes to 125% of what you intend to appear in the book. That means: Check out Adobe’s guidance on saving SVGs. If your SVG files seem too big, read up on optimising SVGs, and/or (if you’re comfortable using Python scripts) run your SVGs through Scour. Resolution For SVG images, note that the editor you use will determine underlying resolution. Illustrator uses 72dpi, and Inkscape 90dpi. We favour and assume 90dpi, but can rescale SVG images with our stylesheets just in case. For JPGs, we often use 300dpi and image quality of 100%/12/maximum for _source images. Our automated image conversion then provides for excellent print quality while keeping file sizes sensible for screen delivery. Note: To get a 200dpi JPG that is 115 mm wide, the image must be 906 pixels wide. (115mm is 4.53 inches, which contains 906 pixels at 200 pixels per inch, aka 200 dpi.) Image styles We like these approaches to artwork, where possible: Use the same font and size for all labels Fit artboards to artwork bounds; there should be no white space around the art in an image. (Control space with CSS styling.) Cover images Save the front-cover image as cover.jpg."
});
index.addDoc({
    id: 37,
    title: "SVG processing – The Electric Book template",
    content: "SVG processing Default optimisation Manipulating SVGs automatically Single-image functions Global functions This is a technically advanced section for those who need to grapple with how SVGs are processed. Also see the ‘Settings’ section in Setup for how SVGs are injected into web pages. Default optimisation Our built-in image-preparation process automatically optimises SVG images, for instance by removing unnecessary data from their code. This happens when you run the ‘Convert source images to output formats’ option in the output script. We use a library called SVGO for this optimisation. SVGO has many configuration options. We’ve carefully preset options based on our experience, and they are written into the images:svg task in gulpfile.js. If you need to change them, tread carefully and be careful not to overwrite your changes if you update gulpfile.js (e.g. by copying the latest version from the template or another project). Manipulating SVGs automatically Sometimes you need to make specific and/or manual changes to SVGs. For instance, we like to include Google Fonts CSS in SVGs so that, at least when you’re online, the fonts in an SVG still load even when that SVG is viewed outside of its book web page (e.g. opened in a new tab). This can be tedious to do manually, or impossible to do in tools like Adobe Illustrator. Or the SVGO optimisation process breaks your manual changes. So, the Electric Book template includes a way for you to write Javascript functions that manipulate your SVGs for you during image processing. These functions run after SVGO optimisation. These functions are in scripts saved to book specific folders in _tools/gulp/images/functions. You can create one file and function per SVG image, or one file and function that applies to all SVGs images in a book. Single-image functions Add a file for the relevant SVG to the _tools/gulp/images/functions folder, in a subfolder with the same name as the image’s book directory. Its filename should be identical to the image filename, but with: spaces removed underscores instead of hyphens underscores instead of full stops a .js file extension. For example, naples_svg.js will contain a function that runs on the naples.svg file in the samples book. It should be in _tools/gulp/images/functions/samples. Behind the scenes, the function will be run by gulp-edit-xml, which parses SVG files as Javascript objects. For more detail on this approach and syntax, see the docs for xml2js. In particular, note that: you refer to your SVG as xml in your function. your script must include an exports statement after the function. E.g. exports.naples_svg = naples_svg; Here is a full example of a file that would be saved as _tools/gulp/images/functions/naples_svg.js, and which inserts a font-face import into an SVG. (Note that this function will entirely replace any existing <style> element in the SVG.) function naples_svg(xml) { xml.svg.defs = { style: '@import url('https://fonts.googleapis.com/css?family=Asap:400,400i,600,600i');' }; return xml; } exports.naples_svg = naples_svg; Global functions You can also create one function per book that will apply to all SVG images in that book. You need to name it in the same place and format as above, but with the word ‘all’ instead of the filename. E.g. in the samples book, the script would be saved as all_svg.js, and the function would be called all_svg: function all_svg(xml) { // logic here return xml; } exports.all_svg = all_svg;"
});
index.addDoc({
    id: 38,
    title: "Electric Book documentation – The Electric Book template",
    content: "Electric Book documentation Quick start These docs explain how to set up the Electric Book template, how to edit book files, and how to output books. The template includes these docs, which you can turn off in _config.yml. If you are using the Electric Book Manager, you may also need the Electric Book Manager documentation. These docs are a work in progress, and not everything is documented yet. You can contribute on GitHub, or let us know about problems by logging issues. About About the EBW Technical overview Setup Quick start Setting up your computer Setting up a book Settings PrinceXML settings Project metadata Navigation and TOCs Translations File lists Tracking and analytics Search indexes Variants Updating project files Editing Markdown Content tags (classes) Images Tables Figures Slides Footnotes, endnotes and sidenotes Hyphenation Mathematics Poetry Indexes Video Questions and quizzes Redaction Show-hide buttons Images Adding image files Automating image conversions External media Preparing images SVG processing Adding a favicon Layout Design Page numbers Web and app pagination Web and app content accordion Colour profiles Output Web output PDF output Epub output App output Word output Advanced Web monetization Packaging the project Using Javascript Troubleshooting Troubleshooting and tips"
});
index.addDoc({
    id: 39,
    title: "Colour profiles – The Electric Book template",
    content: "Colour profiles Just as different people see colours differently, different machines display or print colours differently. We manage this variation with colour profiles: computer-readable files (usually with a .icc file extension) that define how a machine should process the colours in a document. For good printing and display, it’s important to use profiles so that colours don’t vary among machines and printers. We use colour profiles in two places: When converting images. When generating PDFs. The template provides a number of profiles for different uses. They are in _tools/profiles, where you can add your own profiles, too. The profiles then used for automated image conversion are named in gulpfile.js. It takes technical know-how to edit a Gulp file, but you can find the .icc filenames in the existing Gulp file and carefully change them if you need to. You can change the profile for a PDF in a book’s styles/print-pdf.scss and styles/screen-pdf.scss files. In high-end colour printing (e.g. photography or graphics arts), colour profiles should be discussed with your printer. The printer should provide a colour profile file suited specifically to your project and the printing press they will use to print it. When printing in black and white, the darkness or lightness of images can be heavily influenced by the colour profile used. Here it is also a good idea to get an .icc file from your printer that’s designed to be used with their particular press or digital printer. That said, the profiles included here should be suitable for most uses: The PSO profiles are provided by eci.org. The sRGB profile is from color.org. The grey profiles were provided kindly by digitaldistributors.co.za. sRGB_v4_ICC_preference_displayclass.icc is for images and documents to be viewed on screens. Avoid using it for print PDF output. PSOcoated_v3.icc is for printing in full colour on coated paper. PSOuncoated_v3_FOGRA52.icc is for printing in full colour on uncoated paper. Grey_Fogra39L.icc is for printing in black and white. It follows ISO Curve B as per ISO 12647-2:2007 (M0 measurement condition). Grey_Fogra52L.icc is also for printing in black and white, and is newer than Fogra 39. It follows ISO Curve A as per ISO 12647-2:2013 (M1 measurement condition)."
});
index.addDoc({
    id: 40,
    title: "Web and app content accordion – The Electric Book template",
    content: "Web and app content accordion Activating the content accordion Setting the accordion heading level A book chapter can be much too long for reasonable reading on screen. Also, a chapter might contain many images, and downloading them all every time you read just part of the chapter could use up a lot of a user’s data. For these reasons, you can turn on a content accordion for web and app pages. The content accordion breaks up your page into sections, and collapses them, showing only each section’s heading. To open or close a section, a user just clicks on the heading (or the toggle icon beside it). The content accordion only works in chapter files (i.e. markdown files that do not have a style set in their YAML frontmatter, or have it set to something other than chapter, such as frontmatter). Technical note: By default, when you open an accordion section, other open sections stay open. If you would like only one accordion section to open at a time, so that opening a section closes the others, set accordion-auto-close: false for web and/or app output in _data/settings.yml. Activating the content accordion To turn on the content accordion, change the value of accordion in _data.settings.yml to true: accordion: true This is set separately for web and app outputs. So you’ll find in settings.yml that you can set accordion in two places. When the accordion is on, you may want to turn it off for some pages (e.g. a chapter with a few headings but very little content), or have it start fully expanded. To do this, set accordion to none or expand in the page’s YAML frontmatter (the part between the ---s at the top of the file): accordion: none or accordion: expand Setting the accordion heading level By default, the content accordion collapses on h2s. You can change this in _data/settings.yml by setting the accordion-level."
});
index.addDoc({
    id: 41,
    title: "Design – The Electric Book template",
    content: "Design books Edit project-wide styles Edit a book’s styles The design of your books is created in CSS stylesheets. These are written in Sass or CSS syntax. Each output format has a dedicated stylesheet: print-pdf.scss screen-pdf.scss web.scss epub.scss app.scss By default, the screen PDF inherits its styles from the print PDF design, except for trim and crop marks (none on screen PDF) and the colour profile (RBG in screen PDF, CMYK in print PDF). Also by default, the app inherits the web styles. Some aspects of design are easy for non-technical users to change. Some advanced design features need to be coded by an experienced CSS developer. Each project comes with a library of predefined styles in the _sass/template folder. Generally, you should not change these styles. Rather, extend and override them with your own theme, which you define in the files in _sass/theme. That’s where you set or change styles that affect all the books in your project. Then, each book’s styles can build on or override those project-wide styles in the .scss files in its own styles folder (e.g. book/styles/web.scss). Electric Book Manager users By default, you cannot edit the project’s predefined styles in the Electric Book Manager. Files that users cannot see in the EBM, such as advanced technical files, are included in the ignore list in /_prose.yml. Edit project-wide styles Usually, you’ll define styles for all the books in your project by editing only the files in _sass/theme. Any colours, variables, @imports or CSS/Sass rules there will override the template styles. All style variables (such as $page-width) should be set in _sass/theme/*-variables.scss, where * is the format you’re working on. It’s best practice to include the !default flag on your variable values here, so that you can still override them per-book if necessary. Similarly, all @imports, such as Google Fonts, should be included in _sass/theme/*-imports.scss. Similarly, all new CSS/Sass rules should be added to _sass/theme/*-rules.scss. It’s best practice to keep your rules organised by creating new partials (new .scss files) in _sass/theme/partials and @includeing them here. This file structure also makes it possible to add a pre-built theme easily by copying the theme files to _sass/theme. Edit a book’s styles This is for when you want one book in your project to have different styles to the other books. Go into the book’s folder, then into styles, and open the .scss file for the output format that you want to edit. For example, to change the print-PDF styles for the book in the book directory, edit book/styles/print-pdf.scss. Many of a book’s design features are set as variables, which start with $ signs. E.g. $page-width. Set your desired values by defining variables. For instance, you can change the values for page size, colours, running heads, and so on. All available variables are defined, with defaults, in _sass/template/print-pdf.scss (and similarly for other output formats). If you know how to write CSS or Sass, add your own custom styles at the bottom of the book’s relevant .scss file. Output the relevant format to see how your changes look. If the output fails, you may have used invalid CSS or Sass syntax. For more on editing Sass, see sass-lang.com/guide."
});
index.addDoc({
    id: 42,
    title: "Page numbers – The Electric Book template",
    content: "Page numbers In print output, the YAML header’s style setting affects how the pages are numbered: all book parts set to style: frontmatter have roman-numeral page numbers; all book parts set to style: chapter (or, since that’s the default fallback, all those without a style setting) have decimal page numbers; other book parts (e.g. style: copyright-page) have no page numbers (nor any other headers and footers). So if you use frontmatter on a book-part (e.g. for a preface, foreword or acknowledgements section), by default it will have roman-numeral page numbers. And when the first chapter starts, that chapter will have decimal page numbers. However, the page numbering will increment consecutively from roman to decimal, unless you tell PrinceXML to start from 1 at the first chapter. That is, ‘ix, x, 11, 12’. To reset the numbering to 1 at the start of the relevant chapter, you have two options: Add the page class .page-1 to the first element (e.g. the first heading) of the first chapter. In markdown, you do that with the tag {:.page-1} in the line immediately after the heading. This only works if that element is not set to float in the CSS. (That is, the element must appear in the normal flow of text.) Add page-1 to the style YAML setting, in addition to specifying chapter, not overriding it. That is, the first chapter in your book should have the YAML style set as: style: chapter page-1."
});
index.addDoc({
    id: 43,
    title: "Web and app pagination – The Electric Book template",
    content: "Web and app pagination Your web or app outputs may need links on each page to the next or previous pages. For instance, in a novel users will want to click to the next chapter when they finish a chapter. This is call pagination. It only applies to web and app outputs (not epub or PDF). Pagination is created by the pagination include, which adds previous and next links. So you can manually add pagination links anywhere by using the tag {% include pagination %}, but this is already included by default in all web and app outputs already, at the end of the page. By default, pagination is added at the end of book files (in the default layout). It can be turned off in settings.yml in the pagination section of web and app settings. The pagination format can also be changed there to use ‘Next’ and ‘Previous’, to use page titles, or to use arrows. Arrows are the default. By adding a ‘direction’ parameter to the include tag, you can show only previous or next links. E.g. {% include pagination direction='next' %} will only output ‘next’ links. The order of pagination is determined by the files list for each format in a book’s YAML file in _data/works."
});
index.addDoc({
    id: 44,
    title: "App output – The Electric Book template",
    content: "App output Android Generating a keystore On app prep and signing Testing iOS Windows Troubleshooting Add remote media Run npm run electric-book on the command line to see app-related options. App output and this documentation is still experimental and a work in progress. It requires that you have Apache Cordova installed, and Android Studio (for Android apps), X Code (for iOS apps) or Visual Studio (for Windows apps). Android The default output will be a debug version of your app for local testing only. To create a signed release, create or check that you have a secrets.yml file in _data. Do not commit secrets.yml (or any file you link to inside it, like a keystore) to version control. Note: If you’re building a large app that requires an expansion file for Google Play, see our template for creating an Android app with an expansion file. Generating a keystore If you need to generate a keystore, the easiest way to do this is with Android Studio. Open the project (the repo) in Android Studio, then go to ‘Build > Generate signed APK…’. Fill in the prompts, and your .jks keystore will appear where you’ve defined there that it should. If you’re working on a project that already has an app, a keystore probably already exists for your project, and you should use that one. Its password and the password for the key it contains should be stored somewhere safely for you to find. Note: The first time you set up a new app, you’ll go to ‘App signing’ on Google Play for your certificate. Google Play will say that you will get a certificate once you’ve uploaded an APK. You worry, because you wonder whether Google will accept an unsigned APK. So you upload an insigned APK and Google Play says that it can’t use that because it’s unsigned. You are rightly confused by this. Then go back to ‘App signing’ and, voila, magically there is now a certificate ready for you to use to sign your APK. On app prep and signing For each application, the Google Play service automatically generates a 2048-bit RSA public/private key pair that is used for licensing and in-app billing. The key pair is uniquely associated with the application. Although associated with the application, the key pair is not the same as the key that you use to sign your applications (or derived from it). … To add licensing to an application, you must obtain your application’s public key for licensing and copy it into your application. – Google Developer guidelines These are useful resources: Preparing the app Signing the app Launch checklist App signing with Google Play Signing Testing Install the android-debug.apk* as an app normally. (I.e. download it to your phone over a network or email, and open the APK file on the device to install it.) Don’t open the app yet. * Note that signed apps (android-release.apk) can’t be tested locally, presumably because once signed the app is only allowed to use expansion files downloaded securely from Google Play. Your app Should Just Work. iOS This is work-in-progress. See ‘Add remote media’ below before using the script. We’re still working on the signing process, which is done in X Code. Windows You must have Visual Studio installed with all requirements for Cordova Windows Apps installed. The basic process will be: Create a listing in the Microsoft app store. (Once-off.) Check that google-play-expansion-file is not enabled in settings.yml. Build app HTML with Jekyll. Add the Windows app platform files with Cordova. Build the app for release with Visual Studio. Here are the detailed steps: Create a listing in the Microsoft app store. Some of the forms you need to complete may only work in Edge (!). If this is already done, perhaps check that it’s up to date and add any release notes. Create or check that you have a secrets.yml file in _data with the windows package-identity-name, publisher-id and publisher-display-name filled in. (And remember never to commit secrets to version control.) You get the package identity name from the Windows & Xbox dashboard on the Microsoft website, under ‘Product management > Product identity’. You can get the publisher-id value there from your Windows developer settings. If you’re creating a one-language translation app, this should have a section for the language. E.g.: android: app-path-to-keystore: 'path/to/keystore' app-keystore-password: 'passwordhere' app-key-alias: 'keyaliashere' app-key-password: 'keypasswordhere' ios: development-team-id: 'YOURTEAMID' package-type: 'development' windows: package-certificate-key-file: '' package-thumbprint: '' package-identity-name: 'FireandLion.TheEconomybyCORE' publisher-id: 'CN=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX' publisher-display-name: 'Electric Book Works' fr: android: app-path-to-keystore: 'path/to/keystore' app-keystore-password: 'passwordhere' app-key-alias: 'keyaliashere' app-key-password: 'keypasswordhere' ios: development-team-id: 'YOURTEAMID' package-type: 'development' windows: package-certificate-key-file: '' package-thumbprint: '' package-identity-name: 'FireandLion.LconomieparCORE' publisher-id: 'CN=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX' publisher-display-name: 'Electric Book Works' Ensure that google-play-expansion-file-enabled is not set in _data/settings.yml (that’s only for Android). Use the output script to create the app-ready HTML only. If you’re creating a translation app, when the output script asks for extra config files, enter the relevant config file for that language. E.g. for French: _configs/_config.app.fr.yml If you’re using external media, copy the images from the remote media repo manually to _site/app/www/book/images (or the equivalent translation images folder; see ‘Add remote media’ below for more detail). At a command prompt in the repo root, run cd _site/app && cordova platform rm windows && cordova platform add windows && cordova build windows Open Visual Studio. From there, open the Cordova solution file (.sln) in _site/app/platforms/windows, and deploy and and build for your local machine to test. (You should be able to click the ‘► Local machine’ button in the toolbar.) We recommend building a Release version (not a Debug version) to test that the app works when fully signed. To do this: Associate the app with an app listing in the store. Right-click CordovaApp.Windows10 (Universal Windows) then select Store > Associate App with the Store… (You may only have to do this once.) Under CordovaApp.Windows10 (Universal Windows) open package.windows10.appxmanifest and add the language code to the ‘Default language’ field. You can also correct the description, which Visual Studio or Cordova aren’t getting right currently. Save the file. In the toolbar, select ‘Release’ instead of ‘Debug’ and select your computer’s architecture in the next box (usually ‘x64’). Then click the ‘► Local machine’ button in the toolbar. (Sometimes you get an error and have to enter the language again in the ‘Default language’ field. Then retry ‘► Local machine’.) If the process works and you’re on Windows, it should install the app to your computer, where you should open and test it. To prepare for the Windows store, use Visual Studio following the guidance in this article. In short, you will: Use VS’s Solution Explorer (a panel on the right, which you can show with View > Solution Explorer). Right-click CordovaApp.Windows10 (Universal Windows) then select Store > Associate App with the Store… and select the correct app that appears. This will sign the app with the correct certificate. (You may only have to do this once.) However, this unsets the default language that Cordova adds to non-release builds. So under CordovaApp.Windows10 (Universal Windows) open package.windows10.appxmanifest and add the language code to the ‘Default language’ field. You can also correct the description, which Visual Studio or Cordova aren’t getting right currently. Now create an app package upload file. Use VS’s Solution Explorer (a panel on the right, which you can show with View > Solution Explorer). Right-click CordovaApp.Windows10 (Universal Windows) then select Store > Create App Packages. When setting the version number, we use the same version as the project version in _data/project.yml, with an extra zero (e.g. if the project.yml version number is 1.0.5, your Windows app version number will be 1.0.5.0. In the ‘Generate app bundle’ listbox, select ‘Always’. Select the three architecture configurations (‘x86’, ‘x64’, and ‘ARM’) in the Select and Configure Packages dialog. Deselect the ‘Neutral’ option. Click Create and hold thumbs. Validate your app before you submit it to Dev Center. To validate, leave the Local machine option selected and click Launch Windows App Certification Kit. Run the app locally to check that it works. If you’re debugging, if your WACK reports show failures, the event logs are in C:ProgramDataMicrosoftWindowsWERReportArchive. Visual Studio saves the .appxupload file in _siteappplatformswindowsAppPackages. Remember to save the appxupload for backup, because it’ll get overwritten the next time you build. If the app release is working, upload it to the Dev Center. Troubleshooting UWP apps created by Cordova are still using the old/original Edge renderer i.e. not Chromium. The Microsoft Edge DevTools Preview app can be used to display a full devtools environment when debugging issues in the Windows app. To do this, run the Windows app you want to debug (this can be a local build as outlined in step 7 above), then launch the Microsoft Edge DevTools Preview app and ‘connect’ to the relevant app. Sometimes, when you build a release, you get a white screen when opening the app or any page inside it. This post explains a likely reason, which is that Visual Studio has changed the Package Name based on what’s in your Windows account, and it doesn’t match what you have in your app. To get it right, WindowsStoreIdentityName and WindowsStorePublisherName must be correct in the output config.xml, which is populated from what you have in _data/secrets.yml. Another possible reason for the white screen of doom is that Cordova is not setting the default language in package.windows10.appxmanifest, which is is supposed to read from config.xml. This seems to be because when associating the app with the store, Visual Studio unsets the default language. To fix this manually, open package.windows10.appxmanifest in Visual Studio and add the language code to ‘Default language’. Add remote media If your project uses remote-media (storing images in a separate project), you need to: Generate the app HTML using the output script. Manually, temporarily, copy /book/images/app folder from your external-media project to _site/app/www/book/images in your main project. If you’re building a translation, this should be the equivalent translation images folder, e.g. copy /book/fr/images/app to _site/app/www/book/fr/images for French. Build the app with Cordova by running this from the project root: cd _site/app && cordova platform rm windows && cordova platform add windows@6.0.0 && cordova build windows"
});
index.addDoc({
    id: 45,
    title: "Epub output – The Electric Book template",
    content: "Epub output Package files Metadata and settings Fonts Javascript SVG images Troubleshooting How epubs are generated You can create an epub by running the output script with the epub option, and your book folder for the book option, e.g.: npm run electric-book -- output --format epub --book great-expectations Before that will work, though, your project must be prepared correctly. Package files The template comes with package.opf and toc.ncx files in the book and samples folders. For epub output, every book you create should have at least the package.opf file in its directory. The toc.ncx is for backwards compatibility with older epub readers, and so some vendors require it. If you’re creating translations, you also need these files in the translation directory (e.g. at great-expectations/fr/package.opf). There is an example in the template’s samples book directory. Metadata and settings Your epub will build correctly only if you have provided sufficient, accurate information about it in its YAML file in _data/works/. You may also need to adjust some epub settings in _data/settings.yml. File list: you must list all the files to be included in your epub in the epub files section of your book’s YAML file in _data/works. Optionally, add guide names to key files in that list, e.g. '0-0-cover': 'cover'. There must be a nav section in your book’s YAML file in _data/works that points to at least one of your epub’s files. For epubs, every item in the nav must include a file (unlike web output, where label-only items are allowed). To tell the epub package where to find navigation, you must either: Define the epub’s contents-page item, as the content file that contains {% include toc %}, e.g. - contents-page: '0-3-contents', and/or Add the guide name 'toc' to the relevant file in the files list (e.g. - '0-3-contents': 'toc'). Since EPUB3 requires a nav element, it is mandatory to include {% include toc %} somewhere in your book, even if it’s a file, listed at the end of your epub files list, that contains only: --- --- {% include toc %} If your epub must not include a visible table of contents in its pages (e.g. for a novel with no chapter headings), you can hide it visually by setting hide-nav: true in the epub section of settings.yml. If you’re using a toc.ncx file for backwards compatibility with old ereaders, you have to be especially careful with how you construct your epub toc tree in the book’s _data/works file. In an NCX, you cannot have two items in nav pointing to the same target. So in your epub toc in your book’s YAML file in _data/works, you can’t have two items with the same file and id. To differentiate them, you add an id pointing to, say, a heading in the document to differentiate one target in the same file from another. Also, in an NCX, every item must include a link. So if an item in your toc has no link, and only children items, then in the toc.ncx the Electric Book will create a link for it. It will use the file (without the id) of its first child. So, to ensure that you don’t get duplicate links, you must add an id to that first child. This way, the parent will point to the file, and the first child item will point to the file + id. Fonts To embed font files in an epub (for @importing in your epub’s CSS), add the font files to _epub/assets/fonts. Font files stored anywhere else in your project (e.g. in the main assets/fonts folder) are not included in epub outputs. This ensures that the epub includes only those font files that are specifically required for your epub. Currently, the template does not support using different fonts for different epubs. If you are embedding fonts in your epubs, you must use the same ones for all your books. Javascript See the Javascript section for more detail. SVG images If you include SVG images inline in an epub file – that is, the <svg> markup itself is in the final HTML, not just linked in an <img src='*.svg'> element, you need to indicate that the file includes an inline SVG. This is because for an epub to be valid, the package.opf file must flag when a file includes inline SVGs. In order to do this, you must add this to the file’s YAML frontmatter: contains-svg: true If you have many files that contain SVGs, you can set this value as a frontmatter default in _config.yml. E.g. if all your projects’ title pages include inline SVG, you might include this in _config.yml: defaults: - scope: path: '*/01-title-page.html' values: contains-svg: true Troubleshooting Epubs are notoriously hard to make, largely because validation is so strict. Here are some tips that may be useful when troubleshooting. If you get errors from EpubCheck, the error will usually report the file name, line and column number of the content with the error. For instance, (1,4587) means that the error is on line 1, column (or character) 4587. Open the relevant file with the error in an editor that shows you the line and column/character position of your cursor. Then move your cursor to the relevant line and column number. When the error applies to a specific element, the column position is usually at the end of the offending element. If you’ve used named HTML entities like &nbsp; in HTML snippets, kramdown may not have processed those as markdown, and therefore will not have converted them to unicode characters. Named entities are not valid in epub 3, and you’ll need to replace them with their numeric equivalents, such as &#160; instead of &nbsp;. If you get errors about your navigation or TOC (nav), see the guidelines on Metadata and settings above. The toc.ncx file is particularly sensitive. Make sure your book has a package.opf file in its book directory. You can copy this from the Electric Book template. (It uses the epub-package include to generate the epub’s metadata and manifest.) How epubs are generated This is technical background on how we generate Electric Book epubs. It’s a two-step process. In Jekyll, using an epub config file (_configs/_config.epub.yml), we generate: the books, with each translation in a subfolder. Each book and translation has a package.opf file. an epub folder (as a Jekyll collection) containing a boilerplate META-INF folder, mimetype file, and mathjax folder; and optional js and fonts folders. In our output script: We copy the relevant book or translation folders from _site/book (or whatever folder book has been renamed to) into _site/epub. We retain the subdirectory structure of translations, except for the package.opf, which goes to the root of epub. We zip the contents of epub to _output/book.zip (where book may be a renamed book folder), and change the file extension to .epub."
});
index.addDoc({
    id: 46,
    title: "PDF output – The Electric Book template",
    content: "Print output Introduction Ingram Spark / Lightning Source output Refining print layout Faster print refinement Technical background: The output-to-PDF process You can create a PDF by running the output script with the relevant PDF option, and your book folder for the book option, e.g.: npm run electric-book -- output --format print-pdf --book great-expectations Introduction We use PrinceXML to turn Jekyll’s HTML into beautiful, print-ready book files. You can use the trial version to get your print output perfect before committing to the price. Our CSS files for print are tested with Prince. You can output print PDFs for sending to high-end printers, or screen PDFs, for digital distribution and reading on screen. Ingram Spark / Lightning Source output We often have to create print PDFs for Ingram Spark, Lightning Source and similar print-on-demand providers. Their needs are unusual and specific. In most cases, you can get a Lightning Source-compatible PDF by turning on the Lightning Source setting in your book’s print-pdf.scss file: $print-page-setup-lightning-source: true; This is set off (false) by default. This setting: removes crop marks sets bleed to 3mm makes sure page elements don’t bleed into the facing page’s bleed area. In addition, also in your book’s print-pdf.scss file, make sure your PDF profile is set to PDF/X-1a: $pdf-profile: 'PDF/X-1a:2001' Also see the section on colour profiles. Refining print layout You will doubtless want to refine your print layout by editing your markdown and adding custom CSS to the print.scss file for your book. For instance, to save widows and orphans, you can tighten letter-spacing by adding {:.tighten-5} and {:.loosen-5} tags to the lines after paragraphs. The number in the tag refers to how many thousands of an em you’re affecting letter-spacing by. For instance, {:.tighten-10} will tighten letter-spacing by 10/1000 em. In good typography, you should avoid tightening or loosening by more than 10/1000 wherever possible. And to add manual hyphens to improve spacing, use discretionary hyphens (aka soft hyphens) by adding the HTML entity &shy; where you want the soft hyphen. Faster print refinement When refining print layout (e.g. fixing widows and orphans), this happens: You edit the markdown. Jekyll generates new HTML. You convert to PDF in Prince. You open the new PDF to see your changes. There are two main delays in this process: Jekyll can take several seconds to regenerate the entire book (even with --incremental enabled). You have to click ‘Convert’ and Prince must regenerate the file(s). If your PDF viewer locks the file you’re viewing, you have to close it before generating a new PDF in Prince. To speed this up: Temporarily stop Jekyll generating any files you aren’t working on. In _config.yml, add a line that excludes those files. In this example, we exclude the CSS folder and all the book’s chapters, and then commented out with # the file we’re working on, so that Jekyll does regenerate that one file: exclude: [ css, book-one/0-0-cover.md, book-one/0-1-half-title.md, book-one/0-2-titlepage.md, book-one/0-3-copyright.md, book-one/0-4-contents.md, # book-one/1.md, book-one/2.md, book-one/3.md, ] An exclude list can also be written as a list: exclude: - css - book-one/0-0-cover.md - book-one/0-1-half-title.md - book-one/0-2-titlepage.md - book-one/0-3-copyright.md - book-one/0-4-contents.md # - book-one/1.md - book-one/2.md - book-one/3.md And you can use wildcards. For instance, here we exclude all the prelims and the whole of book-two, but not the first chapter in book-one: exclude: - css - book-one/0* # - book-one/1* - book-one/2* - book-one/3* - book-two* We should now only pass Prince the file(s) we’re actually generating. In the files list in the book’s _data/works file, comment out the lines listing files you’re not working on. If you’ve used Javascript not required for PDF, make sure it’s wrapped in a if site.output == '' tag that doesn’t include it in print-pdf output. Use a PDF Viewer that doesn’t lock the file. On Windows, Sumatra is perfect for this, unlike Acrobat and Windows Preview, which locks the file. If you edit/regenerate a PDF it has open, Sumatra will allow that to happen and will automatically reload the new file, at the same page you had open. On Mac OSX, Preview does the same, though we’ve found it doesn’t open the regenerated file to the page you were on, sending you back to the start of the book, which is a pain. A much better alternative on OSX is Skim, an open-source PDF reader. In its Preferences > Sync, set Skim to watch for file changes and update automatically. Also set PDFs to open to the last viewed page in Preferences > General. Technical background: The output-to-PDF process When Jekyll runs, it saves your book’s HTML files in the _site folder. The output script passes a list of HTML files into Prince. This list is generated from the files list in the book’s _data/works file for each PDF format, print-pdf and screen-pdf, in the order they’re listed. These lists must only include the files you need in the relevant PDF. For instance, you’ll usually leave out index files. And you’ll usually only include cover for the screen PDF. Prince will use your book’s print CSS file for the design, which Jekyll creates from the print-pdf.scss or screen-pdf.scss files in your book’s folder. Prince will save the PDF it creates to the _output folder. If you want to learn about using CSS to control print output using Prince, this is a great tutorial."
});
index.addDoc({
    id: 47,
    title: "Web output – The Electric Book template",
    content: "Web output Using GitHub Pages You can run the website version of your project by running: npm run electric-book -- output Using GitHub Pages If you activate GitHub Pages in your repository settings on GitHub.com, GitHub will host your built site for free. GitHub will assign the site a URL by default that looks like username.github.io/reponame. You can then set up a custom domain name by pointing your own domain at GitHub’s servers, and putting a CNAME file containing that domain name in your project’s root directory. See GitHub’s help docs for guidance on how to do this. In your Electric Book project, you must update the baseurl in _config.yml for this to work. If you are using a custom domain, the baseurl should be empty: baseurl: '' If you are using the username.github.io/reponame URL that GitHub provides automatically, you must set the baseurl to the name of your repo, with a slash in front of it. E.g.: baseurl: '/superpotatoes'. This is because your site is being served at a subdirectory-like URL, and all links in your book must be relative to that full URL. For instance, it must know that your website’s CSS is at farmerjane.github.io/superpotatoes/book/styles/web.css, and not farmerjane.github.io/book/styles/web.css."
});
index.addDoc({
    id: 48,
    title: "Word output – The Electric Book template",
    content: "Word output You can export a book format to Word by running the output script with the export command, and your book folder for the book option, e.g.: npm run electric-book -- export --book great-expectations Word output is a conversion to MS Word from one of the other output formats. Our script generates your book in a format you choose (e.g. the print PDF version) and then converts the content into MS Word files. Word output requires that you have Pandoc installed. If you have SVGs in your book, you should also have rsvg-convert installed. This usually comes with Mac and Linux already, and only needs to be installed separately on Windows."
});
index.addDoc({
    id: 49,
    title: "File lists – The Electric Book template",
    content: "File lists You must define which markdown files to include in a given output in the files: section of your book’s YAML file in _data/works. For example, to add files to include in a print PDF, you can follow the example of the template: under files:, add a hyphen followed by the filename in straight double quotes. This filename is the exact name of the file as it is in your project, but without a file extension. files: - '0-1-titlepage' - '0-2-copyright' - '0-3-contents' - '01' - '02' Epub file lists should also contain values that describe book parts as defined by the IDPF here. E.g.: files: - '0-0-cover': 'cover' - '0-1-titlepage': 'title-page' - '0-2-copyright': 'copyright-page' - '0-3-contents': 'toc' - '01': 'text' - '02'"
});
index.addDoc({
    id: 50,
    title: "Project metadata – The Electric Book template",
    content: "Project metadata Lots of crucial information (i.e. metadata) about your project is in _data/works. Before you can output your books you must make sure the files in _data/works contain the necessary information about them. For instance, you can’t output a PDF unless you’ve defined which text files should be included in that PDF. The Electric Book template uses the data in _data/works to populate and build navigation, tables of content, the parts of each book, translations, ISBNs and more. Tip: You can see the metadata generated for any given page by using the page-info include in its markdown. Simply add this tag to any page to generate a summary of its metadata: {% include page-info %}. YAML syntax The files in _data/works are written in a syntax called YAML, and have .yml file extensions. At its simplest, YAML is just a list of values like this: title: 'Great Expectations' creator: 'Charles Dickens' Importantly, you can nest information in YAML, so that information can be grouped. For example: products: print-pdf: format: 'Print' epub: format: 'Digital download' In YAML, indentation must be accurate and must be created with exactly two spaces, not tabs. If a YAML file contains errors in indentation (or other syntax), your project will not output anything at all. There are many subtle rules for structuring YAML, but if you just follow the existing structure in _data/works carefully, you’ll be fine. Here is a good tutorial on YAML, if you want to know more. There is more detail on editing the YAML files in _data/works in Navigation and TOCs."
});
index.addDoc({
    id: 51,
    title: "PrinceXML settings – The Electric Book template",
    content: "PrinceXML settings Alongside open-source tools, we depend on one proprietary, commercial application called PrinceXML, which is for creating PDFs. (If you’re only making ebooks, websites and apps, you don’t need Prince.) The Electric Book template will automatically install PrinceXML’s free trial version when you run the ‘Install and update dependencies’ step in the output script. Setting a Prince version It is important for everyone working on a project to use the same version of Prince, or your team members might get different-looking PDFs. To set the version of Prince for everyone, set it in package.json: 'prince': { 'version': '11.4' } Adding a Prince license In order to use a fully licensed version of Prince, create a folder in your project called _prince and save your purchased license.dat file in there. If you want to change the location of your license file, you can do that in package.json. E.g. here we use version 10r7 and save the license file in a very specific place on our machine: 'prince': { 'version': '10r7', 'license': 'C:UsersJoDocumentsPrincelicense.dat' }"
});
index.addDoc({
    id: 52,
    title: "Quick start – The Electric Book template",
    content: "Quick start This quick setup assumes you already have Jekyll, Node and Prince (for PDF output) installed. If not, see setup guidance here. Create a new project Download electric-book.zip from the latest release and extract it. In the extracted electric-book folder, run npm run electric-book to see available commands and options. Run npm run electric-book -- install first. You should only need to do this once. Run npm run electric-book -- output script to serve a website of your project. The template includes two books: book: a bare-bones book to start working in; and samples: a long book containing loads of examples. Edit your first book Open _data/works/book/default.yml and replace the sample book information there with your project and book information. In the book folder, overwrite the template’s markdown files with your own. To change the design, edit the .scss files for each output format: set project-wide styles in _sass, and book-specific styles in book/styles. We suggest making all modifications in _sass/theme. There is much more detail in the docs."
});
index.addDoc({
    id: 53,
    title: "Search indexes – The Electric Book template",
    content: "Search indexes The website and app outputs include full-text search. The search index is loaded into a user’s browser, and the search happens on the browser. This makes searching fast, and it even works offline. Keep in mind that this isn’t suitable for very large projects, where server-side search would be better. The search index is a content file that you need to refresh whenever you’ve changed the content in your project. To build or refresh the search index, run the output script for your operating system as you would for any output, and select the ‘Refresh search index’ option."
});
index.addDoc({
    id: 54,
    title: "Setting up a book – The Electric Book template",
    content: "Setting up a new book The process of setting up a new book is covered very briefly in our quick-start section. This is a slightly longer explanation. For much more detail, read the various sections listed on the docs starting page. Creating a new book Creating book content Set ‘page number one’ File naming The images folder Creating a new book To create a new book in a new project: Download electric-book.zip from the latest release and extract it. This is now your project folder. You can rename it for your project. (We recommend avoiding spaces in the folder name.) Let’s call our example project my-sci-fi. Technical note: the latest release may not contain the most recent changes to the template. If you want those, make a copy of the template repo’s master branch, and discard its Git history (i.e. delete the .git folder in your copy). An Electric Book repo, or project folder, can hold one book or many, like a series of books that share similar metadata or features (e.g. they’re all by the same author). Inside my-sci-fi, open and edit these three files: _config.yml: Edit the values there for your Jekyll setup. The comments will guide you. index.md: Replace our template text with your own. Usually, a link to each book is useful, e.g. [Space Potatoes](space-potatoes). README.md: Replace our template text with any notes your collaborators might need to know about your project. (The README file is usually only read in the context of editing the files in your folder/repo.) Optionally, rename the book folder with a one-word, lowercase version of your book’s title (e.g. space-potatoes). Use only lowercase letters and no spaces. If you’re creating more than one book, make a folder for each book. (In one-book projects, we usually just leave it called book.) Open _data/project.yml and replace the template values with your project’s information. In _data/works, edit the book’s default.yml file, filling in your project info and info about at least your first book. If your book is called ‘my-sci-fi’, you’ll need to copy and edit _data/works/book/default.yml as _data/works/my-sci-fi/default.yml. Inside a book’s folder, add a markdown file for each piece of your book, e.g. one file per chapter. Our template contains files we consider minimum requirements for most books: a cover, a title page, a copyright page, a contents page, and a chapter. Inside each book’s folder, store images in the images/_source folder. Add a cover.jpg image of your book’s front cover there, too. In each book’s styles folder, edit the values in print-pdf.scss, screen-pdf.scss, web.scss and epub.scss. Creating book content Each markdown file in space-potatoes is a part of a book, such as a table of contents or a chapter. Each file must start with: --- --- And between those ---s, we can and should specify some information about that part. This information is called YAML frontmatter. In each file’s YAML frontmatter (the info between ---s at the top) we specify the book-part’s title and (sometimes) the book-part’s style to use for that part. The style specifies what kind of book-part it is, such as a title-page or chapter. Technical note: the style YAML sets the class attribute of the output HTML’s <body> element. Themes use that class to control CSS and page structure. When you create your book, we recommend following these conventions for file naming and YAML frontmatter style settings: Book section Sample file Style in YAML Front cover (for the ebook) 0-0-cover.md cover Title page 0-1-titlepage.md title-page Copyright page 0-2-copyright.md copyright-page Table of contents 0-3-contents.md contents-page Acknowledgements 0-4-acknowledgements.md frontmatter A first chapter 1.md chapter A second chapter 2.md chapter If you don’t set the style, the page will default to style: chapter. So you actually don’t need to ever set style: chapter in a YAML header. For most chapters in a book, then, your YAML frontmatter will simply include a chapter title: --- title: 'Chapter One: What are Space Potatoes?' --- Page styles we’ve built into the template include: index for the home page of a collection cover for a front cover, which will appear in ebook editions halftitle-page for a book’s halftitle page previous-publications-page for a book’s list of the author’s previous publications title-page for a book’s title page copyright-page for the copyright or imprint page contents-page for the book’s table of contents dedication-page for a dedication page epigraph-page for an epigraph page frontispiece-page for a frontispiece page frontmatter for other prelim pages not accounted for otherwise chapter for a book’s default chapter page (and the global default) You can also invent your own page styles, and use them in your custom CSS instead of these, though you may get unexpected results if you’ve been relying on a theme for existing styles like chapter. Set ‘page number one’ Many books have two ‘page ones’: the half-title or title page and, if the prelims have roman-numeral page numbers, the first chapter. You should specify those pages so that Prince knows where to start numbering when creating PDFs. Why? Well, for example, in print output if you use frontmatter on a book-part, by default it will have roman-numeral page numbers. When the first chapter starts, it will have decimal page numbers. However, the page numbering will be consecutive from roman through decimal. That is, it will run ‘ix, x, 11, 12’. You reset the numbering to 1 at the start of the first chapter to avoid this. You reset page numbering by adding the class page-1 to the first block-level element on the relevant page. You can do this in two ways: If a markdown document starts at ‘page one’, add the class to the style YAML header. E.g. --- title: Half-title page style: halftitle-page page-1 --- And at the first chapter: --- title: Chapter One style: chapter page-1 --- Remember that chapter is the default, so you normally don’t have to specify it. But if you want to add a class in addition to chapter, you must specify both classes. This is because, if you were to use style: page-1 in a YAML header, the class page-1 would override the default style: chapter, not add to it. Alternatively, add the page-1 class to the first block-level element in the chapter by adding the tag {:.page-1} in the line immediately after it. But for this to work, the element must not have a CSS float applied to it. So often this doesn’t work as well as specifying page-1 in YAML frontmatter. File naming We recommend naming each book’s markdown files in alphabetical order. This is easiest using a numbering system, where prelims (frontmatter) files start with 0 or 00, e.g. 0-1-titlepage.md, 0-2-copyright.md, and chapter files are numbered for their chapter number, e.g. 01.md, 02.md, and so on. The alphabetical order makes it easy to see the documents in the right order at all times. We recommend adding a few descriptive words to your filenames after the numbers (or other alphabetising prefix). E.g. 02-growing-potatoes-on-saturn.md. There are two reasons for this: While editing, you’ll find it easier to move between chapters with a human-readable phrase in the filename. The filename will be part of the file’s URL as a web page, and it’s good for SEO and for end users if the URL contains some relevant key words. Note: We recommend using leading zeros in file-name numbers – that is, 02.md rather than 2.md – because that sorts correctly in most file browsers. Otherwise, some file browsers will sort 10.md before 2.md. In the rare event that you have over 99 chapters, use two leading zeros: 001.md. The images folder Alongside the content files in a book’s folder is an images folder, for images that belong to that book only. See ‘Adding image files’ for more detail."
});
index.addDoc({
    id: 55,
    title: "Setting up your computer – The Electric Book template",
    content: "Setting up your computer If you want to edit and output books on your own computer (as opposed to using a hosted, online service like the Electric Book Manager), you need to get it set up first. The Electric Book workflow is like a toolkit: it uses a range of great open-source projects. So setting it up involves installing this software. We recommend installing this software in this order (since some of these applications depend on others): Software Reason A Ruby version manager (e.g. Homebrew on Mac or Chocolatey for Windows) Ensures you’re using the right version of Ruby Ruby 2.4 or later The language that Jekyll runs in Jekyll Builds finished HTML from your content and the Electric Book template Bundler Manages other Ruby applications (‘gems’) that Jekyll depends on Pandoc Used for converting books to MS Word Git (or a Git desktop app like GitHub Desktop) Used for version control A code editor (e.g. Sublime Text, VS Code, Brackets) The best way to edit markdown and other content and style files Node.js Required to run Gulp Gulp Used for processing image files in bulk Graphicsmagick Used for multi-format image conversions We also use one proprietary, commercial application called PrinceXML, which is for creating PDFs. (If you’re only making ebooks, websites and apps, you don’t need Prince.) See ‘PrinceXML settings’ for more detail. If you also want to create apps, you will need to install: Apache Cordova Android Studio for Android apps X-Code for Apple apps Visual Studio for Windows apps Detailed guides Each of the tools listed above have their own installation guides. Nonetheless, sometimes you need extra guidance for the tricky bits or options specific to the Electric Book workflow. Mac For a detailed guide on installing all dependencies on a Mac, see this guide. Windows See these detailed guides on setting up a Windows machine: installing Jekyll on Windows (including Chocolatey, Ruby, and Bundler) installing the remaining Electric Book dependencies. Linux We don’t have a detailed guide for setting up on Linux yet. Ubuntu users who are familiar with shell scripts will find this script useful. It installs all the dependencies in one go. Don’t run it as-is unless you know what you’re doing. It may be better to read it as a guide to the commands you might run to install each Electric Book dependency in turn. Suggestions If you know of other good guides to setting up these applications, especially for Ubuntu Linux, please let us know. We have successfully installed all of these tools on Ubuntu, using each project’s own installation guides and various online fora. You can add suggestions on the Electric Book issues tracker."
});
index.addDoc({
    id: 56,
    title: "Settings – The Electric Book template",
    content: "Settings You can apply a range of settings to how your books build in _data/settings.yml. Electric Book Manager Variants Masthead Pagination Annotation Bookmarks Epub settings App settings External media SVG injection Electric Book Manager These settings are not yet used. In future, we expect to use this setting to allow or disallow Electric Book Manager servers to access your book project. electric-book-manager: enable electric-book-manager-key: '' Variants See Variants. Masthead These settings control the content of your masthead in web and app outputs. You can have different settings for web and app output. Your masthead can display: only the project name (setting: project-name) the project name and book title (setting: book-title) the project name, book title, and page title (setting: page-title) full breadcrumbs that include the project name, book title, all labels listed in nav in your book’s YAML file in _data/works, and the page title (setting: breadcrumbs). For example: web: masthead: content: page-title app: masthead: content: breadcrumbs Note that breadcrumbs slows your site build down significantly. So we recommend not using them for very big sites. Pagination Pagination is the links to the previous and next HTML pages in your books. By default these links appear at the bottom of each page. You define pagination for web and app output separately, so that they can differ if you need them to. See Pagination for details. Annotation You can turn on open annotation with Hypothes.is by setting the annotator settings for the development and/or live versions of your website to true (i.e. annotation on) or false (i.e. annotation off). By default, the template turns annotation for development, and off for live. This is because annotation can be useful during development for discussing changes within a team. Bookmarks Web and app users can save their places in books using the bookmarks function. Bookmark locations are saved in their browser’s local storage. Note that if they delete their browser’s website data, they will lose their bookmarks. You can turn bookmarks on or off in settings.yml in the settings for web and app formats. Epub settings You’ll need to adjust the epub settings if you want to embed fonts or hide the epub’s nav element. See Epub output for details. App settings Among other things, this is where you enable a Google Play expansion file, if you need one for a large app. This is a rare need, so by default this is off (false). google-play-expansion-file-enabled: false google-play-public-api-key: '' External media If a large number of images makes your project too big, you can store your images in a separate location. See External media for details. SVG injection If you link to SVG images, in web output we can inject those SVGs into the page as inline XML. This makes their text selectable and searchable, and lets you target their elements with CSS. For instance, they can then get site-wide font faces. You turn SVG injection off or on by changing this value: web: svg: inject: true When this is true, SVG injection happens automatically for all images added with {% include figure %} or {% include image %}, and to any image to which you apply the class inject-svg. To turn off SVG-injection for a specific image only, add the class no-inject-svg to it. Injecting SVGs can have side-effects, depending how your SVGs are created and coded. If you are going to inject SVGs, we recommend: Your SVGs should have inline styles (Illustrator called these ‘Style attributes’), not stylesheets in <style> elements. If different SVGs use the same class names for different styles, they all inherit each other’s styles, ruining your SVGs. If font names in your SVGs are different from the font names you use in your site CSS, adjust the font names in assets/js/svg-management.js. That script can replace font-family names in SVGs after injection. All SVGs must have a viewBox attribute for correct sizing. Good programs like Illustrator will add this automatically. Otherwise you should add it yourself to the SVG you save in your book’s _source images. For more on SVG processing, see ‘SVG processing’ in the Images section."
});
index.addDoc({
    id: 57,
    title: "Navigation and TOCs – The Electric Book template",
    content: "Navigation and tables of contents How to edit the nav and TOC Using IDs for accurate linking Adding classes to control design Generating the TOC Epub TOCs TOCs outside of books TOCs of book parts Project-wide navigation We create website navigation and tables of contents for books in the _data/works files of the Electric Book template. The _data/works files are written in a syntax called YAML, which is simple but very strict (e.g. a slight error in indentation can prevent your whole book from building), but once you get the hang of it, adding your book’s information for output will be easy enough. You can test whether your YAML is valid by pasting it into the box on yamllint.com and clicking ‘Go’. The yamllint validator will tell you whether it is valid or not, and will tell you on which lines errors appear with relative accuracy. Each book has its own folder in _data/works. And in each book’s data folder, there is at least a default.yml file, which contains all the default metadata for that book. E.g. the title, ISBNs, and the names of each file for your contents pages. For navigation for non-book pages like ‘About us’ and ‘Contact us’, see Project-wide navigation below. How to edit the nav and TOC In the YAML file for your book, find the products: section, then scroll down to the output format you want to edit. E.g. web:. Edit (or create, if it doesn’t exist) a toc: section indented by two spaces below, say, web:. For each navigation or table of contents entry, add a line for each of file: '', label: '' and, optionally, id: '' and class: '', for each TOC entry. The first line in the TOC entry should have a -, like a bullet point. To nest entries beneath an entry, give the parent entry a children: line, then indented on the next line add file: '', label: '', and so on. The label can be anything you want, but is usually the heading of the section you are including in the table of contents, since the label is what displays in the table of contents or navigation. The file is the filename of the file that the item will link to, without a file extension. The optional id is usually the slug of the heading (the heading stripped of spaces, punctuation, and uppercase letters). Here is an example: nav: - label: 'Chapter Two' file: '02' id: '2-goodbye-world' children: - label: 'subsection' file: '02' id: 'example-id' If you only add a toc for print or web output, the template will try to read that TOC for the other formats, too, so that you don’t have to repeat your toc for every format. If you want a different TOC for a given format, you can give that format it’s own toc section. Note that the toc and nav sections in your book’s YAML file in _data/works are structurally identical. In many projects they are the same except that one starts with toc and the other nav. A PDF will never need a nav, but a website output might have both a toc (which displays a Table of Contents on a body text page) and a nav (which defines the dropdown menu on a website). Using IDs for accurate linking For PDFs, ids ensure that the TOC contains accurate page numbers in books where chapters start with a blank left-hand page. Note that within a file, an id can only be used once, as ids are unique. So, for example, if you have two subsections in one file both titled ‘Extra Information’, the ids will likely be extra-information and extra-information-1. If you are having trouble finding the slug for the id: generate a web version of your book, go to the heading, right click on it and choose ‘Inspect’ (you may need Cmd Shift C on Mac to get element-specific information). In the Elements box you should see a line of code that gives you the element’s id. For a level-1 heading called ‘Chapter 5: Animals’, the id is shown in this line of code followed by the label: <h1 id='chapter-5-animals'>Chapter 5: Animals</h1> Here chapter-5-animals is the id. Note that to see files in website navigation at all, they must be included in your web output in the nav: section of your book’s YAML file in _data/works. Otherwise you have to know the URL of the page you’re looking for and enter it directly into the browser’s address bar. Adding classes to control design You can optionally add a class line to specify the class of an element. For example, frontmatter in the book (such as a preface, whose entry in the TOC which you might want to look different from chapter content) can be given a different style by adding the line class: 'frontmatter-reference' to the node of the metadata where you defined its label, file and id. By default, frontmatter-reference in PDF output can provide a lower-roman-numeral page number, if lower-roman has been set in the $frontmatter-reference-style variable in your book’s print-pdf.scss and/or screen-pdf.scss stylesheets. Generating the TOC Once you have constructed your metadata for all of the outputs of the book that you’re outputting (for example, print PDF and web formats), use: {% include toc %} in a markdown file. This tag generates a table of contents. In the default template you can see this in the 0-3-contents.md file. Epub TOCs Epubs have special TOC needs. See the epub output section on metadata. TOCs outside of books Sometimes you may want to place the TOC of a book on a page that isn’t inside that book’s directly – on the home page, for instance. To do this, you need to tell the toc include which book’s TOC you’re generating, like this: {% include toc book='moon-potatoes' %} By default, the toc include will generate the TOC of the book in the book folder. TOCs of book parts Sometimes you may want to output a TOC of only part of a book. For instance, say your book has four parts, each containing several chapters. You may want each part page to include a TOC of its chapters. In your book’s YAML file in _data/works, the chapters you want are listed within each part’s children node. To list only those in this TOC, you need to tell the toc include to start there, with the part’s children. To do this, you add a start parameter to the include tag, pointing to that children node. It can take some advanced technical know-how to write the ‘address’ of that node of data. Here is an example. We need to add the following two lines to our part page’s markdown file. The first assigns the children node’s data to a variable. The second includes the TOC on the page, using that variable. This example assumes that your book’s folder is called ‘book’: {% assign my-chapter-list = site.data.works.book.products[site.output].toc[4].children %} {% include toc start=my-chapter-list %} If you want to know how that works, let’s break it down. In site.data.works.book.products[site.output].toc[4].children each dot or [ means we’re drilling down into the data by one level: site.data.works refers to all the data in _data/works. .book refers to your book’s folder. .products refers to the products – or output formats – of the work. [site.output] refers to the current site output format, which will be one of the child nodes of products. .toc refers to that output format’s toc node. [4] refers to the fifth item in the toc node, which in our example is the part for which we want to list the chapters. .children refers to the list of chapters inside that toc[4] part. That’s what we want for our TOC! Finally, in start=my-chapter-list we’re telling the TOC include to start listing chapters at my-chapter-list, which we just defined. Project-wide navigation Websites and apps can also include pages that are not part of a book, like ‘About us’ and ‘Contact us’. These are created as markdown files in the project’s root directory. They are added to the nav by listing them in _data/nav.yml. That file is organised by language, since your project may include different languages. If you only include nav items for your project language (e.g. en for English), then all translated pages will include the English items, too. If you include translations in your nav.yml, you must include the relevant files that you point to in that language’s folder in the project root. For example, if you have this entry in your nav.yml: fr: - label: 'À propos de nous' file: 'about' then you must have a fr/about.md file in your project, or the link in your navigation will not work."
});
index.addDoc({
    id: 58,
    title: "Tracking and analytics – The Electric Book template",
    content: "Tracking and analytics If you need to add tracking code to your pages, such as Google Analytics, add the code (including <script> tags) to _includes/head-elements."
});
index.addDoc({
    id: 59,
    title: "Translations – The Electric Book template",
    content: "Translations Translations vs adaptations Setting up a translation Text Styles, fonts and images Styles Images Metadata The language selector Epub-specific languages Localisation Translating the landing page Technical details Translating project pages In the Electric Book workflow, a translation is a subfolder of the original book. Text files go into a subfolder of the book, e.g. /book/fr. We recommend naming the translation folder with the language code. This structure assumes that the translation and its parent will be kept in sync for the most part, the translation always being a faithful reproduction of the parent; but this isn’t required. A translation can be quite different to its parent. Translations vs adaptations If the translating team works independently, and especially if they want to make content changes that diverge from the parent, their translation is actually an adaptation. For instance, adding a new image or page-design feature, or changing design elements like fonts and colours. An adaptation could be a completely separate repository, which starts out as copy of the parent project, but from that point on is treated as a new project, overwriting the original files in the repository with the new language. Setting up a translation To make a translation: Add a folder to the book’s folder in _data/works with the same same as the language code. E.g. _data/works/samples/fr. In that folder, create a default.yml file. In that file, follow the same structure as the parent-language’s default.yml file, but add only the values that overwrite the parent-language edition. Any metadata not added to a translation’s YAML file will be inherited from the parent language. See Metadata below. Add the files in a new folder inside book (or your renamed book folder), usually named after the translation language code. (Remember sometimes book has been renamed for each book in a project). Text The markdown files of each translation are saved in its folder. So all markdown files for a French translation of book live in book/fr, and all markdown files for a Xhosa translation in book/xh. Styles, fonts and images Translations inherit styles, fonts and images from the parent language, unless files in those folders exist in the translation directory. Styles If you add a stylesheet to a translation’s styles directory (e.g. book/fr/styles/print-pdf.scss), those styles are added to the parent CSS. Your pages will load the parent CSS, followed by your translation CSS. This way, you only need to add to your translation CSS those rules that override parent styles. You need to create a translation stylesheet for each format that you want to augment, and it must have the same name as its parent: app.scss, epub.scss, print-pdf.scss, screen-pdf.scss, and web.scss. For instance, say you’ve used a large quote mark before all blockquotes in English. In French, you may want to use a guillemet. Your French stylesheets might only contain this: --- --- blockquote:before { content: '«'; } Note the three-hyphen YAML frontmatter, which tells Jekyll to process the file. An important, advanced example is custom hyphenation. If your book’s parent language is English, and you’ve used auto hyphenation with a custom hyphenation dictionary, you do not want your French translation to use your English hyphenation patterns. You want different custom hyphenation patterns for French. So in book/fr/styles you’ll add a stylesheet for each output format, and a new custom hyphenation dictionary. Your new translation stylesheet might have this content: --- # French translation styles # These override the parent language --- $hyphenation: auto; $hyphenation-dictionary: 'hyphenation.dic'; @import 'partials/print-hyphenation' This snippet: Uses three-hyphen YAML frontmatter so that Jekyll processes the Sass file. Sets new values for Sass variables $hyphenation and $hyphenation-dictionary that may be different from your parent-language styles. The $hyphenation-dictionary value points to a hyphenation.dic file saved alongside the translation stylesheet. Imports the relevant Sass partial _print-hyphenation.scss to override the parent-language version of the same partial. Images This works well if your images contain no text, and all the images are the same in both the parent and translation languages. If any images are different, then the translated images should also be saved in the translation images folder, e.g. book/fr/images/_source. This is most often the case, because cover images almost always need to be translated, and are therefore different. This means that you can keep the same image filenames for translations, as long as they are in a translation subfolder. Metadata Each translation must be added to the book’s folder in _data/works, e.g. _data/works/samples/fr/default.yml defines any metadata for the French edition of the samples book that differs from its parent-language edition. E.g.: language: 'fr' title: 'Échantillons' Each language inherits the parent language’s metadata unless overridden with its own metadata. The language selector When a translation includes the same file names as the parent language, translated web and app pages will include a language-selector icon, to allow users to switch between languages. For this to work: The parent-language and translated files must have the same filenames. The files must be listed in the parent and translation files lists in their _data/works YAML files. Epub-specific languages In some situations, you might want the language set in your epub’s Dublin Core OPF metadata (dc:language) to be different to the language of the translation. For instance, Kindlegen will not convert epubs in languages it does not recognise. In this situation, you might need to set the epub’s Dublin Core language tag to, say, English, even though your epub’s content files are still in, say, Asanti Twi. To set this, add a language to the epub section of your translation’s YAML file: language: 'twi' products: epub: language: 'en' Localisation To translate things like the navigation button and bookmarks dialog, edit _data/locales.yml. Translating the landing page If your project is translated, it is best to create a landing page for each language. Create a folder in the root directory named after the relevant language code, e.g. fr. In that folder, create an index.md file. This is the landing page for that language. It’s best to copy and then translate the existing index.md file in the root directory. Translated landing pages need their own translated image for open-graph metadata (i.e. social-media cards). The filename of this image is defined globally for all languages in _data/meta.yml as the project image. A file with that name must then be available for each language that has its own translated landing page. The parent language will use the project image in assets/images/web. A French landing page, for instance, will take its project image from assets/fr/images/web. So, for each translation, you need to create a folder in assets named for the language code, e.g. fr. In there, create an images folder, and in there a web folder. If you are using the output script (or gulp) to process images from _source folders into web and other image formats, then rather create a _source folder in images. The automated image-processing script will create the web folder and copy your image there from, say, assets/fr/images/_source to assets/fr/images/web. Technical details By default, the home page (aka the landing page) is in the project’s parent language. If the landing-page URL contains a query string defining a language (e.g ?lang=fr), by default the <title> element and masthead will be translated by Javascript, using phrases set in locales.yml. However, the social-sharing (open graph) data will remain in the parent language, e.g. English. So for social-sharing purposes especially, it is better to provide fully translated landing pages in each language. To do this, create a folder in the root directory named after the relevant language code. In that folder, create an index.md file. This is the landing page for that language. It’s best to copy and then translate the existing index.md file in the root directory. If that page exists, and a user navigates to a landing page containing a query string defining the language, they will be redirected to the actual, fully translated landing page for that language. Translating project pages Project pages are pages that are common to your whole project, not just one book. Examples are the landing page, the search page, the contact page, and the about page. See ‘Translating the landing page’ above for how to translate that page. Then you can create translated versions of other project pages by adding them to a language directory in the project root in the same way. E.g. the French version of the ‘About’ page would be in fr/about.md."
});
index.addDoc({
    id: 60,
    title: "Updating project files – The Electric Book template",
    content: "Updating project files The Electric Book template is developing all the time. Sometimes you’ll want to add features from later versions into a project built on an earlier version. Or if you’re working on a family of projects with common files, you may want to update projects based on changes in another, to keep files in sync. This is rarely a simple exercise. Especially while the template is still at v0.x.x, fundamental features like metadata-generated tag names and folder structures might change. Updating manually So updating is a largely manual exercise of knitting your content, styles and templates into a new copy of the template. Some tips for tackling an update: Back up everything. For the very simplest books, when updating between versions that are close together (e.g. from v0.10 to v0.11) you might be able to simply copy book folders and _data/works from the old project into a new copy of the template. Check the changelog to see whether anything major changed that your project depends on. Your PDF outputs (print-pdf in particular) need special attention, because reflow could affect layouts that you’ve already carefully refined. You may want to use a tool like diff-pdf or Acrobat Pro to compare old and new PDF outputs. You can read some discussion about updates, and see a checklist of possible things to look out for while updating, in the repo’s issues. Here is an example workflow for updating that you could adapt as follow for your updating projects: Create a new repo from the latest Electric Book template. Unless you really need the built-in samples (aka demo content) for testing, delete the samples and _data/works/samples folders. Manually copy values from _data/meta.yml (in old repos) or _data/works (newer repos) from the old project to your new one. Copy any custom or customised files you created in _includes from the old project to the new one. Make a decision whether to use only the new template’s _includes, or to copy the includes in the old version over the newer ones. We don’t recommend keeping the old includes. Either way, you need to watch for changes or bugs in your output, in case the behaviour of includes changed. Copy all fonts, images and text files from the old project to the new one, into the relevant folders (e.g. old images/print-pdf images may now go into images/_source). Be careful to only copy across actual content files, and retain the new template’s default files (like index.md and cover.md). Decide whether to use the latest template styles or keep your old styles. Especially if you have an existing, page-refined print edition and you want to retain its layout, we recommend copying across your old project’s _sass partials and book styles, and discarding the new template’s ones, to ensure like-for-like output. You’re likely to find some bugs either way that you will have to find and fix manually. Copy any content you’d like to keep from the old project’s root index.md and README files into the new template’s ones. Output and manually debug. Using the update script The process of updating a project can be made much easier by using the update.sh script in _tools/update, together with files.txt, a list of files to update. This is an experimental approach, so be careful. The update.sh script copies all the files listed in files.txt to or from another project. As long as files.txt lists every file you need to update, running update.sh will work. After running the update, check all the changes to your files (e.g. in a Git diff) to be sure that they are expected changes. The files.txt file should therefore list all files that are common to all the projects you might sync – so not content files in places like _data and book folders, or project-specific files in _includes. The files.txt file can include blank lines and comments on lines that start with #. The update.sh script only works on Mac and Linux machines, or on unix terminals in Windows (e.g. Cygwin with rsync installed). In Terminal (or Cygwin with rsync installed), navigate (cd) to _tools/update and run the script with at least one argument: the name of the project to or from which you want to update. For example, in Terminal, in theeEmpireStrikesBack/_tools/update, you might enter: ./update.sh --to aNewHope That would copy all the common files in theeEmpireStrikesBack to aNewHope. If you set only one direction to copy (e.g. --to), the other direction (--from) is assumed to be the project you’re in. The files.txt list used is always the one in the current project. Optionally, add the --preview option, which only does a dry run of the update, showing you what files will be changed without actually copying any files: ./update.sh --to aNewHope --preview Or to sync two other projects with the file list from theeEmpireStrikesBack: ./update.sh --from returnOfTheJedi --to aNewHope"
});
index.addDoc({
    id: 61,
    title: "Variants – The Electric Book template",
    content: "Variants Activating a variant Variants in markdown Variant stylesheets Variant metadata Variant tables of contents For most books, the default outputs (print-pdf, screen-pdf, web, epub, app) are sufficient. You only need one version of each of those. But sometimes you need a variation on one or more of these. For instance, you might be producing two versions of a printed book with different designs (e.g. for schools and for trade) with different selections of chapters. Or you may be white-labelling a website, and need to output various versions with different colours or logos. Variants make that possible. Activating a variant To activate a variant, put its name as the active-variant in settings.yml. Make sure you deactivate it, for instance by commenting it out, to get your default output back. Note that an active variant applies to your entire project, not to a specific book. Then each book can have its own metadata, content and styles for a given project-wide variant. Variants in markdown If you only want certain content to display in a specific variant, wrap that content in a if variant tag. For example: {% if variant == 'myvariant' %} This content will only output when the active-variant is `myvariant`. {% endif %} For the variant tag to work, you must include the page’s metadata at the start of the markdown document. After the YAML frontmatter (the ---s), add: {% include metadata %} Variant stylesheets You can create new stylesheets in addition to our standard ones, and specify these in _data/settings.yml file, like this: variants: - variant: myvariant print-pdf-stylesheet: 'print-pdf-myvariant.css' web-stylesheet: 'web-myvariant.css' - variant: anothervariant app-variant-stylesheet: 'app-anothervariant.css' You can list as many variants as you like in this way. The one that applies is the one set as the active-variant (see above). If no active-variant is set, then none of the variant stylesheets will apply on output. Variant metadata Sometimes a variant has different metadata to its parent (such as a different subtitle or author), or contains different files. You can define variant-specific metadata in a book’s _data folder. Create a new YAML file alongside the book’s default.yml file. Name that new file after the variant, with a .yml extension. E.g. myvariant.yml. In that new YAML file, define the variant’s metadata as you would in default.yml. You only need to add fields for things that are different from default.yml. For example, if the only thing that changes is the subtitle, your variant YAML file will only contain one line, e.g. subtitle: 'The Jabberwocky Returns'. Variant tables of contents Since tables of contents defined in YAML can be long and complex, it can be a hassle to redefine an entire TOC in a variant’s YAML file just for one or two differences. So, for TOCs, you can also change the TOC output for a variant by adding the names of the variants in which a TOC item should appear to the main book’s TOC items nodes as variants. That node in the TOC will only appear when you output one of the listed variants. For example, this node will only appear in variants named school and varsity: toc: ... label: 'Study tips' file: '05-study-tips' variants: school, varsity ‘Study tips’ will not appear in default output. If you want a TOC item to appear in both default outputs and specific variants, add default to the variants list here. E.g. toc: ... label: 'Study tips' file: '05-study-tips' variants: default, school, varsity Now, in this example, ‘Study tips’ will appear in default outputs and the ‘school’ and ‘varsity’ variants, but not, say, the ‘professional’ variant (if you had such a variant in your project)."
});
index.addDoc({
    id: 62,
    title: "Troubleshooting and tips – The Electric Book template",
    content: "Troubleshooting and tips Checking markdown syntax Jekyll and GitHub Using includes inside blockquotes Here are some common issues we’ve encountered, especially when we’re new to the Electric Book workflow. Checking markdown syntax Use a good text editor that colour-codes markdown as you work. We like Sublime Text (with MarkdownEditing installed and set to MultiMarkdown) or Notepad++ (with this markdown highlighter). If you’re working on Windows, set your default character encoding for your documents to ‘UTF-8 without BOM’, aka UTF-8, and not a ‘UTF-with-BOM’ option. (Jekyll will break if you don’t.) To check how your markdown converts to HTML while you work, you can use this Online Kramdown Editor by Daniel Perez Alvarez. Keep the kramdown quick reference handy. In lists, kramdown lets you use a space or a tab between the list marker (e.g. * or 1. etc.) and the list text. If only to solve an issue with nesting blockquotes in lists, use a tab between the list marker and the start of the list text, and the same tab at the start of the blockquote line. That is, the indentation (the tab) must be exactly the same for the blockquote to nest correctly in the list. (A local Jekyll instance may correctly parse nested lists even with a space after the list marker and a tab before the blockquote >. But GitHub Pages is much stricter and requires exactly the same indentation.) Keep spans within block elements. For instance, if you have two paragraphs in italic, don’t start the italics with * in the first paragraph and end the span with a second * in the next paragraph. The HTML needs one span (e.g. <em> span) in the first para, and another in the second para. The converter isn’t smart enough to split your intended italics into two spans. Rather end the first span in the first para, and start another one in the second. Jekyll and GitHub When running Jekyll locally, and if your repo is a project using GitHub Pages (not an organisation or user site), you’ll need to add --baseurl '' when running Jekyll at the command line. Here’s how and why. You may get different results between a local Jekyll install and GitHub Pages, even if both are using kramdown. Always check (at least spot check) both places. Jekyll may break if you use a colon (:) in YAML frontmatter like a title. For instance, title: Beans: The musical fruit. While you can either use another character (e.g. title: Beans—The musical fruit or the HTML &#58; for the colon, title: Beans&#58; The musical fruit), it’s easier to just wrap your title in double quotes: title: 'Beans: The musical fruit'. We recommend setting .gitignore to ignore the _site folder, where Jekyll will store HTML output locally. If you choose not to .gitignore your _site folder, it’ll contain (and sync to GitHub) your local machine’s most recent Jekyll HTML output. (The _site folder has nothing to do with what GitHub Pages publishes.) In theory, committing the _site folder makes it easy for collaborators without Jekyll to grab a book’s output HTML from the repo. But it comes with problems: committers have a responsibility to make sure their Jekyll instance does a good job, and that their _site output is up-to-date with the latest changes to the underlying markdown. Importantly, if you have more than one committer on a book, you’ll get lots of merge conflicts in the _site folder, and this will make your head hurt. Using includes inside blockquotes If you use {% include figure %} inside a markdown blockquote, for instance if you’re creating a box, the figure breaks the box. This is because the Liquid tag itself, when processed, adds a blank line in the markdown. To kramdown, it looks like your > blockquote is finished. And at the next > after the include, a new blockquote starts – where you wanted one continuous blockquote. Issues with newlines at Liquid tags is a widespread PITA. It’s possible that this will be simpler to solve when Jekyll uses Liquid 4, which seems to provide special syntax for removing whitespace. Till then, this workaround works well: capture the include and output the captured result with the strip_newlines filter. Here is an example. This will not work: > This figure shows the different paths taken by these economies. > > {% include figure image='fig.jpg' %} > > Notice that West Germany started from a more favourable position in 1950 than East Germany. Yet in 1936, before the war began, the two parts of Germany had virtually identical living standards. {:.box} And this does work: > This figure shows the different paths taken by these economies. > > {% capture myfigure %} {% include figure image='fig.jpg' %} {% endcapture %}{{ myfigure | strip_newlines }} > > Notice that West Germany started from a more favourable position in 1950 than East Germany. Yet in 1936, before the war began, the two parts of Germany had virtually identical living standards. {:.box} Thanks to Clemens Tolboom and Nathan Arthur for the tip. Another approach – which is actually easier if you know a little HTML – is to use an HTML blockquote rather than a markdown one. In that case, you’d do this: <blockquote class='box' markdown=1'> This figure shows the different paths taken by these economies. {% include figure image='fig.jpg' %} Notice that West Germany started from a more favourable position in 1950 than East Germany. Yet in 1936, before the war began, the two parts of Germany had virtually identical living standards. </blockquote> Note that you need markdown='1' to tell kramdown to process the content of your HTML blockquote as markdown."
});
